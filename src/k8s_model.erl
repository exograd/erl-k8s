%% File generated by erl-openapi
%% (https://github.com/exograd/erl-openapi) on 2021-02-02T07:45:13Z

-module(k8s_model).

-export_type([authentication_v1_token_request_status/0,
              storage_v1beta1_csi_driver/0,
              core_v1_limit_range_spec/0,
              admissionregistration_v1beta1_mutating_webhook_configuration/0,
              core_v1_namespace_condition/0,
              networking_v1_network_policy_ingress_rule/0,
              node_v1beta1_runtime_class_list/0,
              apiextensions_v1_custom_resource_definition_status/0,
              flowcontrol_v1beta1_priority_level_configuration_status/0,
              policy_v1beta1_runtime_class_strategy_options/0,
              storage_v1_storage_class_list/0,
              core_v1_replication_controller_list/0,
              apiextensions_v1_json_schema_props_or_array/0,
              policy_v1beta1_eviction/0,
              apiextensions_v1beta1_custom_resource_definition_spec/0,
              authorization_v1beta1_self_subject_access_review/0,
              apimachinery_apis_meta_v1_time/0,
              core_v1_limit_range_item/0,
              autoscaling_v2beta2_pods_metric_source/0,
              flowcontrol_v1alpha1_group_subject/0,
              apimachinery_apis_meta_v1_patch/0,
              core_v1_container_port/0,
              autoscaling_v2beta2_object_metric_source/0,
              policy_v1beta1_allowed_host_path/0,
              core_v1_pod_ip/0,
              batch_v1beta1_cron_job_spec/0,
              core_v1_node_config_status/0,
              node_v1alpha1_runtime_class_list/0,
              core_v1_handler/0,
              batch_v2alpha1_job_template_spec/0,
              storage_v1_volume_attachment/0,
              rbac_v1beta1_role_ref/0,
              core_v1_client_ip_config/0,
              apiextensions_v1_webhook_client_config/0,
              apimachinery_apis_meta_v1_api_versions/0,
              apps_v1_replica_set_spec/0,
              autoscaling_v2beta1_container_resource_metric_source/0,
              core_v1_daemon_endpoint/0,
              apiextensions_v1beta1_custom_resource_conversion/0,
              networking_v1beta1_ingress/0,
              admissionregistration_v1_validating_webhook_configuration/0,
              core_v1_persistent_volume_list/0,
              apiextensions_v1beta1_json_schema_props_or_array/0,
              flowcontrol_v1alpha1_priority_level_configuration_spec/0,
              autoscaling_v2beta2_horizontal_pod_autoscaler_list/0,
              networking_v1beta1_ingress_rule/0,
              core_v1_ephemeral_containers/0,
              core_v1_limit_range/0,
              networking_v1_service_backend_port/0,
              batch_v1_job_condition/0,
              core_v1_config_map_volume_source/0,
              node_v1alpha1_scheduling/0,
              apps_v1_deployment_status/0,
              networking_v1beta1_ingress_tls/0,
              core_v1_container/0,
              admissionregistration_v1_mutating_webhook_configuration/0,
              flowcontrol_v1beta1_resource_policy_rule/0,
              core_v1_container_state_terminated/0,
              admissionregistration_v1_mutating_webhook_configuration_list/0,
              core_v1_secret_reference/0,
              core_v1_csi_volume_source/0,
              core_v1_volume_mount/0,
              networking_v1_http_ingress_rule_value/0,
              core_v1_node_address/0,
              flowcontrol_v1alpha1_flow_schema_list/0,
              authorization_v1beta1_subject_access_review_status/0,
              autoscaling_v2beta1_horizontal_pod_autoscaler_list/0,
              rbac_v1alpha1_policy_rule/0,
              apimachinery_apis_meta_v1_label_selector/0,
              core_v1_vsphere_virtual_disk_volume_source/0,
              rbac_v1beta1_cluster_role_list/0,
              core_v1_replication_controller_status/0,
              flowcontrol_v1alpha1_priority_level_configuration_reference/0,
              storage_v1beta1_csi_node_list/0,
              core_v1_flocker_volume_source/0,
              core_v1_cinder_volume_source/0,
              autoscaling_v2beta2_metric_status/0,
              autoscaling_v2beta2_hpa_scaling_rules/0,
              batch_v1beta1_cron_job_list/0,
              apimachinery_apis_meta_v1_status_cause/0,
              core_v1_resource_quota_list/0,
              core_v1_pod_security_context/0,
              apimachinery_api_resource_quantity/0,
              policy_v1beta1_pod_security_policy/0,
              apps_v1_rolling_update_deployment/0,
              rbac_v1_policy_rule/0,
              rbac_v1beta1_aggregation_rule/0,
              node_v1alpha1_runtime_class_spec/0,
              flowcontrol_v1alpha1_user_subject/0,
              apps_v1_controller_revision_list/0,
              core_v1_pod_readiness_gate/0,
              core_v1_namespace_list/0,
              apiserverinternal_v1alpha1_storage_version_status/0,
              storage_v1_csi_driver/0,
              autoscaling_v2beta2_resource_metric_status/0,
              core_v1_exec_action/0,
              core_v1_security_context/0,
              autoscaling_v1_horizontal_pod_autoscaler_spec/0,
              core_v1_secret_key_selector/0,
              authorization_v1beta1_local_subject_access_review/0,
              storage_v1alpha1_volume_attachment_list/0,
              authorization_v1_subject_access_review_status/0,
              core_v1_service_list/0,
              rbac_v1beta1_role/0,
              autoscaling_v2beta1_object_metric_status/0,
              apiextensions_v1beta1_custom_resource_subresources/0,
              apimachinery_apis_meta_v1_server_address_by_client_cidr/0,
              apps_v1_stateful_set_condition/0,
              core_v1_secret/0,
              core_v1_node_affinity/0,
              apps_v1_deployment_strategy/0,
              apimachinery_runtime_raw_extension/0,
              apimachinery_apis_meta_v1_group_version_for_discovery/0,
              storage_v1_volume_attachment_status/0,
              rbac_v1_role_ref/0,
              apiextensions_v1_service_reference/0,
              flowcontrol_v1alpha1_priority_level_configuration/0,
              apps_v1_replica_set_list/0,
              core_v1_ceph_fs_persistent_volume_source/0,
              storage_v1_volume_attachment_list/0,
              apimachinery_apis_meta_v1_api_resource_list/0,
              admissionregistration_v1_rule_with_operations/0,
              autoscaling_v2beta1_horizontal_pod_autoscaler_spec/0,
              autoscaling_v1_horizontal_pod_autoscaler_list/0,
              admissionregistration_v1_validating_webhook/0,
              autoscaling_v1_horizontal_pod_autoscaler_status/0,
              core_v1_pod_spec/0,
              apiextensions_v1_custom_resource_validation/0,
              flowcontrol_v1alpha1_flow_distinguisher_method/0,
              core_v1_seccomp_profile/0,
              apps_v1_stateful_set_update_strategy/0,
              events_v1_event_list/0,
              apimachinery_apis_meta_v1_status/0,
              autoscaling_v2beta2_horizontal_pod_autoscaler_condition/0,
              flowcontrol_v1alpha1_non_resource_policy_rule/0,
              core_v1_preferred_scheduling_term/0,
              storage_v1beta1_volume_attachment/0,
              core_v1_persistent_volume_status/0,
              core_v1_node_selector_requirement/0,
              core_v1_persistent_volume_claim/0,
              autoscaling_v2beta1_object_metric_source/0,
              networking_v1beta1_ingress_class_spec/0,
              batch_v2alpha1_cron_job_spec/0,
              apiextensions_v1_custom_resource_definition_list/0,
              networking_v1_ingress_spec/0,
              authorization_v1_resource_rule/0,
              events_v1beta1_event/0,
              core_v1_pod_status/0,
              rbac_v1alpha1_role_binding_list/0,
              events_v1beta1_event_list/0,
              apiextensions_v1beta1_custom_resource_definition_status/0,
              node_v1_runtime_class/0,
              core_v1_node/0,
              apimachinery_apis_meta_v1_api_resource/0,
              flowcontrol_v1alpha1_resource_policy_rule/0,
              policy_v1beta1_se_linux_strategy_options/0,
              authorization_v1_non_resource_attributes/0,
              core_v1_node_spec/0,
              apiregistration_v1_api_service_list/0,
              storage_v1alpha1_volume_attachment_source/0,
              authentication_v1_token_review/0,
              node_v1_scheduling/0,
              core_v1_glusterfs_volume_source/0,
              apimachinery_apis_meta_v1_preconditions/0,
              core_v1_load_balancer_status/0,
              storage_v1alpha1_volume_attachment/0,
              autoscaling_v1_cross_version_object_reference/0,
              apiextensions_v1_custom_resource_definition/0,
              networking_v1_ingress_list/0,
              rbac_v1_cluster_role_list/0,
              core_v1_service_account/0,
              autoscaling_v1_scale/0,
              storage_v1beta1_csi_node_driver/0,
              core_v1_cinder_persistent_volume_source/0,
              core_v1_service_spec/0,
              apiregistration_v1beta1_api_service_spec/0,
              apiextensions_v1beta1_custom_resource_definition_list/0,
              networking_v1_network_policy_port/0,
              flowcontrol_v1beta1_flow_schema_condition/0,
              flowcontrol_v1beta1_limited_priority_level_configuration/0,
              flowcontrol_v1beta1_flow_distinguisher_method/0,
              discovery_v1beta1_endpoint_conditions/0,
              core_v1_persistent_volume_claim_status/0,
              autoscaling_v2beta2_hpa_scaling_policy/0,
              apps_v1_deployment_spec/0,
              core_v1_config_map_projection/0,
              networking_v1beta1_ingress_list/0,
              core_v1_probe/0,
              node_v1beta1_overhead/0,
              rbac_v1alpha1_role_binding/0,
              scheduling_v1_priority_class/0,
              rbac_v1alpha1_aggregation_rule/0,
              core_v1_persistent_volume_claim_list/0,
              flowcontrol_v1beta1_priority_level_configuration/0,
              rbac_v1_cluster_role/0,
              core_v1_typed_local_object_reference/0,
              flowcontrol_v1beta1_flow_schema_spec/0,
              storage_v1_volume_attachment_source/0,
              certificates_v1beta1_certificate_signing_request_list/0,
              policy_v1beta1_run_as_user_strategy_options/0,
              flowcontrol_v1alpha1_queuing_configuration/0,
              core_v1_resource_quota/0,
              apimachinery_apis_meta_v1_condition/0,
              core_v1_replication_controller_spec/0,
              apimachinery_apis_meta_v1_list_meta/0,
              core_v1_topology_selector_term/0,
              authorization_v1beta1_non_resource_attributes/0,
              autoscaling_v2beta2_cross_version_object_reference/0,
              flowcontrol_v1alpha1_limit_response/0,
              authorization_v1beta1_subject_access_review_spec/0,
              core_v1_node_condition/0,
              apps_v1_rolling_update_daemon_set/0,
              networking_v1_network_policy_list/0,
              storage_v1_csi_driver_list/0,
              apimachinery_apis_meta_v1_api_group_list/0,
              authorization_v1beta1_non_resource_rule/0,
              admissionregistration_v1beta1_service_reference/0,
              core_v1_http_get_action/0,
              rbac_v1_cluster_role_binding_list/0,
              networking_v1beta1_ingress_status/0,
              autoscaling_v2beta2_object_metric_status/0,
              apiextensions_v1_custom_resource_definition_names/0,
              authentication_v1_token_request/0,
              core_v1_config_map_list/0,
              certificates_v1beta1_certificate_signing_request_spec/0,
              apiregistration_v1beta1_api_service_condition/0,
              apps_v1_controller_revision/0,
              core_v1_ceph_fs_volume_source/0,
              flowcontrol_v1beta1_priority_level_configuration_reference/0,
              apps_v1_deployment/0,
              policy_v1beta1_fs_group_strategy_options/0,
              networking_v1beta1_http_ingress_rule_value/0,
              core_v1_local_object_reference/0,
              core_v1_replication_controller_condition/0,
              core_v1_host_path_volume_source/0,
              authorization_v1_self_subject_rules_review/0,
              apiextensions_v1_custom_resource_subresource_status/0,
              rbac_v1alpha1_subject/0,
              storage_v1beta1_volume_node_resources/0,
              core_v1_node_daemon_endpoints/0,
              core_v1_session_affinity_config/0,
              core_v1_storage_os_persistent_volume_source/0,
              core_v1_node_system_info/0,
              core_v1_config_map_key_selector/0,
              core_v1_scoped_resource_selector_requirement/0,
              networking_v1_network_policy_egress_rule/0,
              autoscaling_v2beta1_external_metric_source/0,
              certificates_v1beta1_certificate_signing_request_condition/0,
              core_v1_service_status/0,
              extensions_v1beta1_ingress_tls/0,
              apiextensions_v1beta1_service_reference/0,
              storage_v1beta1_volume_error/0,
              networking_v1_ingress_rule/0,
              autoscaling_v2beta2_metric_spec/0,
              scheduling_v1beta1_priority_class/0,
              batch_v2alpha1_cron_job_list/0,
              core_v1_sysctl/0,
              flowcontrol_v1beta1_queuing_configuration/0,
              apiregistration_v1_api_service_status/0,
              batch_v1_job_status/0,
              scheduling_v1beta1_priority_class_list/0,
              storage_v1_csi_node_spec/0,
              core_v1_rbd_volume_source/0,
              apiextensions_v1beta1_custom_resource_subresource_status/0,
              scheduling_v1_priority_class_list/0,
              core_v1_ephemeral_volume_source/0,
              core_v1_replication_controller/0,
              rbac_v1_role_list/0,
              node_v1alpha1_overhead/0,
              core_v1_volume_node_affinity/0,
              flowcontrol_v1beta1_flow_schema_list/0,
              core_v1_glusterfs_persistent_volume_source/0,
              apps_v1_daemon_set_list/0,
              apps_v1_rolling_update_stateful_set_strategy/0,
              core_v1_persistent_volume_claim_spec/0,
              autoscaling_v1_horizontal_pod_autoscaler/0,
              core_v1_persistent_volume_claim_template/0,
              core_v1_persistent_volume/0,
              flowcontrol_v1beta1_flow_schema_status/0,
              policy_v1beta1_pod_security_policy_list/0,
              core_v1_attached_volume/0,
              core_v1_object_reference/0,
              coordination_v1_lease_list/0,
              rbac_v1alpha1_cluster_role_binding_list/0,
              admissionregistration_v1_mutating_webhook/0,
              admissionregistration_v1beta1_rule_with_operations/0,
              storage_v1_csi_node/0,
              apiregistration_v1_api_service/0,
              batch_v1beta1_cron_job/0,
              storage_v1alpha1_volume_attachment_spec/0,
              autoscaling_v2beta1_container_resource_metric_status/0,
              core_v1_nfs_volume_source/0,
              core_v1_quobyte_volume_source/0,
              autoscaling_v2beta2_horizontal_pod_autoscaler_status/0,
              core_v1_pod_dns_config/0,
              core_v1_fc_volume_source/0,
              apiextensions_v1_external_documentation/0,
              autoscaling_v2beta1_resource_metric_status/0,
              rbac_v1alpha1_cluster_role_list/0,
              networking_v1_ingress_status/0,
              autoscaling_v2beta1_external_metric_status/0,
              core_v1_service_account_token_projection/0,
              certificates_v1beta1_certificate_signing_request/0,
              core_v1_config_map_node_config_source/0,
              apiextensions_v1beta1_custom_resource_column_definition/0,
              core_v1_portworx_volume_source/0,
              autoscaling_v2beta1_pods_metric_source/0,
              policy_v1beta1_run_as_group_strategy_options/0,
              storage_v1_token_request/0,
              storage_v1alpha1_csi_storage_capacity_list/0,
              core_v1_node_selector/0,
              batch_v2alpha1_cron_job/0,
              admissionregistration_v1beta1_mutating_webhook_configuration_list/0,
              core_v1_limit_range_list/0,
              core_v1_event_list/0,
              apiextensions_v1beta1_custom_resource_definition_version/0,
              flowcontrol_v1beta1_priority_level_configuration_list/0,
              apiextensions_v1beta1_custom_resource_subresource_scale/0,
              core_v1_tcp_socket_action/0,
              core_v1_pod_dns_config_option/0,
              authentication_v1_token_request_spec/0,
              core_v1_config_map/0,
              autoscaling_v2beta2_horizontal_pod_autoscaler/0,
              batch_v1_job/0,
              autoscaling_v2beta1_metric_spec/0,
              admissionregistration_v1_webhook_client_config/0,
              core_v1_pod_affinity_term/0,
              core_v1_volume_projection/0,
              apiserverinternal_v1alpha1_server_storage_version/0,
              rbac_v1beta1_subject/0,
              extensions_v1beta1_ingress_list/0,
              flowcontrol_v1alpha1_policy_rules_with_subjects/0,
              scheduling_v1alpha1_priority_class/0,
              core_v1_csi_persistent_volume_source/0,
              core_v1_projected_volume_source/0,
              admissionregistration_v1beta1_mutating_webhook/0,
              discovery_v1beta1_endpoint_slice_list/0,
              storage_v1alpha1_volume_error/0,
              core_v1_http_header/0,
              apiserverinternal_v1alpha1_storage_version_list/0,
              autoscaling_v2beta2_container_resource_metric_status/0,
              extensions_v1beta1_http_ingress_path/0,
              rbac_v1beta1_policy_rule/0,
              rbac_v1_role/0,
              storage_v1_volume_node_resources/0,
              extensions_v1beta1_ingress_spec/0,
              admissionregistration_v1beta1_validating_webhook_configuration_list/0,
              rbac_v1_aggregation_rule/0,
              certificates_v1beta1_certificate_signing_request_status/0,
              apps_v1_replica_set_condition/0,
              rbac_v1alpha1_role/0,
              apps_v1_stateful_set/0,
              coordination_v1beta1_lease_spec/0,
              storage_v1_storage_class/0,
              autoscaling_v2beta1_pods_metric_status/0,
              autoscaling_v2beta1_cross_version_object_reference/0,
              authorization_v1_self_subject_access_review_spec/0,
              core_v1_event_source/0,
              policy_v1beta1_id_range/0,
              apimachinery_apis_meta_v1_status_details/0,
              authorization_v1beta1_resource_attributes/0,
              authentication_v1_bound_object_reference/0,
              authorization_v1beta1_self_subject_access_review_spec/0,
              core_v1_persistent_volume_claim_condition/0,
              apiserverinternal_v1alpha1_storage_version/0,
              apiextensions_v1_json_schema_props_or_bool/0,
              apiextensions_v1_json_schema_props_or_string_array/0,
              core_v1_component_status_list/0,
              storage_v1beta1_token_request/0,
              flowcontrol_v1beta1_priority_level_configuration_condition/0,
              core_v1_pod_template_spec/0,
              apimachinery_apis_meta_v1_object_meta/0,
              storage_v1_csi_driver_spec/0,
              apps_v1_deployment_condition/0,
              flowcontrol_v1alpha1_service_account_subject/0,
              extensions_v1beta1_ingress_rule/0,
              apiserverinternal_v1alpha1_storage_version_spec/0,
              authorization_v1_subject_access_review_spec/0,
              core_v1_pod/0,
              storage_v1alpha1_csi_storage_capacity/0,
              core_v1_node_config_source/0,
              apimachinery_version_info/0,
              core_v1_pod_affinity/0,
              rbac_v1alpha1_cluster_role/0,
              coordination_v1beta1_lease/0,
              networking_v1_ingress/0,
              core_v1_flex_persistent_volume_source/0,
              coordination_v1beta1_lease_list/0,
              core_v1_git_repo_volume_source/0,
              core_v1_secret_projection/0,
              apps_v1_daemon_set_status/0,
              core_v1_env_from_source/0,
              flowcontrol_v1beta1_group_subject/0,
              storage_v1beta1_volume_attachment_source/0,
              admissionregistration_v1_validating_webhook_configuration_list/0,
              networking_v1_network_policy_spec/0,
              core_v1_volume/0,
              core_v1_secret_list/0,
              core_v1_gce_persistent_disk_volume_source/0,
              core_v1_weighted_pod_affinity_term/0,
              core_v1_namespace_status/0,
              core_v1_pod_list/0,
              flowcontrol_v1beta1_user_subject/0,
              apps_v1_stateful_set_list/0,
              core_v1_ephemeral_container/0,
              core_v1_volume_device/0,
              core_v1_capabilities/0,
              policy_v1beta1_pod_disruption_budget/0,
              flowcontrol_v1beta1_limit_response/0,
              core_v1_node_status/0,
              flowcontrol_v1beta1_flow_schema/0,
              storage_v1beta1_csi_node/0,
              core_v1_windows_security_context_options/0,
              storage_v1_volume_attachment_spec/0,
              apiserverinternal_v1alpha1_storage_version_condition/0,
              authorization_v1_subject_access_review/0,
              apimachinery_util_intstr_int_or_string/0,
              core_v1_endpoints_list/0,
              apps_v1_replica_set/0,
              apiextensions_v1beta1_json_schema_props_or_string_array/0,
              flowcontrol_v1alpha1_flow_schema/0,
              networking_v1_ingress_class_list/0,
              core_v1_endpoints/0,
              core_v1_aws_elastic_block_store_volume_source/0,
              apimachinery_apis_meta_v1_api_group/0,
              authorization_v1beta1_resource_rule/0,
              flowcontrol_v1beta1_priority_level_configuration_spec/0,
              discovery_v1beta1_endpoint/0,
              core_v1_scale_io_volume_source/0,
              networking_v1_ingress_class/0,
              autoscaling_v2beta2_horizontal_pod_autoscaler_behavior/0,
              apiextensions_v1beta1_custom_resource_definition_names/0,
              admissionregistration_v1beta1_validating_webhook_configuration/0,
              core_v1_namespace/0,
              apps_v1_stateful_set_status/0,
              networking_v1beta1_ingress_spec/0,
              apiextensions_v1beta1_webhook_client_config/0,
              authentication_v1beta1_user_info/0,
              policy_v1beta1_pod_security_policy_spec/0,
              discovery_v1beta1_endpoint_port/0,
              flowcontrol_v1alpha1_flow_schema_condition/0,
              flowcontrol_v1alpha1_flow_schema_status/0,
              apiextensions_v1beta1_custom_resource_definition/0,
              apiextensions_v1_custom_resource_conversion/0,
              autoscaling_v2beta2_external_metric_status/0,
              core_v1_service_port/0,
              core_v1_config_map_env_source/0,
              networking_v1_ingress_backend/0,
              core_v1_lifecycle/0,
              storage_v1_volume_error/0,
              core_v1_toleration/0,
              authentication_v1_token_review_spec/0,
              core_v1_pod_template_list/0,
              storage_v1beta1_volume_attachment_spec/0,
              core_v1_photon_persistent_disk_volume_source/0,
              authorization_v1_self_subject_access_review/0,
              networking_v1_ingress_class_spec/0,
              apimachinery_apis_meta_v1_delete_options/0,
              core_v1_azure_file_persistent_volume_source/0,
              apps_v1_deployment_list/0,
              events_v1_event_series/0,
              batch_v1_job_list/0,
              authentication_v1_user_info/0,
              apiregistration_v1beta1_api_service/0,
              apiextensions_v1beta1_json_schema_props_or_bool/0,
              authorization_v1_non_resource_rule/0,
              apiextensions_v1_custom_resource_definition_spec/0,
              networking_v1_network_policy_peer/0,
              core_v1_endpoint_subset/0,
              core_v1_load_balancer_ingress/0,
              apimachinery_apis_meta_v1_micro_time/0,
              discovery_v1beta1_endpoint_slice/0,
              autoscaling_v2beta2_container_resource_metric_source/0,
              core_v1_empty_dir_volume_source/0,
              core_v1_pod_condition/0,
              authorization_v1beta1_self_subject_rules_review_spec/0,
              certificates_v1_certificate_signing_request_list/0,
              apiregistration_v1_api_service_spec/0,
              flowcontrol_v1alpha1_priority_level_configuration_condition/0,
              core_v1_host_alias/0,
              flowcontrol_v1alpha1_subject/0,
              autoscaling_v2beta2_metric_value_status/0,
              coordination_v1_lease/0,
              storage_v1beta1_csi_node_spec/0,
              core_v1_resource_quota_status/0,
              batch_v1beta1_job_template_spec/0,
              rbac_v1beta1_role_list/0,
              rbac_v1alpha1_role_ref/0,
              core_v1_binding/0,
              policy_v1beta1_pod_disruption_budget_spec/0,
              apps_v1_daemon_set_condition/0,
              core_v1_pod_anti_affinity/0,
              core_v1_env_var/0,
              apps_v1_daemon_set_spec/0,
              rbac_v1_cluster_role_binding/0,
              admissionregistration_v1beta1_webhook_client_config/0,
              core_v1_key_to_path/0,
              apiextensions_v1_custom_resource_definition_version/0,
              node_v1_runtime_class_list/0,
              rbac_v1alpha1_role_list/0,
              core_v1_downward_api_volume_source/0,
              autoscaling_v2beta2_pods_metric_status/0,
              apps_v1_daemon_set_update_strategy/0,
              storage_v1beta1_volume_attachment_list/0,
              core_v1_se_linux_options/0,
              authorization_v1_resource_attributes/0,
              storage_v1beta1_csi_driver_list/0,
              policy_v1beta1_allowed_flex_volume/0,
              networking_v1beta1_ingress_class/0,
              flowcontrol_v1beta1_policy_rules_with_subjects/0,
              networking_v1beta1_ingress_class_list/0,
              apps_v1_stateful_set_spec/0,
              apimachinery_apis_meta_v1_fields_v1/0,
              flowcontrol_v1alpha1_priority_level_configuration_status/0,
              apiextensions_v1beta1_custom_resource_definition_condition/0,
              rbac_v1beta1_cluster_role_binding/0,
              authentication_v1beta1_token_review/0,
              networking_v1_network_policy/0,
              authentication_v1_token_review_status/0,
              storage_v1_csi_node_list/0,
              extensions_v1beta1_http_ingress_rule_value/0,
              core_v1_endpoint_port/0,
              core_v1_container_state_waiting/0,
              rbac_v1alpha1_cluster_role_binding/0,
              core_v1_node_selector_term/0,
              core_v1_env_var_source/0,
              core_v1_component_condition/0,
              apps_v1_daemon_set/0,
              core_v1_downward_api_projection/0,
              storage_v1beta1_storage_class_list/0,
              storage_v1alpha1_volume_attachment_status/0,
              autoscaling_v2beta2_metric_identifier/0,
              authentication_v1beta1_token_review_spec/0,
              core_v1_persistent_volume_claim_volume_source/0,
              authorization_v1_local_subject_access_review/0,
              networking_v1beta1_ingress_backend/0,
              core_v1_event_series/0,
              policy_v1beta1_pod_disruption_budget_status/0,
              networking_v1beta1_http_ingress_path/0,
              core_v1_resource_quota_spec/0,
              coordination_v1_lease_spec/0,
              admissionregistration_v1beta1_validating_webhook/0,
              core_v1_topology_selector_label_requirement/0,
              node_v1_overhead/0,
              storage_v1beta1_volume_attachment_status/0,
              rbac_v1beta1_role_binding_list/0,
              core_v1_flex_volume_source/0,
              rbac_v1_role_binding_list/0,
              core_v1_downward_api_volume_file/0,
              flowcontrol_v1alpha1_flow_schema_spec/0,
              certificates_v1_certificate_signing_request_status/0,
              apiextensions_v1_custom_resource_subresource_scale/0,
              autoscaling_v1_scale_spec/0,
              core_v1_component_status/0,
              core_v1_object_field_selector/0,
              apimachinery_apis_meta_v1_managed_fields_entry/0,
              core_v1_persistent_volume_spec/0,
              apiextensions_v1beta1_custom_resource_validation/0,
              rbac_v1beta1_cluster_role_binding_list/0,
              node_v1beta1_scheduling/0,
              certificates_v1_certificate_signing_request_condition/0,
              autoscaling_v2beta1_horizontal_pod_autoscaler_condition/0,
              core_v1_port_status/0,
              events_v1_event/0,
              authorization_v1_subject_rules_review_status/0,
              apimachinery_apis_meta_v1_owner_reference/0,
              certificates_v1_certificate_signing_request_spec/0,
              networking_v1_http_ingress_path/0,
              networking_v1_ip_block/0,
              scheduling_v1alpha1_priority_class_list/0,
              core_v1_secret_env_source/0,
              autoscaling_v2beta1_metric_status/0,
              core_v1_resource_field_selector/0,
              core_v1_service/0,
              flowcontrol_v1beta1_service_account_subject/0,
              policy_v1beta1_allowed_csi_driver/0,
              extensions_v1beta1_ingress_backend/0,
              apiextensions_v1_custom_resource_definition_condition/0,
              networking_v1_ingress_service_backend/0,
              apiregistration_v1_service_reference/0,
              core_v1_secret_volume_source/0,
              apiextensions_v1_webhook_conversion/0,
              rbac_v1beta1_role_binding/0,
              apiregistration_v1_api_service_condition/0,
              core_v1_container_status/0,
              certificates_v1_certificate_signing_request/0,
              authorization_v1beta1_subject_access_review/0,
              autoscaling_v2beta2_horizontal_pod_autoscaler_spec/0,
              apiregistration_v1beta1_api_service_list/0,
              core_v1_container_state_running/0,
              core_v1_container_state/0,
              apiextensions_v1_json/0,
              authorization_v1beta1_subject_rules_review_status/0,
              core_v1_rbd_persistent_volume_source/0,
              core_v1_iscsi_persistent_volume_source/0,
              storage_v1beta1_storage_class/0,
              autoscaling_v1_scale_status/0,
              core_v1_container_image/0,
              policy_v1beta1_host_port_range/0,
              core_v1_endpoint_address/0,
              core_v1_azure_disk_volume_source/0,
              core_v1_topology_spread_constraint/0,
              apiextensions_v1_json_schema_props/0,
              flowcontrol_v1beta1_subject/0,
              storage_v1_csi_node_driver/0,
              core_v1_pod_template/0,
              node_v1alpha1_runtime_class/0,
              core_v1_service_account_list/0,
              autoscaling_v2beta1_horizontal_pod_autoscaler_status/0,
              autoscaling_v2beta1_horizontal_pod_autoscaler/0,
              core_v1_node_list/0,
              autoscaling_v2beta2_metric_target/0,
              apimachinery_apis_meta_v1_watch_event/0,
              core_v1_azure_file_volume_source/0,
              flowcontrol_v1alpha1_limited_priority_level_configuration/0,
              core_v1_affinity/0,
              authorization_v1beta1_self_subject_rules_review/0,
              apiregistration_v1beta1_api_service_status/0,
              core_v1_scale_io_persistent_volume_source/0,
              admissionregistration_v1_service_reference/0,
              flowcontrol_v1alpha1_priority_level_configuration_list/0,
              core_v1_local_volume_source/0,
              core_v1_iscsi_volume_source/0,
              core_v1_event/0,
              apiextensions_v1beta1_json_schema_props/0,
              rbac_v1_subject/0,
              apiregistration_v1beta1_service_reference/0,
              core_v1_taint/0,
              autoscaling_v2beta1_resource_metric_source/0,
              extensions_v1beta1_ingress/0,
              events_v1beta1_event_series/0,
              authentication_v1beta1_token_review_status/0,
              batch_v1beta1_cron_job_status/0,
              batch_v2alpha1_cron_job_status/0,
              core_v1_storage_os_volume_source/0,
              apiextensions_v1_custom_resource_column_definition/0,
              autoscaling_v2beta2_resource_metric_source/0,
              flowcontrol_v1beta1_non_resource_policy_rule/0,
              policy_v1beta1_supplemental_groups_strategy_options/0,
              batch_v1_job_spec/0,
              core_v1_resource_requirements/0,
              rbac_v1_role_binding/0,
              apimachinery_apis_meta_v1_label_selector_requirement/0,
              extensions_v1beta1_ingress_status/0,
              rbac_v1beta1_cluster_role/0,
              authorization_v1_self_subject_rules_review_spec/0,
              core_v1_namespace_spec/0,
              networking_v1_ingress_tls/0,
              core_v1_scope_selector/0,
              autoscaling_v2beta2_external_metric_source/0,
              apiextensions_v1beta1_json/0,
              apps_v1_replica_set_status/0,
              storage_v1beta1_csi_driver_spec/0,
              policy_v1beta1_pod_disruption_budget_list/0,
              apiextensions_v1_custom_resource_subresources/0,
              apiextensions_v1beta1_external_documentation/0,
              node_v1beta1_runtime_class/0]).

%% io.k8s.api.authentication.v1.TokenRequestStatus
%% 
%% TokenRequestStatus is the result of a token request.
-type authentication_v1_token_request_status() ::
        #{token := binary(),
          expirationTimestamp := k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.storage.v1beta1.CSIDriver
%% 
%% CSIDriver captures information about a Container Storage
%% Interface (CSI) volume driver deployed on the cluster. CSI
%% drivers do not need to create the CSIDriver object directly.
%% Instead they may use the cluster-driver-registrar sidecar
%% container. When deployed with a CSI driver it automatically
%% creates a CSIDriver object representing the driver. Kubernetes
%% attach detach controller uses this object to determine whether
%% attach is required. Kubelet uses this object to determine whether
%% pod information needs to be passed on mount. CSIDriver objects
%% are non-namespaced.
-type storage_v1beta1_csi_driver() ::
        #{spec := k8s_model:storage_v1beta1_csi_driver_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.LimitRangeSpec
%% 
%% LimitRangeSpec defines a min/max usage limit for resources that
%% match on kind.
-type core_v1_limit_range_spec() ::
        #{limits := [k8s_model:core_v1_limit_range_item()]}.

%% io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration
%% 
%% MutatingWebhookConfiguration describes the configuration of and
%% admission webhook that accept or reject and may change the
%% object. Deprecated in v1.16, planned for removal in v1.19. Use
%% admissionregistration.k8s.io/v1 MutatingWebhookConfiguration
%% instead.
-type admissionregistration_v1beta1_mutating_webhook_configuration() ::
        #{webhooks => [k8s_model:admissionregistration_v1beta1_mutating_webhook()],
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.NamespaceCondition
%% 
%% NamespaceCondition contains details about state of namespace.
-type core_v1_namespace_condition() ::
        #{type := binary(),
          status := binary(),
          reason => binary(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.networking.v1.NetworkPolicyIngressRule
%% 
%% NetworkPolicyIngressRule describes a particular set of traffic
%% that is allowed to the pods matched by a NetworkPolicySpec's
%% podSelector. The traffic must match both ports and from.
-type networking_v1_network_policy_ingress_rule() ::
        #{ports => [k8s_model:networking_v1_network_policy_port()],
          from => [k8s_model:networking_v1_network_policy_peer()]}.

%% io.k8s.api.node.v1beta1.RuntimeClassList
%% 
%% RuntimeClassList is a list of RuntimeClass objects.
-type node_v1beta1_runtime_class_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:node_v1beta1_runtime_class()],
          apiVersion => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionStatus
%% 
%% CustomResourceDefinitionStatus indicates the state of the
%% CustomResourceDefinition
-type apiextensions_v1_custom_resource_definition_status() ::
        #{storedVersions => [binary()],
          conditions => [k8s_model:apiextensions_v1_custom_resource_definition_condition()],
          acceptedNames => k8s_model:apiextensions_v1_custom_resource_definition_names()}.

%% io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationStatus
%% 
%% PriorityLevelConfigurationStatus represents the current state of
%% a "request-priority".
-type flowcontrol_v1beta1_priority_level_configuration_status() ::
        #{conditions => [k8s_model:flowcontrol_v1beta1_priority_level_configuration_condition()]}.

%% io.k8s.api.policy.v1beta1.RuntimeClassStrategyOptions
%% 
%% RuntimeClassStrategyOptions define the strategy that will dictate
%% the allowable RuntimeClasses for a pod.
-type policy_v1beta1_runtime_class_strategy_options() ::
        #{defaultRuntimeClassName => binary(),
          allowedRuntimeClassNames := [binary()]}.

%% io.k8s.api.storage.v1.StorageClassList
%% 
%% StorageClassList is a collection of storage classes.
-type storage_v1_storage_class_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:storage_v1_storage_class()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.ReplicationControllerList
%% 
%% ReplicationControllerList is a collection of replication
%% controllers.
-type core_v1_replication_controller_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:core_v1_replication_controller()],
          apiVersion => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray
%% 
%% JSONSchemaPropsOrArray represents a value that can either be a
%% JSONSchemaProps or an array of JSONSchemaProps. Mainly here for
%% serialization purposes.
-type apiextensions_v1_json_schema_props_or_array() ::
        json:value().

%% io.k8s.api.policy.v1beta1.Eviction
%% 
%% Eviction evicts a pod from its node subject to certain policies
%% and safety constraints. This is a subresource of Pod. A request
%% to cause such an eviction is created by POSTing to .../pods/<pod
%% name>/evictions.
-type policy_v1beta1_eviction() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          deleteOptions => k8s_model:apimachinery_apis_meta_v1_delete_options(),
          apiVersion => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionSpec
%% 
%% CustomResourceDefinitionSpec describes how a user wants their
%% resource to appear
-type apiextensions_v1beta1_custom_resource_definition_spec() ::
        #{versions => [k8s_model:apiextensions_v1beta1_custom_resource_definition_version()],
          version => binary(),
          validation => k8s_model:apiextensions_v1beta1_custom_resource_validation(),
          subresources => k8s_model:apiextensions_v1beta1_custom_resource_subresources(),
          scope := binary(),
          preserveUnknownFields => boolean(),
          names := k8s_model:apiextensions_v1beta1_custom_resource_definition_names(),
          group := binary(),
          conversion => k8s_model:apiextensions_v1beta1_custom_resource_conversion(),
          additionalPrinterColumns => [k8s_model:apiextensions_v1beta1_custom_resource_column_definition()]}.

%% io.k8s.api.authorization.v1beta1.SelfSubjectAccessReview
%% 
%% SelfSubjectAccessReview checks whether or the current user can
%% perform an action. Not filling in a spec.namespace means "in all
%% namespaces". Self is a special case, because users should always
%% be able to check whether they can perform an action
-type authorization_v1beta1_self_subject_access_review() ::
        #{status => k8s_model:authorization_v1beta1_subject_access_review_status(),
          spec := k8s_model:authorization_v1beta1_self_subject_access_review_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.Time
%% 
%% Time is a wrapper around time.Time which supports correct
%% marshaling to YAML and JSON. Wrappers are provided for many of
%% the factory methods that the time package offers.
-type apimachinery_apis_meta_v1_time() ::
        binary().

%% io.k8s.api.core.v1.LimitRangeItem
%% 
%% LimitRangeItem defines a min/max usage limit for any resource
%% that matches on kind.
-type core_v1_limit_range_item() ::
        #{type := binary(),
          min => #{_ := k8s_model:apimachinery_api_resource_quantity()},
          maxLimitRequestRatio => #{_ := k8s_model:apimachinery_api_resource_quantity()},
          max => #{_ := k8s_model:apimachinery_api_resource_quantity()},
          defaultRequest => #{_ := k8s_model:apimachinery_api_resource_quantity()},
          default => #{_ := k8s_model:apimachinery_api_resource_quantity()}}.

%% io.k8s.api.autoscaling.v2beta2.PodsMetricSource
%% 
%% PodsMetricSource indicates how to scale on a metric describing
%% each pod in the current scale target (for example,
%% transactions-processed-per-second). The values will be averaged
%% together before being compared to the target value.
-type autoscaling_v2beta2_pods_metric_source() ::
        #{target := k8s_model:autoscaling_v2beta2_metric_target(),
          metric := k8s_model:autoscaling_v2beta2_metric_identifier()}.

%% io.k8s.api.flowcontrol.v1alpha1.GroupSubject
%% 
%% GroupSubject holds detailed information for group-kind subject.
-type flowcontrol_v1alpha1_group_subject() ::
        #{name := binary()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.Patch
%% 
%% Patch is provided to give a concrete name and type to the
%% Kubernetes PATCH request body.
-type apimachinery_apis_meta_v1_patch() ::
        #{}.

%% io.k8s.api.core.v1.ContainerPort
%% 
%% ContainerPort represents a network port in a single container.
-type core_v1_container_port() ::
        #{protocol => binary(),
          name => binary(),
          hostPort => integer(),
          hostIP => binary(),
          containerPort := integer()}.

%% io.k8s.api.autoscaling.v2beta2.ObjectMetricSource
%% 
%% ObjectMetricSource indicates how to scale on a metric describing
%% a kubernetes object (for example, hits-per-second on an Ingress
%% object).
-type autoscaling_v2beta2_object_metric_source() ::
        #{target := k8s_model:autoscaling_v2beta2_metric_target(),
          metric := k8s_model:autoscaling_v2beta2_metric_identifier(),
          describedObject := k8s_model:autoscaling_v2beta2_cross_version_object_reference()}.

%% io.k8s.api.policy.v1beta1.AllowedHostPath
%% 
%% AllowedHostPath defines the host volume conditions that will be
%% enabled by a policy for pods to use. It requires the path prefix
%% to be defined.
-type policy_v1beta1_allowed_host_path() ::
        #{readOnly => boolean(),
          pathPrefix => binary()}.

%% io.k8s.api.core.v1.PodIP
%% 
%% IP address information for entries in the (plural) PodIPs field.
%% Each entry includes:
%% IP: An IP address allocated to the pod. Routable at least within
%% the cluster.
-type core_v1_pod_ip() ::
        #{ip => binary()}.

%% io.k8s.api.batch.v1beta1.CronJobSpec
%% 
%% CronJobSpec describes how the job execution will look like and
%% when it will actually run.
-type batch_v1beta1_cron_job_spec() ::
        #{suspend => boolean(),
          successfulJobsHistoryLimit => integer(),
          startingDeadlineSeconds => integer(),
          schedule := binary(),
          jobTemplate := k8s_model:batch_v1beta1_job_template_spec(),
          failedJobsHistoryLimit => integer(),
          concurrencyPolicy => binary()}.

%% io.k8s.api.core.v1.NodeConfigStatus
%% 
%% NodeConfigStatus describes the status of the config assigned by
%% Node.Spec.ConfigSource.
-type core_v1_node_config_status() ::
        #{lastKnownGood => k8s_model:core_v1_node_config_source(),
          error => binary(),
          assigned => k8s_model:core_v1_node_config_source(),
          active => k8s_model:core_v1_node_config_source()}.

%% io.k8s.api.node.v1alpha1.RuntimeClassList
%% 
%% RuntimeClassList is a list of RuntimeClass objects.
-type node_v1alpha1_runtime_class_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:node_v1alpha1_runtime_class()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.Handler
%% 
%% Handler defines a specific action that should be taken
-type core_v1_handler() ::
        #{tcpSocket => k8s_model:core_v1_tcp_socket_action(),
          httpGet => k8s_model:core_v1_http_get_action(),
          exec => k8s_model:core_v1_exec_action()}.

%% io.k8s.api.batch.v2alpha1.JobTemplateSpec
%% 
%% JobTemplateSpec describes the data a Job should have when created
%% from a template
-type batch_v2alpha1_job_template_spec() ::
        #{spec => k8s_model:batch_v1_job_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta()}.

%% io.k8s.api.storage.v1.VolumeAttachment
%% 
%% VolumeAttachment captures the intent to attach or detach the
%% specified volume to/from the specified node.
%% 
%% VolumeAttachment objects are non-namespaced.
-type storage_v1_volume_attachment() ::
        #{status => k8s_model:storage_v1_volume_attachment_status(),
          spec := k8s_model:storage_v1_volume_attachment_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.rbac.v1beta1.RoleRef
%% 
%% RoleRef contains information that points to the role being used
-type rbac_v1beta1_role_ref() ::
        #{name := binary(),
          kind := binary(),
          apiGroup := binary()}.

%% io.k8s.api.core.v1.ClientIPConfig
%% 
%% ClientIPConfig represents the configurations of Client IP based
%% session affinity.
-type core_v1_client_ip_config() ::
        #{timeoutSeconds => integer()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig
%% 
%% WebhookClientConfig contains the information to make a TLS
%% connection with the webhook.
-type apiextensions_v1_webhook_client_config() ::
        #{url => binary(),
          service => k8s_model:apiextensions_v1_service_reference(),
          caBundle => binary()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions
%% 
%% APIVersions lists the versions that are available, to allow
%% clients to discover the API at /api, which is the root path of
%% the legacy v1 API.
-type apimachinery_apis_meta_v1_api_versions() ::
        #{versions := [binary()],
          serverAddressByClientCIDRs := [k8s_model:apimachinery_apis_meta_v1_server_address_by_client_cidr()],
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.apps.v1.ReplicaSetSpec
%% 
%% ReplicaSetSpec is the specification of a ReplicaSet.
-type apps_v1_replica_set_spec() ::
        #{template => k8s_model:core_v1_pod_template_spec(),
          selector := k8s_model:apimachinery_apis_meta_v1_label_selector(),
          replicas => integer(),
          minReadySeconds => integer()}.

%% io.k8s.api.autoscaling.v2beta1.ContainerResourceMetricSource
%% 
%% ContainerResourceMetricSource indicates how to scale on a
%% resource metric known to Kubernetes, as specified in requests and
%% limits, describing each pod in the current scale target (e.g. CPU
%% or memory). The values will be averaged together before being
%% compared to the target. Such metrics are built in to Kubernetes,
%% and have special scaling options on top of those available to
%% normal per-pod metrics using the "pods" source. Only one "target"
%% type should be set.
-type autoscaling_v2beta1_container_resource_metric_source() ::
        #{targetAverageValue => k8s_model:apimachinery_api_resource_quantity(),
          targetAverageUtilization => integer(),
          name := binary(),
          container := binary()}.

%% io.k8s.api.core.v1.DaemonEndpoint
%% 
%% DaemonEndpoint contains information about a single Daemon
%% endpoint.
-type core_v1_daemon_endpoint() ::
        #{'Port' := integer()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceConversion
%% 
%% CustomResourceConversion describes how to convert different
%% versions of a CR.
-type apiextensions_v1beta1_custom_resource_conversion() ::
        #{webhookClientConfig => k8s_model:apiextensions_v1beta1_webhook_client_config(),
          strategy := binary(),
          conversionReviewVersions => [binary()]}.

%% io.k8s.api.networking.v1beta1.Ingress
%% 
%% Ingress is a collection of rules that allow inbound connections
%% to reach the endpoints defined by a backend. An Ingress can be
%% configured to give services externally-reachable urls, load
%% balance traffic, terminate SSL, offer name based virtual hosting
%% etc.
-type networking_v1beta1_ingress() ::
        #{status => k8s_model:networking_v1beta1_ingress_status(),
          spec => k8s_model:networking_v1beta1_ingress_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration
%% 
%% ValidatingWebhookConfiguration describes the configuration of and
%% admission webhook that accept or reject and object without
%% changing it.
-type admissionregistration_v1_validating_webhook_configuration() ::
        #{webhooks => [k8s_model:admissionregistration_v1_validating_webhook()],
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.PersistentVolumeList
%% 
%% PersistentVolumeList is a list of PersistentVolume items.
-type core_v1_persistent_volume_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:core_v1_persistent_volume()],
          apiVersion => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrArray
%% 
%% JSONSchemaPropsOrArray represents a value that can either be a
%% JSONSchemaProps or an array of JSONSchemaProps. Mainly here for
%% serialization purposes.
-type apiextensions_v1beta1_json_schema_props_or_array() ::
        json:value().

%% io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationSpec
%% 
%% PriorityLevelConfigurationSpec specifies the configuration of a
%% priority level.
-type flowcontrol_v1alpha1_priority_level_configuration_spec() ::
        #{type := binary(),
          limited => k8s_model:flowcontrol_v1alpha1_limited_priority_level_configuration()}.

%% io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList
%% 
%% HorizontalPodAutoscalerList is a list of horizontal pod
%% autoscaler objects.
-type autoscaling_v2beta2_horizontal_pod_autoscaler_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:autoscaling_v2beta2_horizontal_pod_autoscaler()],
          apiVersion => binary()}.

%% io.k8s.api.networking.v1beta1.IngressRule
%% 
%% IngressRule represents the rules mapping the paths under a
%% specified host to the related backend services. Incoming requests
%% are first evaluated for a host match, then routed to the backend
%% associated with the matching IngressRuleValue.
-type networking_v1beta1_ingress_rule() ::
        #{http => k8s_model:networking_v1beta1_http_ingress_rule_value(),
          host => binary()}.

%% io.k8s.api.core.v1.EphemeralContainers
%% 
%% A list of ephemeral containers used with the Pod
%% ephemeralcontainers subresource.
-type core_v1_ephemeral_containers() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          ephemeralContainers := [k8s_model:core_v1_ephemeral_container()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.LimitRange
%% 
%% LimitRange sets resource usage limits for each kind of resource
%% in a Namespace.
-type core_v1_limit_range() ::
        #{spec => k8s_model:core_v1_limit_range_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.networking.v1.ServiceBackendPort
%% 
%% ServiceBackendPort is the service port being referenced.
-type networking_v1_service_backend_port() ::
        #{number => integer(),
          name => binary()}.

%% io.k8s.api.batch.v1.JobCondition
%% 
%% JobCondition describes current state of a job.
-type batch_v1_job_condition() ::
        #{type := binary(),
          status := binary(),
          reason => binary(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time(),
          lastProbeTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.core.v1.ConfigMapVolumeSource
%% 
%% Adapts a ConfigMap into a volume.
%% 
%% The contents of the target ConfigMap's Data field will be
%% presented in a volume as files using the keys in the Data field
%% as the file names, unless the items element is populated with
%% specific mappings of keys to paths. ConfigMap volumes support
%% ownership management and SELinux relabeling.
-type core_v1_config_map_volume_source() ::
        #{optional => boolean(),
          name => binary(),
          items => [k8s_model:core_v1_key_to_path()],
          defaultMode => integer()}.

%% io.k8s.api.node.v1alpha1.Scheduling
%% 
%% Scheduling specifies the scheduling constraints for nodes
%% supporting a RuntimeClass.
-type node_v1alpha1_scheduling() ::
        #{tolerations => [k8s_model:core_v1_toleration()],
          nodeSelector => #{_ := binary()}}.

%% io.k8s.api.apps.v1.DeploymentStatus
%% 
%% DeploymentStatus is the most recently observed status of the
%% Deployment.
-type apps_v1_deployment_status() ::
        #{updatedReplicas => integer(),
          unavailableReplicas => integer(),
          replicas => integer(),
          readyReplicas => integer(),
          observedGeneration => integer(),
          conditions => [k8s_model:apps_v1_deployment_condition()],
          collisionCount => integer(),
          availableReplicas => integer()}.

%% io.k8s.api.networking.v1beta1.IngressTLS
%% 
%% IngressTLS describes the transport layer security associated with
%% an Ingress.
-type networking_v1beta1_ingress_tls() ::
        #{secretName => binary(),
          hosts => [binary()]}.

%% io.k8s.api.core.v1.Container
%% 
%% A single application container that you want to run within a pod.
-type core_v1_container() ::
        #{workingDir => binary(),
          volumeMounts => [k8s_model:core_v1_volume_mount()],
          volumeDevices => [k8s_model:core_v1_volume_device()],
          tty => boolean(),
          terminationMessagePolicy => binary(),
          terminationMessagePath => binary(),
          stdinOnce => boolean(),
          stdin => boolean(),
          startupProbe => k8s_model:core_v1_probe(),
          securityContext => k8s_model:core_v1_security_context(),
          resources => k8s_model:core_v1_resource_requirements(),
          readinessProbe => k8s_model:core_v1_probe(),
          ports => [k8s_model:core_v1_container_port()],
          name := binary(),
          livenessProbe => k8s_model:core_v1_probe(),
          lifecycle => k8s_model:core_v1_lifecycle(),
          imagePullPolicy => binary(),
          image => binary(),
          envFrom => [k8s_model:core_v1_env_from_source()],
          env => [k8s_model:core_v1_env_var()],
          command => [binary()],
          args => [binary()]}.

%% io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration
%% 
%% MutatingWebhookConfiguration describes the configuration of and
%% admission webhook that accept or reject and may change the
%% object.
-type admissionregistration_v1_mutating_webhook_configuration() ::
        #{webhooks => [k8s_model:admissionregistration_v1_mutating_webhook()],
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.flowcontrol.v1beta1.ResourcePolicyRule
%% 
%% ResourcePolicyRule is a predicate that matches some resource
%% requests, testing the request's verb and the target resource. A
%% ResourcePolicyRule matches a resource request if and only if: (a)
%% at least one member of verbs matches the request, (b) at least
%% one member of apiGroups matches the request, (c) at least one
%% member of resources matches the request, and (d) least one member
%% of namespaces matches the request.
-type flowcontrol_v1beta1_resource_policy_rule() ::
        #{verbs := [binary()],
          resources := [binary()],
          namespaces => [binary()],
          clusterScope => boolean(),
          apiGroups := [binary()]}.

%% io.k8s.api.core.v1.ContainerStateTerminated
%% 
%% ContainerStateTerminated is a terminated state of a container.
-type core_v1_container_state_terminated() ::
        #{startedAt => k8s_model:apimachinery_apis_meta_v1_time(),
          signal => integer(),
          reason => binary(),
          message => binary(),
          finishedAt => k8s_model:apimachinery_apis_meta_v1_time(),
          exitCode := integer(),
          containerID => binary()}.

%% io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList
%% 
%% MutatingWebhookConfigurationList is a list of
%% MutatingWebhookConfiguration.
-type admissionregistration_v1_mutating_webhook_configuration_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:admissionregistration_v1_mutating_webhook_configuration()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.SecretReference
%% 
%% SecretReference represents a Secret Reference. It has enough
%% information to retrieve secret in any namespace
-type core_v1_secret_reference() ::
        #{namespace => binary(),
          name => binary()}.

%% io.k8s.api.core.v1.CSIVolumeSource
%% 
%% Represents a source location of a volume to mount, managed by an
%% external CSI driver
-type core_v1_csi_volume_source() ::
        #{volumeAttributes => #{_ := binary()},
          readOnly => boolean(),
          nodePublishSecretRef => k8s_model:core_v1_local_object_reference(),
          fsType => binary(),
          driver := binary()}.

%% io.k8s.api.core.v1.VolumeMount
%% 
%% VolumeMount describes a mounting of a Volume within a container.
-type core_v1_volume_mount() ::
        #{subPathExpr => binary(),
          subPath => binary(),
          readOnly => boolean(),
          name := binary(),
          mountPropagation => binary(),
          mountPath := binary()}.

%% io.k8s.api.networking.v1.HTTPIngressRuleValue
%% 
%% HTTPIngressRuleValue is a list of http selectors pointing to
%% backends. In the example: http://<host>/<path>?<searchpart> ->
%% backend where where parts of the url correspond to RFC 3986, this
%% resource will be used to match against everything after the last
%% '/' and before the first '?' or '#'.
-type networking_v1_http_ingress_rule_value() ::
        #{paths := [k8s_model:networking_v1_http_ingress_path()]}.

%% io.k8s.api.core.v1.NodeAddress
%% 
%% NodeAddress contains information for the node's address.
-type core_v1_node_address() ::
        #{type := binary(),
          address := binary()}.

%% io.k8s.api.flowcontrol.v1alpha1.FlowSchemaList
%% 
%% FlowSchemaList is a list of FlowSchema objects.
-type flowcontrol_v1alpha1_flow_schema_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:flowcontrol_v1alpha1_flow_schema()],
          apiVersion => binary()}.

%% io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus
%% 
%% SubjectAccessReviewStatus
-type authorization_v1beta1_subject_access_review_status() ::
        #{reason => binary(),
          evaluationError => binary(),
          denied => boolean(),
          allowed := boolean()}.

%% io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerList
%% 
%% HorizontalPodAutoscaler is a list of horizontal pod autoscaler
%% objects.
-type autoscaling_v2beta1_horizontal_pod_autoscaler_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:autoscaling_v2beta1_horizontal_pod_autoscaler()],
          apiVersion => binary()}.

%% io.k8s.api.rbac.v1alpha1.PolicyRule
%% 
%% PolicyRule holds information that describes a policy rule, but
%% does not contain information about who the rule applies to or
%% which namespace the rule applies to.
-type rbac_v1alpha1_policy_rule() ::
        #{verbs := [binary()],
          resources => [binary()],
          resourceNames => [binary()],
          nonResourceURLs => [binary()],
          apiGroups => [binary()]}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector
%% 
%% A label selector is a label query over a set of resources. The
%% result of matchLabels and matchExpressions are ANDed. An empty
%% label selector matches all objects. A null label selector matches
%% no objects.
-type apimachinery_apis_meta_v1_label_selector() ::
        #{matchLabels => #{_ := binary()},
          matchExpressions => [k8s_model:apimachinery_apis_meta_v1_label_selector_requirement()]}.

%% io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource
%% 
%% Represents a vSphere volume resource.
-type core_v1_vsphere_virtual_disk_volume_source() ::
        #{volumePath := binary(),
          storagePolicyName => binary(),
          storagePolicyID => binary(),
          fsType => binary()}.

%% io.k8s.api.rbac.v1beta1.ClusterRoleList
%% 
%% ClusterRoleList is a collection of ClusterRoles. Deprecated in
%% v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and
%% will no longer be served in v1.22.
-type rbac_v1beta1_cluster_role_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:rbac_v1beta1_cluster_role()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.ReplicationControllerStatus
%% 
%% ReplicationControllerStatus represents the current status of a
%% replication controller.
-type core_v1_replication_controller_status() ::
        #{replicas := integer(),
          readyReplicas => integer(),
          observedGeneration => integer(),
          fullyLabeledReplicas => integer(),
          conditions => [k8s_model:core_v1_replication_controller_condition()],
          availableReplicas => integer()}.

%% io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationReference
%% 
%% PriorityLevelConfigurationReference contains information that
%% points to the "request-priority" being used.
-type flowcontrol_v1alpha1_priority_level_configuration_reference() ::
        #{name := binary()}.

%% io.k8s.api.storage.v1beta1.CSINodeList
%% 
%% CSINodeList is a collection of CSINode objects.
-type storage_v1beta1_csi_node_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:storage_v1beta1_csi_node()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.FlockerVolumeSource
%% 
%% Represents a Flocker volume mounted by the Flocker agent. One and
%% only one of datasetName and datasetUUID should be set. Flocker
%% volumes do not support ownership management or SELinux
%% relabeling.
-type core_v1_flocker_volume_source() ::
        #{datasetUUID => binary(),
          datasetName => binary()}.

%% io.k8s.api.core.v1.CinderVolumeSource
%% 
%% Represents a cinder volume resource in Openstack. A Cinder volume
%% must exist before mounting to a container. The volume must also
%% be in the same region as the kubelet. Cinder volumes support
%% ownership management and SELinux relabeling.
-type core_v1_cinder_volume_source() ::
        #{volumeID := binary(),
          secretRef => k8s_model:core_v1_local_object_reference(),
          readOnly => boolean(),
          fsType => binary()}.

%% io.k8s.api.autoscaling.v2beta2.MetricStatus
%% 
%% MetricStatus describes the last-read state of a single metric.
-type autoscaling_v2beta2_metric_status() ::
        #{type := binary(),
          resource => k8s_model:autoscaling_v2beta2_resource_metric_status(),
          pods => k8s_model:autoscaling_v2beta2_pods_metric_status(),
          object => k8s_model:autoscaling_v2beta2_object_metric_status(),
          external => k8s_model:autoscaling_v2beta2_external_metric_status(),
          containerResource => k8s_model:autoscaling_v2beta2_container_resource_metric_status()}.

%% io.k8s.api.autoscaling.v2beta2.HPAScalingRules
%% 
%% HPAScalingRules configures the scaling behavior for one
%% direction. These Rules are applied after calculating
%% DesiredReplicas from metrics for the HPA. They can limit the
%% scaling velocity by specifying scaling policies. They can prevent
%% flapping by specifying the stabilization window, so that the
%% number of replicas is not set instantly, instead, the safest
%% value from the stabilization window is chosen.
-type autoscaling_v2beta2_hpa_scaling_rules() ::
        #{stabilizationWindowSeconds => integer(),
          selectPolicy => binary(),
          policies => [k8s_model:autoscaling_v2beta2_hpa_scaling_policy()]}.

%% io.k8s.api.batch.v1beta1.CronJobList
%% 
%% CronJobList is a collection of cron jobs.
-type batch_v1beta1_cron_job_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:batch_v1beta1_cron_job()],
          apiVersion => binary()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause
%% 
%% StatusCause provides more information about an api.Status
%% failure, including cases when multiple errors are encountered.
-type apimachinery_apis_meta_v1_status_cause() ::
        #{reason => binary(),
          message => binary(),
          field => binary()}.

%% io.k8s.api.core.v1.ResourceQuotaList
%% 
%% ResourceQuotaList is a list of ResourceQuota items.
-type core_v1_resource_quota_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:core_v1_resource_quota()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.PodSecurityContext
%% 
%% PodSecurityContext holds pod-level security attributes and common
%% container settings. Some fields are also present in
%% container.securityContext. Field values of
%% container.securityContext take precedence over field values of
%% PodSecurityContext.
-type core_v1_pod_security_context() ::
        #{windowsOptions => k8s_model:core_v1_windows_security_context_options(),
          sysctls => [k8s_model:core_v1_sysctl()],
          supplementalGroups => [integer()],
          seccompProfile => k8s_model:core_v1_seccomp_profile(),
          seLinuxOptions => k8s_model:core_v1_se_linux_options(),
          runAsUser => integer(),
          runAsNonRoot => boolean(),
          runAsGroup => integer(),
          fsGroupChangePolicy => binary(),
          fsGroup => integer()}.

%% io.k8s.apimachinery.pkg.api.resource.Quantity
%% 
%% Quantity is a fixed-point representation of a number. It provides
%% convenient marshaling/unmarshaling in JSON and YAML, in addition
%% to String() and AsInt64() accessors.
%% 
%% The serialization format is:
%% 
%% <quantity> ::= <signedNumber><suffix>
%% (Note that <suffix> may be empty, from the "" case in
%% <decimalSI>.)
%% <digit> ::= 0 | 1 | ... | 9 <digits> ::= <digit> |
%% <digit><digits> <number> ::= <digits> | <digits>.<digits> |
%% <digits>. | .<digits> <sign> ::= "+" | "-" <signedNumber> ::=
%% <number> | <sign><number> <suffix> ::= <binarySI> |
%% <decimalExponent> | <decimalSI> <binarySI> ::= Ki | Mi | Gi | Ti
%% | Pi | Ei
%% (International System of units; See:
%% http://physics.nist.gov/cuu/Units/binary.html)
%% <decimalSI> ::= m | "" | k | M | G | T | P | E
%% (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the
%% capitalization.)
%% <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>
%% 
%% No matter which of the three exponent forms is used, no quantity
%% may represent a number greater than 2^63-1 in magnitude, nor may
%% it have more than 3 decimal places. Numbers larger or more
%% precise will be capped or rounded up. (E.g.: 0.1m will rounded up
%% to 1m.) This may be extended in the future if we require larger
%% or smaller quantities.
%% 
%% When a Quantity is parsed from a string, it will remember the
%% type of suffix it had, and will use the same type again when it
%% is serialized.
%% 
%% Before serializing, Quantity will be put in "canonical form".
%% This means that Exponent/suffix will be adjusted up or down (with
%% a corresponding increase or decrease in Mantissa) such that:
%% a. No precision is lost
%% b. No fractional digits will be emitted
%% c. The exponent (or suffix) is as large as possible.
%% The sign will be omitted unless the number is negative.
%% 
%% Examples:
%% 1.5 will be serialized as "1500m"
%% 1.5Gi will be serialized as "1536Mi"
%% 
%% Note that the quantity will NEVER be internally represented by a
%% floating point number. That is the whole point of this exercise.
%% 
%% Non-canonical values will still parse as long as they are well
%% formed, but will be re-emitted in their canonical form. (So
%% always use canonical form, or don't diff.)
%% 
%% This format is intended to make it difficult to use these numbers
%% without writing some sort of special handling code in the hopes
%% that that will cause implementors to also use a fixed point
%% implementation.
-type apimachinery_api_resource_quantity() ::
        binary().

%% io.k8s.api.policy.v1beta1.PodSecurityPolicy
%% 
%% PodSecurityPolicy governs the ability to make requests that
%% affect the Security Context that will be applied to a pod and
%% container. Deprecated in 1.21.
-type policy_v1beta1_pod_security_policy() ::
        #{spec => k8s_model:policy_v1beta1_pod_security_policy_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.apps.v1.RollingUpdateDeployment
%% 
%% Spec to control the desired behavior of rolling update.
-type apps_v1_rolling_update_deployment() ::
        #{maxUnavailable => k8s_model:apimachinery_util_intstr_int_or_string(),
          maxSurge => k8s_model:apimachinery_util_intstr_int_or_string()}.

%% io.k8s.api.rbac.v1.PolicyRule
%% 
%% PolicyRule holds information that describes a policy rule, but
%% does not contain information about who the rule applies to or
%% which namespace the rule applies to.
-type rbac_v1_policy_rule() ::
        #{verbs := [binary()],
          resources => [binary()],
          resourceNames => [binary()],
          nonResourceURLs => [binary()],
          apiGroups => [binary()]}.

%% io.k8s.api.rbac.v1beta1.AggregationRule
%% 
%% AggregationRule describes how to locate ClusterRoles to aggregate
%% into the ClusterRole
-type rbac_v1beta1_aggregation_rule() ::
        #{clusterRoleSelectors => [k8s_model:apimachinery_apis_meta_v1_label_selector()]}.

%% io.k8s.api.node.v1alpha1.RuntimeClassSpec
%% 
%% RuntimeClassSpec is a specification of a RuntimeClass. It
%% contains parameters that are required to describe the
%% RuntimeClass to the Container Runtime Interface (CRI)
%% implementation, as well as any other components that need to
%% understand how the pod will be run. The RuntimeClassSpec is
%% immutable.
-type node_v1alpha1_runtime_class_spec() ::
        #{scheduling => k8s_model:node_v1alpha1_scheduling(),
          runtimeHandler := binary(),
          overhead => k8s_model:node_v1alpha1_overhead()}.

%% io.k8s.api.flowcontrol.v1alpha1.UserSubject
%% 
%% UserSubject holds detailed information for user-kind subject.
-type flowcontrol_v1alpha1_user_subject() ::
        #{name := binary()}.

%% io.k8s.api.apps.v1.ControllerRevisionList
%% 
%% ControllerRevisionList is a resource containing a list of
%% ControllerRevision objects.
-type apps_v1_controller_revision_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:apps_v1_controller_revision()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.PodReadinessGate
%% 
%% PodReadinessGate contains the reference to a pod condition
-type core_v1_pod_readiness_gate() ::
        #{conditionType := binary()}.

%% io.k8s.api.core.v1.NamespaceList
%% 
%% NamespaceList is a list of Namespaces.
-type core_v1_namespace_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:core_v1_namespace()],
          apiVersion => binary()}.

%% io.k8s.api.apiserverinternal.v1alpha1.StorageVersionStatus
%% 
%% API server instances report the versions they can decode and the
%% version they encode objects to when persisting objects in the
%% backend.
-type apiserverinternal_v1alpha1_storage_version_status() ::
        #{storageVersions => [k8s_model:apiserverinternal_v1alpha1_server_storage_version()],
          conditions => [k8s_model:apiserverinternal_v1alpha1_storage_version_condition()],
          commonEncodingVersion => binary()}.

%% io.k8s.api.storage.v1.CSIDriver
%% 
%% CSIDriver captures information about a Container Storage
%% Interface (CSI) volume driver deployed on the cluster. Kubernetes
%% attach detach controller uses this object to determine whether
%% attach is required. Kubelet uses this object to determine whether
%% pod information needs to be passed on mount. CSIDriver objects
%% are non-namespaced.
-type storage_v1_csi_driver() ::
        #{spec := k8s_model:storage_v1_csi_driver_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.autoscaling.v2beta2.ResourceMetricStatus
%% 
%% ResourceMetricStatus indicates the current value of a resource
%% metric known to Kubernetes, as specified in requests and limits,
%% describing each pod in the current scale target (e.g. CPU or
%% memory). Such metrics are built in to Kubernetes, and have
%% special scaling options on top of those available to normal
%% per-pod metrics using the "pods" source.
-type autoscaling_v2beta2_resource_metric_status() ::
        #{name := binary(),
          current := k8s_model:autoscaling_v2beta2_metric_value_status()}.

%% io.k8s.api.core.v1.ExecAction
%% 
%% ExecAction describes a "run in container" action.
-type core_v1_exec_action() ::
        #{command => [binary()]}.

%% io.k8s.api.core.v1.SecurityContext
%% 
%% SecurityContext holds security configuration that will be applied
%% to a container. Some fields are present in both SecurityContext
%% and PodSecurityContext. When both are set, the values in
%% SecurityContext take precedence.
-type core_v1_security_context() ::
        #{windowsOptions => k8s_model:core_v1_windows_security_context_options(),
          seccompProfile => k8s_model:core_v1_seccomp_profile(),
          seLinuxOptions => k8s_model:core_v1_se_linux_options(),
          runAsUser => integer(),
          runAsNonRoot => boolean(),
          runAsGroup => integer(),
          readOnlyRootFilesystem => boolean(),
          procMount => binary(),
          privileged => boolean(),
          capabilities => k8s_model:core_v1_capabilities(),
          allowPrivilegeEscalation => boolean()}.

%% io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec
%% 
%% specification of a horizontal pod autoscaler.
-type autoscaling_v1_horizontal_pod_autoscaler_spec() ::
        #{targetCPUUtilizationPercentage => integer(),
          scaleTargetRef := k8s_model:autoscaling_v1_cross_version_object_reference(),
          minReplicas => integer(),
          maxReplicas := integer()}.

%% io.k8s.api.core.v1.SecretKeySelector
%% 
%% SecretKeySelector selects a key of a Secret.
-type core_v1_secret_key_selector() ::
        #{optional => boolean(),
          name => binary(),
          key := binary()}.

%% io.k8s.api.authorization.v1beta1.LocalSubjectAccessReview
%% 
%% LocalSubjectAccessReview checks whether or not a user or group
%% can perform an action in a given namespace. Having a namespace
%% scoped resource makes it much easier to grant namespace scoped
%% policy that includes permissions checking.
-type authorization_v1beta1_local_subject_access_review() ::
        #{status => k8s_model:authorization_v1beta1_subject_access_review_status(),
          spec := k8s_model:authorization_v1beta1_subject_access_review_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.storage.v1alpha1.VolumeAttachmentList
%% 
%% VolumeAttachmentList is a collection of VolumeAttachment objects.
-type storage_v1alpha1_volume_attachment_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:storage_v1alpha1_volume_attachment()],
          apiVersion => binary()}.

%% io.k8s.api.authorization.v1.SubjectAccessReviewStatus
%% 
%% SubjectAccessReviewStatus
-type authorization_v1_subject_access_review_status() ::
        #{reason => binary(),
          evaluationError => binary(),
          denied => boolean(),
          allowed := boolean()}.

%% io.k8s.api.core.v1.ServiceList
%% 
%% ServiceList holds a list of services.
-type core_v1_service_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:core_v1_service()],
          apiVersion => binary()}.

%% io.k8s.api.rbac.v1beta1.Role
%% 
%% Role is a namespaced, logical grouping of PolicyRules that can be
%% referenced as a unit by a RoleBinding. Deprecated in v1.17 in
%% favor of rbac.authorization.k8s.io/v1 Role, and will no longer be
%% served in v1.22.
-type rbac_v1beta1_role() ::
        #{rules => [k8s_model:rbac_v1beta1_policy_rule()],
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.autoscaling.v2beta1.ObjectMetricStatus
%% 
%% ObjectMetricStatus indicates the current value of a metric
%% describing a kubernetes object (for example, hits-per-second on
%% an Ingress object).
-type autoscaling_v2beta1_object_metric_status() ::
        #{target := k8s_model:autoscaling_v2beta1_cross_version_object_reference(),
          selector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          metricName := binary(),
          currentValue := k8s_model:apimachinery_api_resource_quantity(),
          averageValue => k8s_model:apimachinery_api_resource_quantity()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresources
%% 
%% CustomResourceSubresources defines the status and scale
%% subresources for CustomResources.
-type apiextensions_v1beta1_custom_resource_subresources() ::
        #{status => k8s_model:apiextensions_v1beta1_custom_resource_subresource_status(),
          scale => k8s_model:apiextensions_v1beta1_custom_resource_subresource_scale()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR
%% 
%% ServerAddressByClientCIDR helps the client to determine the
%% server address that they should use, depending on the clientCIDR
%% that they match.
-type apimachinery_apis_meta_v1_server_address_by_client_cidr() ::
        #{serverAddress := binary(),
          clientCIDR := binary()}.

%% io.k8s.api.apps.v1.StatefulSetCondition
%% 
%% StatefulSetCondition describes the state of a statefulset at a
%% certain point.
-type apps_v1_stateful_set_condition() ::
        #{type := binary(),
          status := binary(),
          reason => binary(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.core.v1.Secret
%% 
%% Secret holds secret data of a certain type. The total bytes of
%% the values in the Data field must be less than MaxSecretSize
%% bytes.
-type core_v1_secret() ::
        #{type => binary(),
          stringData => #{_ := binary()},
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          immutable => boolean(),
          data => #{_ := binary()},
          apiVersion => binary()}.

%% io.k8s.api.core.v1.NodeAffinity
%% 
%% Node affinity is a group of node affinity scheduling rules.
-type core_v1_node_affinity() ::
        #{requiredDuringSchedulingIgnoredDuringExecution => k8s_model:core_v1_node_selector(),
          preferredDuringSchedulingIgnoredDuringExecution => [k8s_model:core_v1_preferred_scheduling_term()]}.

%% io.k8s.api.apps.v1.DeploymentStrategy
%% 
%% DeploymentStrategy describes how to replace existing pods with
%% new ones.
-type apps_v1_deployment_strategy() ::
        #{type => binary(),
          rollingUpdate => k8s_model:apps_v1_rolling_update_deployment()}.

%% io.k8s.apimachinery.pkg.runtime.RawExtension
%% 
%% RawExtension is used to hold extensions in external versions.
%% 
%% To use this, make a field which has RawExtension as its type in
%% your external, versioned struct, and Object in your internal
%% struct. You also need to register your various plugin types.
%% 
%% // Internal package: type MyAPIObject struct {
%% runtime.TypeMeta `json:",inline"`
%% MyPlugin runtime.Object `json:"myPlugin"`
%% } type PluginA struct {
%% AOption string `json:"aOption"`
%% }
%% 
%% // External package: type MyAPIObject struct {
%% runtime.TypeMeta `json:",inline"`
%% MyPlugin runtime.RawExtension `json:"myPlugin"`
%% } type PluginA struct {
%% AOption string `json:"aOption"`
%% }
%% 
%% // On the wire, the JSON will look something like this: {
%% "kind":"MyAPIObject",
%% "apiVersion":"v1",
%% "myPlugin": {
%% "kind":"PluginA",
%% "aOption":"foo",
%% },
%% }
%% 
%% So what happens? Decode first uses json or yaml to unmarshal the
%% serialized data into your external MyAPIObject. That causes the
%% raw JSON to be stored, but not unpacked. The next step is to copy
%% (using pkg/conversion) into the internal struct. The runtime
%% package's DefaultScheme has conversion functions installed which
%% will unpack the JSON stored in RawExtension, turning it into the
%% correct object type, and storing it in the Object. (TODO: In the
%% case where the object is of an unknown type, a runtime.Unknown
%% object will be created and stored.)
-type apimachinery_runtime_raw_extension() ::
        #{}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery
%% 
%% GroupVersion contains the "group/version" and "version" string of
%% a version. It is made a struct to keep extensibility.
-type apimachinery_apis_meta_v1_group_version_for_discovery() ::
        #{version := binary(),
          groupVersion := binary()}.

%% io.k8s.api.storage.v1.VolumeAttachmentStatus
%% 
%% VolumeAttachmentStatus is the status of a VolumeAttachment
%% request.
-type storage_v1_volume_attachment_status() ::
        #{detachError => k8s_model:storage_v1_volume_error(),
          attachmentMetadata => #{_ := binary()},
          attached := boolean(),
          attachError => k8s_model:storage_v1_volume_error()}.

%% io.k8s.api.rbac.v1.RoleRef
%% 
%% RoleRef contains information that points to the role being used
-type rbac_v1_role_ref() ::
        #{name := binary(),
          kind := binary(),
          apiGroup := binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference
%% 
%% ServiceReference holds a reference to Service.legacy.k8s.io
-type apiextensions_v1_service_reference() ::
        #{port => integer(),
          path => binary(),
          namespace := binary(),
          name := binary()}.

%% io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration
%% 
%% PriorityLevelConfiguration represents the configuration of a
%% priority level.
-type flowcontrol_v1alpha1_priority_level_configuration() ::
        #{status => k8s_model:flowcontrol_v1alpha1_priority_level_configuration_status(),
          spec => k8s_model:flowcontrol_v1alpha1_priority_level_configuration_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.apps.v1.ReplicaSetList
%% 
%% ReplicaSetList is a collection of ReplicaSets.
-type apps_v1_replica_set_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:apps_v1_replica_set()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.CephFSPersistentVolumeSource
%% 
%% Represents a Ceph Filesystem mount that lasts the lifetime of a
%% pod Cephfs volumes do not support ownership management or SELinux
%% relabeling.
-type core_v1_ceph_fs_persistent_volume_source() ::
        #{user => binary(),
          secretRef => k8s_model:core_v1_secret_reference(),
          secretFile => binary(),
          readOnly => boolean(),
          path => binary(),
          monitors := [binary()]}.

%% io.k8s.api.storage.v1.VolumeAttachmentList
%% 
%% VolumeAttachmentList is a collection of VolumeAttachment objects.
-type storage_v1_volume_attachment_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:storage_v1_volume_attachment()],
          apiVersion => binary()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList
%% 
%% APIResourceList is a list of APIResource, it is used to expose
%% the name of the resources supported in a specific group and
%% version, and if the resource is namespaced.
-type apimachinery_apis_meta_v1_api_resource_list() ::
        #{resources := [k8s_model:apimachinery_apis_meta_v1_api_resource()],
          kind => binary(),
          groupVersion := binary(),
          apiVersion => binary()}.

%% io.k8s.api.admissionregistration.v1.RuleWithOperations
%% 
%% RuleWithOperations is a tuple of Operations and Resources. It is
%% recommended to make sure that all the tuple expansions are valid.
-type admissionregistration_v1_rule_with_operations() ::
        #{scope => binary(),
          resources => [binary()],
          operations => [binary()],
          apiVersions => [binary()],
          apiGroups => [binary()]}.

%% io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerSpec
%% 
%% HorizontalPodAutoscalerSpec describes the desired functionality
%% of the HorizontalPodAutoscaler.
-type autoscaling_v2beta1_horizontal_pod_autoscaler_spec() ::
        #{scaleTargetRef := k8s_model:autoscaling_v2beta1_cross_version_object_reference(),
          minReplicas => integer(),
          metrics => [k8s_model:autoscaling_v2beta1_metric_spec()],
          maxReplicas := integer()}.

%% io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList
%% 
%% list of horizontal pod autoscaler objects.
-type autoscaling_v1_horizontal_pod_autoscaler_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:autoscaling_v1_horizontal_pod_autoscaler()],
          apiVersion => binary()}.

%% io.k8s.api.admissionregistration.v1.ValidatingWebhook
%% 
%% ValidatingWebhook describes an admission webhook and the
%% resources and operations it applies to.
-type admissionregistration_v1_validating_webhook() ::
        #{timeoutSeconds => integer(),
          sideEffects := binary(),
          rules => [k8s_model:admissionregistration_v1_rule_with_operations()],
          objectSelector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          namespaceSelector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          name := binary(),
          matchPolicy => binary(),
          failurePolicy => binary(),
          clientConfig := k8s_model:admissionregistration_v1_webhook_client_config(),
          admissionReviewVersions := [binary()]}.

%% io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus
%% 
%% current status of a horizontal pod autoscaler
-type autoscaling_v1_horizontal_pod_autoscaler_status() ::
        #{observedGeneration => integer(),
          lastScaleTime => k8s_model:apimachinery_apis_meta_v1_time(),
          desiredReplicas := integer(),
          currentReplicas := integer(),
          currentCPUUtilizationPercentage => integer()}.

%% io.k8s.api.core.v1.PodSpec
%% 
%% PodSpec is a description of a pod.
-type core_v1_pod_spec() ::
        #{enableServiceLinks => boolean(),
          imagePullSecrets => [k8s_model:core_v1_local_object_reference()],
          priorityClassName => binary(),
          containers := [k8s_model:core_v1_container()],
          nodeSelector => #{_ := binary()},
          automountServiceAccountToken => boolean(),
          dnsPolicy => binary(),
          overhead => #{_ := k8s_model:apimachinery_api_resource_quantity()},
          serviceAccountName => binary(),
          preemptionPolicy => binary(),
          serviceAccount => binary(),
          hostNetwork => boolean(),
          topologySpreadConstraints => [k8s_model:core_v1_topology_spread_constraint()],
          setHostnameAsFQDN => boolean(),
          tolerations => [k8s_model:core_v1_toleration()],
          activeDeadlineSeconds => integer(),
          securityContext => k8s_model:core_v1_pod_security_context(),
          subdomain => binary(),
          readinessGates => [k8s_model:core_v1_pod_readiness_gate()],
          schedulerName => binary(),
          hostname => binary(),
          priority => integer(),
          affinity => k8s_model:core_v1_affinity(),
          restartPolicy => binary(),
          hostAliases => [k8s_model:core_v1_host_alias()],
          ephemeralContainers => [k8s_model:core_v1_ephemeral_container()],
          hostIPC => boolean(),
          terminationGracePeriodSeconds => integer(),
          volumes => [k8s_model:core_v1_volume()],
          initContainers => [k8s_model:core_v1_container()],
          hostPID => boolean(),
          nodeName => binary(),
          dnsConfig => k8s_model:core_v1_pod_dns_config(),
          runtimeClassName => binary(),
          shareProcessNamespace => boolean()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation
%% 
%% CustomResourceValidation is a list of validation methods for
%% CustomResources.
-type apiextensions_v1_custom_resource_validation() ::
        #{'openAPIV3Schema' => k8s_model:apiextensions_v1_json_schema_props()}.

%% io.k8s.api.flowcontrol.v1alpha1.FlowDistinguisherMethod
%% 
%% FlowDistinguisherMethod specifies the method of a flow
%% distinguisher.
-type flowcontrol_v1alpha1_flow_distinguisher_method() ::
        #{type := binary()}.

%% io.k8s.api.core.v1.SeccompProfile
%% 
%% SeccompProfile defines a pod/container's seccomp profile
%% settings. Only one profile source may be set.
-type core_v1_seccomp_profile() ::
        #{type := binary(),
          localhostProfile => binary()}.

%% io.k8s.api.apps.v1.StatefulSetUpdateStrategy
%% 
%% StatefulSetUpdateStrategy indicates the strategy that the
%% StatefulSet controller will use to perform updates. It includes
%% any additional parameters necessary to perform the update for the
%% indicated strategy.
-type apps_v1_stateful_set_update_strategy() ::
        #{type => binary(),
          rollingUpdate => k8s_model:apps_v1_rolling_update_stateful_set_strategy()}.

%% io.k8s.api.events.v1.EventList
%% 
%% EventList is a list of Event objects.
-type events_v1_event_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:events_v1_event()],
          apiVersion => binary()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.Status
%% 
%% Status is a return value for calls that don't return other
%% objects.
-type apimachinery_apis_meta_v1_status() ::
        #{status => binary(),
          reason => binary(),
          metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          message => binary(),
          kind => binary(),
          details => k8s_model:apimachinery_apis_meta_v1_status_details(),
          code => integer(),
          apiVersion => binary()}.

%% io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerCondition
%% 
%% HorizontalPodAutoscalerCondition describes the state of a
%% HorizontalPodAutoscaler at a certain point.
-type autoscaling_v2beta2_horizontal_pod_autoscaler_condition() ::
        #{type := binary(),
          status := binary(),
          reason => binary(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.flowcontrol.v1alpha1.NonResourcePolicyRule
%% 
%% NonResourcePolicyRule is a predicate that matches non-resource
%% requests according to their verb and the target non-resource URL.
%% A NonResourcePolicyRule matches a request if and only if both (a)
%% at least one member of verbs matches the request and (b) at least
%% one member of nonResourceURLs matches the request.
-type flowcontrol_v1alpha1_non_resource_policy_rule() ::
        #{verbs := [binary()],
          nonResourceURLs := [binary()]}.

%% io.k8s.api.core.v1.PreferredSchedulingTerm
%% 
%% An empty preferred scheduling term matches all objects with
%% implicit weight 0 (i.e. it's a no-op). A null preferred
%% scheduling term matches no objects (i.e. is also a no-op).
-type core_v1_preferred_scheduling_term() ::
        #{weight := integer(),
          preference := k8s_model:core_v1_node_selector_term()}.

%% io.k8s.api.storage.v1beta1.VolumeAttachment
%% 
%% VolumeAttachment captures the intent to attach or detach the
%% specified volume to/from the specified node.
%% 
%% VolumeAttachment objects are non-namespaced.
-type storage_v1beta1_volume_attachment() ::
        #{status => k8s_model:storage_v1beta1_volume_attachment_status(),
          spec := k8s_model:storage_v1beta1_volume_attachment_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.PersistentVolumeStatus
%% 
%% PersistentVolumeStatus is the current status of a persistent
%% volume.
-type core_v1_persistent_volume_status() ::
        #{reason => binary(),
          phase => binary(),
          message => binary()}.

%% io.k8s.api.core.v1.NodeSelectorRequirement
%% 
%% A node selector requirement is a selector that contains values, a
%% key, and an operator that relates the key and values.
-type core_v1_node_selector_requirement() ::
        #{values => [binary()],
          operator := binary(),
          key := binary()}.

%% io.k8s.api.core.v1.PersistentVolumeClaim
%% 
%% PersistentVolumeClaim is a user's request for and claim to a
%% persistent volume
-type core_v1_persistent_volume_claim() ::
        #{status => k8s_model:core_v1_persistent_volume_claim_status(),
          spec => k8s_model:core_v1_persistent_volume_claim_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.autoscaling.v2beta1.ObjectMetricSource
%% 
%% ObjectMetricSource indicates how to scale on a metric describing
%% a kubernetes object (for example, hits-per-second on an Ingress
%% object).
-type autoscaling_v2beta1_object_metric_source() ::
        #{targetValue := k8s_model:apimachinery_api_resource_quantity(),
          target := k8s_model:autoscaling_v2beta1_cross_version_object_reference(),
          selector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          metricName := binary(),
          averageValue => k8s_model:apimachinery_api_resource_quantity()}.

%% io.k8s.api.networking.v1beta1.IngressClassSpec
%% 
%% IngressClassSpec provides information about the class of an
%% Ingress.
-type networking_v1beta1_ingress_class_spec() ::
        #{parameters => k8s_model:core_v1_typed_local_object_reference(),
          controller => binary()}.

%% io.k8s.api.batch.v2alpha1.CronJobSpec
%% 
%% CronJobSpec describes how the job execution will look like and
%% when it will actually run.
-type batch_v2alpha1_cron_job_spec() ::
        #{suspend => boolean(),
          successfulJobsHistoryLimit => integer(),
          startingDeadlineSeconds => integer(),
          schedule := binary(),
          jobTemplate := k8s_model:batch_v2alpha1_job_template_spec(),
          failedJobsHistoryLimit => integer(),
          concurrencyPolicy => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionList
%% 
%% CustomResourceDefinitionList is a list of
%% CustomResourceDefinition objects.
-type apiextensions_v1_custom_resource_definition_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:apiextensions_v1_custom_resource_definition()],
          apiVersion => binary()}.

%% io.k8s.api.networking.v1.IngressSpec
%% 
%% IngressSpec describes the Ingress the user wishes to exist.
-type networking_v1_ingress_spec() ::
        #{tls => [k8s_model:networking_v1_ingress_tls()],
          rules => [k8s_model:networking_v1_ingress_rule()],
          ingressClassName => binary(),
          defaultBackend => k8s_model:networking_v1_ingress_backend()}.

%% io.k8s.api.authorization.v1.ResourceRule
%% 
%% ResourceRule is the list of actions the subject is allowed to
%% perform on resources. The list ordering isn't significant, may
%% contain duplicates, and possibly be incomplete.
-type authorization_v1_resource_rule() ::
        #{verbs := [binary()],
          resources => [binary()],
          resourceNames => [binary()],
          apiGroups => [binary()]}.

%% io.k8s.api.events.v1beta1.Event
%% 
%% Event is a report of an event somewhere in the cluster. It
%% generally denotes some state change in the system. Events have a
%% limited retention time and triggers and messages may evolve with
%% time. Event consumers should not rely on the timing of an event
%% with a given Reason reflecting a consistent underlying trigger,
%% or the continued existence of events with that Reason. Events
%% should be treated as informative, best-effort, supplemental data.
-type events_v1beta1_event() ::
        #{type => binary(),
          series => k8s_model:events_v1beta1_event_series(),
          reportingInstance => binary(),
          reportingController => binary(),
          related => k8s_model:core_v1_object_reference(),
          regarding => k8s_model:core_v1_object_reference(),
          reason => binary(),
          note => binary(),
          metadata := k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          eventTime := k8s_model:apimachinery_apis_meta_v1_micro_time(),
          deprecatedSource => k8s_model:core_v1_event_source(),
          deprecatedLastTimestamp => k8s_model:apimachinery_apis_meta_v1_time(),
          deprecatedFirstTimestamp => k8s_model:apimachinery_apis_meta_v1_time(),
          deprecatedCount => integer(),
          apiVersion => binary(),
          action => binary()}.

%% io.k8s.api.core.v1.PodStatus
%% 
%% PodStatus represents information about the status of a pod.
%% Status may trail the actual state of a system, especially if the
%% node that hosts the pod cannot contact the control plane.
-type core_v1_pod_status() ::
        #{startTime => k8s_model:apimachinery_apis_meta_v1_time(),
          reason => binary(),
          qosClass => binary(),
          podIPs => [k8s_model:core_v1_pod_ip()],
          podIP => binary(),
          phase => binary(),
          nominatedNodeName => binary(),
          message => binary(),
          initContainerStatuses => [k8s_model:core_v1_container_status()],
          hostIP => binary(),
          ephemeralContainerStatuses => [k8s_model:core_v1_container_status()],
          containerStatuses => [k8s_model:core_v1_container_status()],
          conditions => [k8s_model:core_v1_pod_condition()]}.

%% io.k8s.api.rbac.v1alpha1.RoleBindingList
%% 
%% RoleBindingList is a collection of RoleBindings Deprecated in
%% v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList,
%% and will no longer be served in v1.22.
-type rbac_v1alpha1_role_binding_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:rbac_v1alpha1_role_binding()],
          apiVersion => binary()}.

%% io.k8s.api.events.v1beta1.EventList
%% 
%% EventList is a list of Event objects.
-type events_v1beta1_event_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:events_v1beta1_event()],
          apiVersion => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionStatus
%% 
%% CustomResourceDefinitionStatus indicates the state of the
%% CustomResourceDefinition
-type apiextensions_v1beta1_custom_resource_definition_status() ::
        #{storedVersions => [binary()],
          conditions => [k8s_model:apiextensions_v1beta1_custom_resource_definition_condition()],
          acceptedNames => k8s_model:apiextensions_v1beta1_custom_resource_definition_names()}.

%% io.k8s.api.node.v1.RuntimeClass
%% 
%% RuntimeClass defines a class of container runtime supported in
%% the cluster. The RuntimeClass is used to determine which
%% container runtime is used to run all containers in a pod.
%% RuntimeClasses are manually defined by a user or cluster
%% provisioner, and referenced in the PodSpec. The Kubelet is
%% responsible for resolving the RuntimeClassName reference before
%% running the pod. For more details, see
%% https://kubernetes.io/docs/concepts/containers/runtime-class/
-type node_v1_runtime_class() ::
        #{scheduling => k8s_model:node_v1_scheduling(),
          overhead => k8s_model:node_v1_overhead(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          handler := binary(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.Node
%% 
%% Node is a worker node in Kubernetes. Each node will have a unique
%% identifier in the cache (i.e. in etcd).
-type core_v1_node() ::
        #{status => k8s_model:core_v1_node_status(),
          spec => k8s_model:core_v1_node_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.APIResource
%% 
%% APIResource specifies the name of a resource and whether it is
%% namespaced.
-type apimachinery_apis_meta_v1_api_resource() ::
        #{version => binary(),
          verbs := [binary()],
          storageVersionHash => binary(),
          singularName := binary(),
          shortNames => [binary()],
          namespaced := boolean(),
          name := binary(),
          kind := binary(),
          group => binary(),
          categories => [binary()]}.

%% io.k8s.api.flowcontrol.v1alpha1.ResourcePolicyRule
%% 
%% ResourcePolicyRule is a predicate that matches some resource
%% requests, testing the request's verb and the target resource. A
%% ResourcePolicyRule matches a resource request if and only if: (a)
%% at least one member of verbs matches the request, (b) at least
%% one member of apiGroups matches the request, (c) at least one
%% member of resources matches the request, and (d) least one member
%% of namespaces matches the request.
-type flowcontrol_v1alpha1_resource_policy_rule() ::
        #{verbs := [binary()],
          resources := [binary()],
          namespaces => [binary()],
          clusterScope => boolean(),
          apiGroups := [binary()]}.

%% io.k8s.api.policy.v1beta1.SELinuxStrategyOptions
%% 
%% SELinuxStrategyOptions defines the strategy type and any options
%% used to create the strategy.
-type policy_v1beta1_se_linux_strategy_options() ::
        #{seLinuxOptions => k8s_model:core_v1_se_linux_options(),
          rule := binary()}.

%% io.k8s.api.authorization.v1.NonResourceAttributes
%% 
%% NonResourceAttributes includes the authorization attributes
%% available for non-resource requests to the Authorizer interface
-type authorization_v1_non_resource_attributes() ::
        #{verb => binary(),
          path => binary()}.

%% io.k8s.api.core.v1.NodeSpec
%% 
%% NodeSpec describes the attributes that a node is created with.
-type core_v1_node_spec() ::
        #{unschedulable => boolean(),
          taints => [k8s_model:core_v1_taint()],
          providerID => binary(),
          podCIDRs => [binary()],
          podCIDR => binary(),
          externalID => binary(),
          configSource => k8s_model:core_v1_node_config_source()}.

%% io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList
%% 
%% APIServiceList is a list of APIService objects.
-type apiregistration_v1_api_service_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:apiregistration_v1_api_service()],
          apiVersion => binary()}.

%% io.k8s.api.storage.v1alpha1.VolumeAttachmentSource
%% 
%% VolumeAttachmentSource represents a volume that should be
%% attached. Right now only PersistenVolumes can be attached via
%% external attacher, in future we may allow also inline volumes in
%% pods. Exactly one member can be set.
-type storage_v1alpha1_volume_attachment_source() ::
        #{persistentVolumeName => binary(),
          inlineVolumeSpec => k8s_model:core_v1_persistent_volume_spec()}.

%% io.k8s.api.authentication.v1.TokenReview
%% 
%% TokenReview attempts to authenticate a token to a known user.
%% Note: TokenReview requests may be cached by the webhook token
%% authenticator plugin in the kube-apiserver.
-type authentication_v1_token_review() ::
        #{status => k8s_model:authentication_v1_token_review_status(),
          spec := k8s_model:authentication_v1_token_review_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.node.v1.Scheduling
%% 
%% Scheduling specifies the scheduling constraints for nodes
%% supporting a RuntimeClass.
-type node_v1_scheduling() ::
        #{tolerations => [k8s_model:core_v1_toleration()],
          nodeSelector => #{_ := binary()}}.

%% io.k8s.api.core.v1.GlusterfsVolumeSource
%% 
%% Represents a Glusterfs mount that lasts the lifetime of a pod.
%% Glusterfs volumes do not support ownership management or SELinux
%% relabeling.
-type core_v1_glusterfs_volume_source() ::
        #{readOnly => boolean(),
          path := binary(),
          endpoints := binary()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions
%% 
%% Preconditions must be fulfilled before an operation (update,
%% delete, etc.) is carried out.
-type apimachinery_apis_meta_v1_preconditions() ::
        #{uid => binary(),
          resourceVersion => binary()}.

%% io.k8s.api.core.v1.LoadBalancerStatus
%% 
%% LoadBalancerStatus represents the status of a load-balancer.
-type core_v1_load_balancer_status() ::
        #{ingress => [k8s_model:core_v1_load_balancer_ingress()]}.

%% io.k8s.api.storage.v1alpha1.VolumeAttachment
%% 
%% VolumeAttachment captures the intent to attach or detach the
%% specified volume to/from the specified node.
%% 
%% VolumeAttachment objects are non-namespaced.
-type storage_v1alpha1_volume_attachment() ::
        #{status => k8s_model:storage_v1alpha1_volume_attachment_status(),
          spec := k8s_model:storage_v1alpha1_volume_attachment_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.autoscaling.v1.CrossVersionObjectReference
%% 
%% CrossVersionObjectReference contains enough information to let
%% you identify the referred resource.
-type autoscaling_v1_cross_version_object_reference() ::
        #{name := binary(),
          kind := binary(),
          apiVersion => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition
%% 
%% CustomResourceDefinition represents a resource that should be
%% exposed on the API server. Its name MUST be in the format
%% <.spec.name>.<.spec.group>.
-type apiextensions_v1_custom_resource_definition() ::
        #{status => k8s_model:apiextensions_v1_custom_resource_definition_status(),
          spec := k8s_model:apiextensions_v1_custom_resource_definition_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.networking.v1.IngressList
%% 
%% IngressList is a collection of Ingress.
-type networking_v1_ingress_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:networking_v1_ingress()],
          apiVersion => binary()}.

%% io.k8s.api.rbac.v1.ClusterRoleList
%% 
%% ClusterRoleList is a collection of ClusterRoles
-type rbac_v1_cluster_role_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:rbac_v1_cluster_role()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.ServiceAccount
%% 
%% ServiceAccount binds together: * a name, understood by users, and
%% perhaps by peripheral systems, for an identity * a principal that
%% can be authenticated and authorized * a set of secrets
-type core_v1_service_account() ::
        #{secrets => [k8s_model:core_v1_object_reference()],
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          imagePullSecrets => [k8s_model:core_v1_local_object_reference()],
          automountServiceAccountToken => boolean(),
          apiVersion => binary()}.

%% io.k8s.api.autoscaling.v1.Scale
%% 
%% Scale represents a scaling request for a resource.
-type autoscaling_v1_scale() ::
        #{status => k8s_model:autoscaling_v1_scale_status(),
          spec => k8s_model:autoscaling_v1_scale_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.storage.v1beta1.CSINodeDriver
%% 
%% CSINodeDriver holds information about the specification of one
%% CSI driver installed on a node
-type storage_v1beta1_csi_node_driver() ::
        #{topologyKeys => [binary()],
          nodeID := binary(),
          name := binary(),
          allocatable => k8s_model:storage_v1beta1_volume_node_resources()}.

%% io.k8s.api.core.v1.CinderPersistentVolumeSource
%% 
%% Represents a cinder volume resource in Openstack. A Cinder volume
%% must exist before mounting to a container. The volume must also
%% be in the same region as the kubelet. Cinder volumes support
%% ownership management and SELinux relabeling.
-type core_v1_cinder_persistent_volume_source() ::
        #{volumeID := binary(),
          secretRef => k8s_model:core_v1_secret_reference(),
          readOnly => boolean(),
          fsType => binary()}.

%% io.k8s.api.core.v1.ServiceSpec
%% 
%% ServiceSpec describes the attributes that a user creates on a
%% service.
-type core_v1_service_spec() ::
        #{type => binary(),
          topologyKeys => [binary()],
          sessionAffinityConfig => k8s_model:core_v1_session_affinity_config(),
          sessionAffinity => binary(),
          selector => #{_ := binary()},
          publishNotReadyAddresses => boolean(),
          ports => [k8s_model:core_v1_service_port()],
          loadBalancerSourceRanges => [binary()],
          loadBalancerIP => binary(),
          ipFamilyPolicy => binary(),
          ipFamilies => [binary()],
          healthCheckNodePort => integer(),
          externalTrafficPolicy => binary(),
          externalName => binary(),
          externalIPs => [binary()],
          clusterIPs => [binary()],
          clusterIP => binary(),
          allocateLoadBalancerNodePorts => boolean()}.

%% io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceSpec
%% 
%% APIServiceSpec contains information for locating and
%% communicating with a server. Only https is supported, though you
%% are able to disable certificate verification.
-type apiregistration_v1beta1_api_service_spec() ::
        #{versionPriority := integer(),
          version => binary(),
          service => k8s_model:apiregistration_v1beta1_service_reference(),
          insecureSkipTLSVerify => boolean(),
          groupPriorityMinimum := integer(),
          group => binary(),
          caBundle => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionList
%% 
%% CustomResourceDefinitionList is a list of
%% CustomResourceDefinition objects.
-type apiextensions_v1beta1_custom_resource_definition_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:apiextensions_v1beta1_custom_resource_definition()],
          apiVersion => binary()}.

%% io.k8s.api.networking.v1.NetworkPolicyPort
%% 
%% NetworkPolicyPort describes a port to allow traffic on
-type networking_v1_network_policy_port() ::
        #{protocol => binary(),
          port => k8s_model:apimachinery_util_intstr_int_or_string(),
          endPort => integer()}.

%% io.k8s.api.flowcontrol.v1beta1.FlowSchemaCondition
%% 
%% FlowSchemaCondition describes conditions for a FlowSchema.
-type flowcontrol_v1beta1_flow_schema_condition() ::
        #{type => binary(),
          status => binary(),
          reason => binary(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.flowcontrol.v1beta1.LimitedPriorityLevelConfiguration
%% 
%% LimitedPriorityLevelConfiguration specifies how to handle
%% requests that are subject to limits. It addresses two issues:
%% * How are requests for this priority level limited?
%% * What should be done with requests that exceed the limit?
-type flowcontrol_v1beta1_limited_priority_level_configuration() ::
        #{limitResponse => k8s_model:flowcontrol_v1beta1_limit_response(),
          assuredConcurrencyShares => integer()}.

%% io.k8s.api.flowcontrol.v1beta1.FlowDistinguisherMethod
%% 
%% FlowDistinguisherMethod specifies the method of a flow
%% distinguisher.
-type flowcontrol_v1beta1_flow_distinguisher_method() ::
        #{type := binary()}.

%% io.k8s.api.discovery.v1beta1.EndpointConditions
%% 
%% EndpointConditions represents the current condition of an
%% endpoint.
-type discovery_v1beta1_endpoint_conditions() ::
        #{terminating => boolean(),
          serving => boolean(),
          ready => boolean()}.

%% io.k8s.api.core.v1.PersistentVolumeClaimStatus
%% 
%% PersistentVolumeClaimStatus is the current status of a persistent
%% volume claim.
-type core_v1_persistent_volume_claim_status() ::
        #{phase => binary(),
          conditions => [k8s_model:core_v1_persistent_volume_claim_condition()],
          capacity => #{_ := k8s_model:apimachinery_api_resource_quantity()},
          accessModes => [binary()]}.

%% io.k8s.api.autoscaling.v2beta2.HPAScalingPolicy
%% 
%% HPAScalingPolicy is a single policy which must hold true for a
%% specified past interval.
-type autoscaling_v2beta2_hpa_scaling_policy() ::
        #{value := integer(),
          type := binary(),
          periodSeconds := integer()}.

%% io.k8s.api.apps.v1.DeploymentSpec
%% 
%% DeploymentSpec is the specification of the desired behavior of
%% the Deployment.
-type apps_v1_deployment_spec() ::
        #{template := k8s_model:core_v1_pod_template_spec(),
          strategy => k8s_model:apps_v1_deployment_strategy(),
          selector := k8s_model:apimachinery_apis_meta_v1_label_selector(),
          revisionHistoryLimit => integer(),
          replicas => integer(),
          progressDeadlineSeconds => integer(),
          paused => boolean(),
          minReadySeconds => integer()}.

%% io.k8s.api.core.v1.ConfigMapProjection
%% 
%% Adapts a ConfigMap into a projected volume.
%% 
%% The contents of the target ConfigMap's Data field will be
%% presented in a projected volume as files using the keys in the
%% Data field as the file names, unless the items element is
%% populated with specific mappings of keys to paths. Note that this
%% is identical to a configmap volume source without the default
%% mode.
-type core_v1_config_map_projection() ::
        #{optional => boolean(),
          name => binary(),
          items => [k8s_model:core_v1_key_to_path()]}.

%% io.k8s.api.networking.v1beta1.IngressList
%% 
%% IngressList is a collection of Ingress.
-type networking_v1beta1_ingress_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:networking_v1beta1_ingress()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.Probe
%% 
%% Probe describes a health check to be performed against a
%% container to determine whether it is alive or ready to receive
%% traffic.
-type core_v1_probe() ::
        #{timeoutSeconds => integer(),
          tcpSocket => k8s_model:core_v1_tcp_socket_action(),
          successThreshold => integer(),
          periodSeconds => integer(),
          initialDelaySeconds => integer(),
          httpGet => k8s_model:core_v1_http_get_action(),
          failureThreshold => integer(),
          exec => k8s_model:core_v1_exec_action()}.

%% io.k8s.api.node.v1beta1.Overhead
%% 
%% Overhead structure represents the resource overhead associated
%% with running a pod.
-type node_v1beta1_overhead() ::
        #{podFixed => #{_ := k8s_model:apimachinery_api_resource_quantity()}}.

%% io.k8s.api.rbac.v1alpha1.RoleBinding
%% 
%% RoleBinding references a role, but does not contain it. It can
%% reference a Role in the same namespace or a ClusterRole in the
%% global namespace. It adds who information via Subjects and
%% namespace information by which namespace it exists in.
%% RoleBindings in a given namespace only have effect in that
%% namespace. Deprecated in v1.17 in favor of
%% rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be
%% served in v1.22.
-type rbac_v1alpha1_role_binding() ::
        #{subjects => [k8s_model:rbac_v1alpha1_subject()],
          roleRef := k8s_model:rbac_v1alpha1_role_ref(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.scheduling.v1.PriorityClass
%% 
%% PriorityClass defines mapping from a priority class name to the
%% priority integer value. The value can be any valid integer.
-type scheduling_v1_priority_class() ::
        #{value := integer(),
          preemptionPolicy => binary(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          globalDefault => boolean(),
          description => binary(),
          apiVersion => binary()}.

%% io.k8s.api.rbac.v1alpha1.AggregationRule
%% 
%% AggregationRule describes how to locate ClusterRoles to aggregate
%% into the ClusterRole
-type rbac_v1alpha1_aggregation_rule() ::
        #{clusterRoleSelectors => [k8s_model:apimachinery_apis_meta_v1_label_selector()]}.

%% io.k8s.api.core.v1.PersistentVolumeClaimList
%% 
%% PersistentVolumeClaimList is a list of PersistentVolumeClaim
%% items.
-type core_v1_persistent_volume_claim_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:core_v1_persistent_volume_claim()],
          apiVersion => binary()}.

%% io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfiguration
%% 
%% PriorityLevelConfiguration represents the configuration of a
%% priority level.
-type flowcontrol_v1beta1_priority_level_configuration() ::
        #{status => k8s_model:flowcontrol_v1beta1_priority_level_configuration_status(),
          spec => k8s_model:flowcontrol_v1beta1_priority_level_configuration_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.rbac.v1.ClusterRole
%% 
%% ClusterRole is a cluster level, logical grouping of PolicyRules
%% that can be referenced as a unit by a RoleBinding or
%% ClusterRoleBinding.
-type rbac_v1_cluster_role() ::
        #{rules => [k8s_model:rbac_v1_policy_rule()],
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary(),
          aggregationRule => k8s_model:rbac_v1_aggregation_rule()}.

%% io.k8s.api.core.v1.TypedLocalObjectReference
%% 
%% TypedLocalObjectReference contains enough information to let you
%% locate the typed referenced object inside the same namespace.
-type core_v1_typed_local_object_reference() ::
        #{name := binary(),
          kind := binary(),
          apiGroup => binary()}.

%% io.k8s.api.flowcontrol.v1beta1.FlowSchemaSpec
%% 
%% FlowSchemaSpec describes how the FlowSchema's specification looks
%% like.
-type flowcontrol_v1beta1_flow_schema_spec() ::
        #{rules => [k8s_model:flowcontrol_v1beta1_policy_rules_with_subjects()],
          priorityLevelConfiguration := k8s_model:flowcontrol_v1beta1_priority_level_configuration_reference(),
          matchingPrecedence => integer(),
          distinguisherMethod => k8s_model:flowcontrol_v1beta1_flow_distinguisher_method()}.

%% io.k8s.api.storage.v1.VolumeAttachmentSource
%% 
%% VolumeAttachmentSource represents a volume that should be
%% attached. Right now only PersistenVolumes can be attached via
%% external attacher, in future we may allow also inline volumes in
%% pods. Exactly one member can be set.
-type storage_v1_volume_attachment_source() ::
        #{persistentVolumeName => binary(),
          inlineVolumeSpec => k8s_model:core_v1_persistent_volume_spec()}.

%% io.k8s.api.certificates.v1beta1.CertificateSigningRequestList
-type certificates_v1beta1_certificate_signing_request_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:certificates_v1beta1_certificate_signing_request()],
          apiVersion => binary()}.

%% io.k8s.api.policy.v1beta1.RunAsUserStrategyOptions
%% 
%% RunAsUserStrategyOptions defines the strategy type and any
%% options used to create the strategy.
-type policy_v1beta1_run_as_user_strategy_options() ::
        #{rule := binary(),
          ranges => [k8s_model:policy_v1beta1_id_range()]}.

%% io.k8s.api.flowcontrol.v1alpha1.QueuingConfiguration
%% 
%% QueuingConfiguration holds the configuration parameters for
%% queuing
-type flowcontrol_v1alpha1_queuing_configuration() ::
        #{queues => integer(),
          queueLengthLimit => integer(),
          handSize => integer()}.

%% io.k8s.api.core.v1.ResourceQuota
%% 
%% ResourceQuota sets aggregate quota restrictions enforced per
%% namespace
-type core_v1_resource_quota() ::
        #{status => k8s_model:core_v1_resource_quota_status(),
          spec => k8s_model:core_v1_resource_quota_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.Condition
%% 
%% Condition contains details for one aspect of the current state of
%% this API Resource.
-type apimachinery_apis_meta_v1_condition() ::
        #{type := binary(),
          status := binary(),
          reason := binary(),
          observedGeneration => integer(),
          message := binary(),
          lastTransitionTime := k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.core.v1.ReplicationControllerSpec
%% 
%% ReplicationControllerSpec is the specification of a replication
%% controller.
-type core_v1_replication_controller_spec() ::
        #{template => k8s_model:core_v1_pod_template_spec(),
          selector => #{_ := binary()},
          replicas => integer(),
          minReadySeconds => integer()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta
%% 
%% ListMeta describes metadata that synthetic resources must have,
%% including lists and various status objects. A resource may have
%% only one of {ObjectMeta, ListMeta}.
-type apimachinery_apis_meta_v1_list_meta() ::
        #{selfLink => binary(),
          resourceVersion => binary(),
          remainingItemCount => integer(),
          continue => binary()}.

%% io.k8s.api.core.v1.TopologySelectorTerm
%% 
%% A topology selector term represents the result of label queries.
%% A null or empty topology selector term matches no objects. The
%% requirements of them are ANDed. It provides a subset of
%% functionality as NodeSelectorTerm. This is an alpha feature and
%% may change in the future.
-type core_v1_topology_selector_term() ::
        #{matchLabelExpressions => [k8s_model:core_v1_topology_selector_label_requirement()]}.

%% io.k8s.api.authorization.v1beta1.NonResourceAttributes
%% 
%% NonResourceAttributes includes the authorization attributes
%% available for non-resource requests to the Authorizer interface
-type authorization_v1beta1_non_resource_attributes() ::
        #{verb => binary(),
          path => binary()}.

%% io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference
%% 
%% CrossVersionObjectReference contains enough information to let
%% you identify the referred resource.
-type autoscaling_v2beta2_cross_version_object_reference() ::
        #{name := binary(),
          kind := binary(),
          apiVersion => binary()}.

%% io.k8s.api.flowcontrol.v1alpha1.LimitResponse
%% 
%% LimitResponse defines how to handle requests that can not be
%% executed right now.
-type flowcontrol_v1alpha1_limit_response() ::
        #{type := binary(),
          queuing => k8s_model:flowcontrol_v1alpha1_queuing_configuration()}.

%% io.k8s.api.authorization.v1beta1.SubjectAccessReviewSpec
%% 
%% SubjectAccessReviewSpec is a description of the access request.
%% Exactly one of ResourceAuthorizationAttributes and
%% NonResourceAuthorizationAttributes must be set
-type authorization_v1beta1_subject_access_review_spec() ::
        #{user => binary(),
          uid => binary(),
          resourceAttributes => k8s_model:authorization_v1beta1_resource_attributes(),
          nonResourceAttributes => k8s_model:authorization_v1beta1_non_resource_attributes(),
          group => [binary()],
          extra => #{_ := [binary()]}}.

%% io.k8s.api.core.v1.NodeCondition
%% 
%% NodeCondition contains condition information for a node.
-type core_v1_node_condition() ::
        #{type := binary(),
          status := binary(),
          reason => binary(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time(),
          lastHeartbeatTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.apps.v1.RollingUpdateDaemonSet
%% 
%% Spec to control the desired behavior of daemon set rolling
%% update.
-type apps_v1_rolling_update_daemon_set() ::
        #{maxUnavailable => k8s_model:apimachinery_util_intstr_int_or_string(),
          maxSurge => k8s_model:apimachinery_util_intstr_int_or_string()}.

%% io.k8s.api.networking.v1.NetworkPolicyList
%% 
%% NetworkPolicyList is a list of NetworkPolicy objects.
-type networking_v1_network_policy_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:networking_v1_network_policy()],
          apiVersion => binary()}.

%% io.k8s.api.storage.v1.CSIDriverList
%% 
%% CSIDriverList is a collection of CSIDriver objects.
-type storage_v1_csi_driver_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:storage_v1_csi_driver()],
          apiVersion => binary()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList
%% 
%% APIGroupList is a list of APIGroup, to allow clients to discover
%% the API at /apis.
-type apimachinery_apis_meta_v1_api_group_list() ::
        #{kind => binary(),
          groups := [k8s_model:apimachinery_apis_meta_v1_api_group()],
          apiVersion => binary()}.

%% io.k8s.api.authorization.v1beta1.NonResourceRule
%% 
%% NonResourceRule holds information that describes a rule for the
%% non-resource
-type authorization_v1beta1_non_resource_rule() ::
        #{verbs := [binary()],
          nonResourceURLs => [binary()]}.

%% io.k8s.api.admissionregistration.v1beta1.ServiceReference
%% 
%% ServiceReference holds a reference to Service.legacy.k8s.io
-type admissionregistration_v1beta1_service_reference() ::
        #{port => integer(),
          path => binary(),
          namespace := binary(),
          name := binary()}.

%% io.k8s.api.core.v1.HTTPGetAction
%% 
%% HTTPGetAction describes an action based on HTTP Get requests.
-type core_v1_http_get_action() ::
        #{scheme => binary(),
          port := k8s_model:apimachinery_util_intstr_int_or_string(),
          path => binary(),
          httpHeaders => [k8s_model:core_v1_http_header()],
          host => binary()}.

%% io.k8s.api.rbac.v1.ClusterRoleBindingList
%% 
%% ClusterRoleBindingList is a collection of ClusterRoleBindings
-type rbac_v1_cluster_role_binding_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:rbac_v1_cluster_role_binding()],
          apiVersion => binary()}.

%% io.k8s.api.networking.v1beta1.IngressStatus
%% 
%% IngressStatus describe the current state of the Ingress.
-type networking_v1beta1_ingress_status() ::
        #{loadBalancer => k8s_model:core_v1_load_balancer_status()}.

%% io.k8s.api.autoscaling.v2beta2.ObjectMetricStatus
%% 
%% ObjectMetricStatus indicates the current value of a metric
%% describing a kubernetes object (for example, hits-per-second on
%% an Ingress object).
-type autoscaling_v2beta2_object_metric_status() ::
        #{metric := k8s_model:autoscaling_v2beta2_metric_identifier(),
          describedObject := k8s_model:autoscaling_v2beta2_cross_version_object_reference(),
          current := k8s_model:autoscaling_v2beta2_metric_value_status()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames
%% 
%% CustomResourceDefinitionNames indicates the names to serve this
%% CustomResourceDefinition
-type apiextensions_v1_custom_resource_definition_names() ::
        #{singular => binary(),
          shortNames => [binary()],
          plural := binary(),
          listKind => binary(),
          kind := binary(),
          categories => [binary()]}.

%% io.k8s.api.authentication.v1.TokenRequest
%% 
%% TokenRequest requests a token for a given service account.
-type authentication_v1_token_request() ::
        #{status => k8s_model:authentication_v1_token_request_status(),
          spec := k8s_model:authentication_v1_token_request_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.ConfigMapList
%% 
%% ConfigMapList is a resource containing a list of ConfigMap
%% objects.
-type core_v1_config_map_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:core_v1_config_map()],
          apiVersion => binary()}.

%% io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec
%% 
%% This information is immutable after the request is created. Only
%% the Request and Usages fields can be set on creation, other
%% fields are derived by Kubernetes and cannot be modified by users.
-type certificates_v1beta1_certificate_signing_request_spec() ::
        #{username => binary(),
          usages => [binary()],
          uid => binary(),
          signerName => binary(),
          request := binary(),
          groups => [binary()],
          extra => #{_ := [binary()]}}.

%% io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceCondition
%% 
%% APIServiceCondition describes the state of an APIService at a
%% particular point
-type apiregistration_v1beta1_api_service_condition() ::
        #{type := binary(),
          status := binary(),
          reason => binary(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.apps.v1.ControllerRevision
%% 
%% ControllerRevision implements an immutable snapshot of state
%% data. Clients are responsible for serializing and deserializing
%% the objects that contain their internal state. Once a
%% ControllerRevision has been successfully created, it can not be
%% updated. The API Server will fail validation of all requests that
%% attempt to mutate the Data field. ControllerRevisions may,
%% however, be deleted. Note that, due to its use by both the
%% DaemonSet and StatefulSet controllers for update and rollback,
%% this object is beta. However, it may be subject to name and
%% representation changes in future releases, and clients should not
%% depend on its stability. It is primarily for internal use by
%% controllers.
-type apps_v1_controller_revision() ::
        #{revision := integer(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          data => k8s_model:apimachinery_runtime_raw_extension(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.CephFSVolumeSource
%% 
%% Represents a Ceph Filesystem mount that lasts the lifetime of a
%% pod Cephfs volumes do not support ownership management or SELinux
%% relabeling.
-type core_v1_ceph_fs_volume_source() ::
        #{user => binary(),
          secretRef => k8s_model:core_v1_local_object_reference(),
          secretFile => binary(),
          readOnly => boolean(),
          path => binary(),
          monitors := [binary()]}.

%% io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationReference
%% 
%% PriorityLevelConfigurationReference contains information that
%% points to the "request-priority" being used.
-type flowcontrol_v1beta1_priority_level_configuration_reference() ::
        #{name := binary()}.

%% io.k8s.api.apps.v1.Deployment
%% 
%% Deployment enables declarative updates for Pods and ReplicaSets.
-type apps_v1_deployment() ::
        #{status => k8s_model:apps_v1_deployment_status(),
          spec => k8s_model:apps_v1_deployment_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.policy.v1beta1.FSGroupStrategyOptions
%% 
%% FSGroupStrategyOptions defines the strategy type and options used
%% to create the strategy.
-type policy_v1beta1_fs_group_strategy_options() ::
        #{rule => binary(),
          ranges => [k8s_model:policy_v1beta1_id_range()]}.

%% io.k8s.api.networking.v1beta1.HTTPIngressRuleValue
%% 
%% HTTPIngressRuleValue is a list of http selectors pointing to
%% backends. In the example: http://<host>/<path>?<searchpart> ->
%% backend where where parts of the url correspond to RFC 3986, this
%% resource will be used to match against everything after the last
%% '/' and before the first '?' or '#'.
-type networking_v1beta1_http_ingress_rule_value() ::
        #{paths := [k8s_model:networking_v1beta1_http_ingress_path()]}.

%% io.k8s.api.core.v1.LocalObjectReference
%% 
%% LocalObjectReference contains enough information to let you
%% locate the referenced object inside the same namespace.
-type core_v1_local_object_reference() ::
        #{name => binary()}.

%% io.k8s.api.core.v1.ReplicationControllerCondition
%% 
%% ReplicationControllerCondition describes the state of a
%% replication controller at a certain point.
-type core_v1_replication_controller_condition() ::
        #{type := binary(),
          status := binary(),
          reason => binary(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.core.v1.HostPathVolumeSource
%% 
%% Represents a host path mapped into a pod. Host path volumes do
%% not support ownership management or SELinux relabeling.
-type core_v1_host_path_volume_source() ::
        #{type => binary(),
          path := binary()}.

%% io.k8s.api.authorization.v1.SelfSubjectRulesReview
%% 
%% SelfSubjectRulesReview enumerates the set of actions the current
%% user can perform within a namespace. The returned list of actions
%% may be incomplete depending on the server's authorization mode,
%% and any errors experienced during the evaluation.
%% SelfSubjectRulesReview should be used by UIs to show/hide
%% actions, or to quickly let an end user reason about their
%% permissions. It should NOT Be used by external systems to drive
%% authorization decisions as this raises confused deputy, cache
%% lifetime/revocation, and correctness concerns.
%% SubjectAccessReview, and LocalAccessReview are the correct way to
%% defer authorization decisions to the API server.
-type authorization_v1_self_subject_rules_review() ::
        #{status => k8s_model:authorization_v1_subject_rules_review_status(),
          spec := k8s_model:authorization_v1_self_subject_rules_review_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus
%% 
%% CustomResourceSubresourceStatus defines how to serve the status
%% subresource for CustomResources. Status is represented by the
%% `.status` JSON path inside of a CustomResource. When set, *
%% exposes a /status subresource for the custom resource * PUT
%% requests to the /status subresource take a custom resource
%% object, and ignore changes to anything except the status stanza *
%% PUT/POST/PATCH requests to the custom resource ignore changes to
%% the status stanza
-type apiextensions_v1_custom_resource_subresource_status() ::
        #{}.

%% io.k8s.api.rbac.v1alpha1.Subject
%% 
%% Subject contains a reference to the object or user identities a
%% role binding applies to. This can either hold a direct API object
%% reference, or a value for non-objects such as user and group
%% names.
-type rbac_v1alpha1_subject() ::
        #{namespace => binary(),
          name := binary(),
          kind := binary(),
          apiVersion => binary()}.

%% io.k8s.api.storage.v1beta1.VolumeNodeResources
%% 
%% VolumeNodeResources is a set of resource limits for scheduling of
%% volumes.
-type storage_v1beta1_volume_node_resources() ::
        #{count => integer()}.

%% io.k8s.api.core.v1.NodeDaemonEndpoints
%% 
%% NodeDaemonEndpoints lists ports opened by daemons running on the
%% Node.
-type core_v1_node_daemon_endpoints() ::
        #{kubeletEndpoint => k8s_model:core_v1_daemon_endpoint()}.

%% io.k8s.api.core.v1.SessionAffinityConfig
%% 
%% SessionAffinityConfig represents the configurations of session
%% affinity.
-type core_v1_session_affinity_config() ::
        #{clientIP => k8s_model:core_v1_client_ip_config()}.

%% io.k8s.api.core.v1.StorageOSPersistentVolumeSource
%% 
%% Represents a StorageOS persistent volume resource.
-type core_v1_storage_os_persistent_volume_source() ::
        #{volumeNamespace => binary(),
          volumeName => binary(),
          secretRef => k8s_model:core_v1_object_reference(),
          readOnly => boolean(),
          fsType => binary()}.

%% io.k8s.api.core.v1.NodeSystemInfo
%% 
%% NodeSystemInfo is a set of ids/uuids to uniquely identify the
%% node.
-type core_v1_node_system_info() ::
        #{systemUUID := binary(),
          osImage := binary(),
          operatingSystem := binary(),
          machineID := binary(),
          kubeletVersion := binary(),
          kubeProxyVersion := binary(),
          kernelVersion := binary(),
          containerRuntimeVersion := binary(),
          bootID := binary(),
          architecture := binary()}.

%% io.k8s.api.core.v1.ConfigMapKeySelector
%% 
%% Selects a key from a ConfigMap.
-type core_v1_config_map_key_selector() ::
        #{optional => boolean(),
          name => binary(),
          key := binary()}.

%% io.k8s.api.core.v1.ScopedResourceSelectorRequirement
%% 
%% A scoped-resource selector requirement is a selector that
%% contains values, a scope name, and an operator that relates the
%% scope name and values.
-type core_v1_scoped_resource_selector_requirement() ::
        #{values => [binary()],
          scopeName := binary(),
          operator := binary()}.

%% io.k8s.api.networking.v1.NetworkPolicyEgressRule
%% 
%% NetworkPolicyEgressRule describes a particular set of traffic
%% that is allowed out of pods matched by a NetworkPolicySpec's
%% podSelector. The traffic must match both ports and to. This type
%% is beta-level in 1.8
-type networking_v1_network_policy_egress_rule() ::
        #{to => [k8s_model:networking_v1_network_policy_peer()],
          ports => [k8s_model:networking_v1_network_policy_port()]}.

%% io.k8s.api.autoscaling.v2beta1.ExternalMetricSource
%% 
%% ExternalMetricSource indicates how to scale on a metric not
%% associated with any Kubernetes object (for example length of
%% queue in cloud messaging service, or QPS from loadbalancer
%% running outside of cluster). Exactly one "target" type should be
%% set.
-type autoscaling_v2beta1_external_metric_source() ::
        #{targetValue => k8s_model:apimachinery_api_resource_quantity(),
          targetAverageValue => k8s_model:apimachinery_api_resource_quantity(),
          metricSelector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          metricName := binary()}.

%% io.k8s.api.certificates.v1beta1.CertificateSigningRequestCondition
-type certificates_v1beta1_certificate_signing_request_condition() ::
        #{type := binary(),
          status => binary(),
          reason => binary(),
          message => binary(),
          lastUpdateTime => k8s_model:apimachinery_apis_meta_v1_time(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.core.v1.ServiceStatus
%% 
%% ServiceStatus represents the current status of a service.
-type core_v1_service_status() ::
        #{loadBalancer => k8s_model:core_v1_load_balancer_status(),
          conditions => [k8s_model:apimachinery_apis_meta_v1_condition()]}.

%% io.k8s.api.extensions.v1beta1.IngressTLS
%% 
%% IngressTLS describes the transport layer security associated with
%% an Ingress.
-type extensions_v1beta1_ingress_tls() ::
        #{secretName => binary(),
          hosts => [binary()]}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ServiceReference
%% 
%% ServiceReference holds a reference to Service.legacy.k8s.io
-type apiextensions_v1beta1_service_reference() ::
        #{port => integer(),
          path => binary(),
          namespace := binary(),
          name := binary()}.

%% io.k8s.api.storage.v1beta1.VolumeError
%% 
%% VolumeError captures an error encountered during a volume
%% operation.
-type storage_v1beta1_volume_error() ::
        #{time => k8s_model:apimachinery_apis_meta_v1_time(),
          message => binary()}.

%% io.k8s.api.networking.v1.IngressRule
%% 
%% IngressRule represents the rules mapping the paths under a
%% specified host to the related backend services. Incoming requests
%% are first evaluated for a host match, then routed to the backend
%% associated with the matching IngressRuleValue.
-type networking_v1_ingress_rule() ::
        #{http => k8s_model:networking_v1_http_ingress_rule_value(),
          host => binary()}.

%% io.k8s.api.autoscaling.v2beta2.MetricSpec
%% 
%% MetricSpec specifies how to scale based on a single metric (only
%% `type` and one other matching field should be set at once).
-type autoscaling_v2beta2_metric_spec() ::
        #{type := binary(),
          resource => k8s_model:autoscaling_v2beta2_resource_metric_source(),
          pods => k8s_model:autoscaling_v2beta2_pods_metric_source(),
          object => k8s_model:autoscaling_v2beta2_object_metric_source(),
          external => k8s_model:autoscaling_v2beta2_external_metric_source(),
          containerResource => k8s_model:autoscaling_v2beta2_container_resource_metric_source()}.

%% io.k8s.api.scheduling.v1beta1.PriorityClass
%% 
%% DEPRECATED - This group version of PriorityClass is deprecated by
%% scheduling.k8s.io/v1/PriorityClass. PriorityClass defines mapping
%% from a priority class name to the priority integer value. The
%% value can be any valid integer.
-type scheduling_v1beta1_priority_class() ::
        #{value := integer(),
          preemptionPolicy => binary(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          globalDefault => boolean(),
          description => binary(),
          apiVersion => binary()}.

%% io.k8s.api.batch.v2alpha1.CronJobList
%% 
%% CronJobList is a collection of cron jobs.
-type batch_v2alpha1_cron_job_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:batch_v2alpha1_cron_job()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.Sysctl
%% 
%% Sysctl defines a kernel parameter to be set
-type core_v1_sysctl() ::
        #{value := binary(),
          name := binary()}.

%% io.k8s.api.flowcontrol.v1beta1.QueuingConfiguration
%% 
%% QueuingConfiguration holds the configuration parameters for
%% queuing
-type flowcontrol_v1beta1_queuing_configuration() ::
        #{queues => integer(),
          queueLengthLimit => integer(),
          handSize => integer()}.

%% io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus
%% 
%% APIServiceStatus contains derived information about an API server
-type apiregistration_v1_api_service_status() ::
        #{conditions => [k8s_model:apiregistration_v1_api_service_condition()]}.

%% io.k8s.api.batch.v1.JobStatus
%% 
%% JobStatus represents the current state of a Job.
-type batch_v1_job_status() ::
        #{succeeded => integer(),
          startTime => k8s_model:apimachinery_apis_meta_v1_time(),
          failed => integer(),
          conditions => [k8s_model:batch_v1_job_condition()],
          completionTime => k8s_model:apimachinery_apis_meta_v1_time(),
          active => integer()}.

%% io.k8s.api.scheduling.v1beta1.PriorityClassList
%% 
%% PriorityClassList is a collection of priority classes.
-type scheduling_v1beta1_priority_class_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:scheduling_v1beta1_priority_class()],
          apiVersion => binary()}.

%% io.k8s.api.storage.v1.CSINodeSpec
%% 
%% CSINodeSpec holds information about the specification of all CSI
%% drivers installed on a node
-type storage_v1_csi_node_spec() ::
        #{drivers := [k8s_model:storage_v1_csi_node_driver()]}.

%% io.k8s.api.core.v1.RBDVolumeSource
%% 
%% Represents a Rados Block Device mount that lasts the lifetime of
%% a pod. RBD volumes support ownership management and SELinux
%% relabeling.
-type core_v1_rbd_volume_source() ::
        #{user => binary(),
          secretRef => k8s_model:core_v1_local_object_reference(),
          readOnly => boolean(),
          pool => binary(),
          monitors := [binary()],
          keyring => binary(),
          image := binary(),
          fsType => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceStatus
%% 
%% CustomResourceSubresourceStatus defines how to serve the status
%% subresource for CustomResources. Status is represented by the
%% `.status` JSON path inside of a CustomResource. When set, *
%% exposes a /status subresource for the custom resource * PUT
%% requests to the /status subresource take a custom resource
%% object, and ignore changes to anything except the status stanza *
%% PUT/POST/PATCH requests to the custom resource ignore changes to
%% the status stanza
-type apiextensions_v1beta1_custom_resource_subresource_status() ::
        #{}.

%% io.k8s.api.scheduling.v1.PriorityClassList
%% 
%% PriorityClassList is a collection of priority classes.
-type scheduling_v1_priority_class_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:scheduling_v1_priority_class()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.EphemeralVolumeSource
%% 
%% Represents an ephemeral volume that is handled by a normal
%% storage driver.
-type core_v1_ephemeral_volume_source() ::
        #{volumeClaimTemplate => k8s_model:core_v1_persistent_volume_claim_template(),
          readOnly => boolean()}.

%% io.k8s.api.core.v1.ReplicationController
%% 
%% ReplicationController represents the configuration of a
%% replication controller.
-type core_v1_replication_controller() ::
        #{status => k8s_model:core_v1_replication_controller_status(),
          spec => k8s_model:core_v1_replication_controller_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.rbac.v1.RoleList
%% 
%% RoleList is a collection of Roles
-type rbac_v1_role_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:rbac_v1_role()],
          apiVersion => binary()}.

%% io.k8s.api.node.v1alpha1.Overhead
%% 
%% Overhead structure represents the resource overhead associated
%% with running a pod.
-type node_v1alpha1_overhead() ::
        #{podFixed => #{_ := k8s_model:apimachinery_api_resource_quantity()}}.

%% io.k8s.api.core.v1.VolumeNodeAffinity
%% 
%% VolumeNodeAffinity defines constraints that limit what nodes this
%% volume can be accessed from.
-type core_v1_volume_node_affinity() ::
        #{required => k8s_model:core_v1_node_selector()}.

%% io.k8s.api.flowcontrol.v1beta1.FlowSchemaList
%% 
%% FlowSchemaList is a list of FlowSchema objects.
-type flowcontrol_v1beta1_flow_schema_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:flowcontrol_v1beta1_flow_schema()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.GlusterfsPersistentVolumeSource
%% 
%% Represents a Glusterfs mount that lasts the lifetime of a pod.
%% Glusterfs volumes do not support ownership management or SELinux
%% relabeling.
-type core_v1_glusterfs_persistent_volume_source() ::
        #{readOnly => boolean(),
          path := binary(),
          endpointsNamespace => binary(),
          endpoints := binary()}.

%% io.k8s.api.apps.v1.DaemonSetList
%% 
%% DaemonSetList is a collection of daemon sets.
-type apps_v1_daemon_set_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:apps_v1_daemon_set()],
          apiVersion => binary()}.

%% io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy
%% 
%% RollingUpdateStatefulSetStrategy is used to communicate parameter
%% for RollingUpdateStatefulSetStrategyType.
-type apps_v1_rolling_update_stateful_set_strategy() ::
        #{partition => integer()}.

%% io.k8s.api.core.v1.PersistentVolumeClaimSpec
%% 
%% PersistentVolumeClaimSpec describes the common attributes of
%% storage devices and allows a Source for provider-specific
%% attributes
-type core_v1_persistent_volume_claim_spec() ::
        #{volumeName => binary(),
          volumeMode => binary(),
          storageClassName => binary(),
          selector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          resources => k8s_model:core_v1_resource_requirements(),
          dataSource => k8s_model:core_v1_typed_local_object_reference(),
          accessModes => [binary()]}.

%% io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler
%% 
%% configuration of a horizontal pod autoscaler.
-type autoscaling_v1_horizontal_pod_autoscaler() ::
        #{status => k8s_model:autoscaling_v1_horizontal_pod_autoscaler_status(),
          spec => k8s_model:autoscaling_v1_horizontal_pod_autoscaler_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.PersistentVolumeClaimTemplate
%% 
%% PersistentVolumeClaimTemplate is used to produce
%% PersistentVolumeClaim objects as part of an
%% EphemeralVolumeSource.
-type core_v1_persistent_volume_claim_template() ::
        #{spec := k8s_model:core_v1_persistent_volume_claim_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta()}.

%% io.k8s.api.core.v1.PersistentVolume
%% 
%% PersistentVolume (PV) is a storage resource provisioned by an
%% administrator. It is analogous to a node. More info:
%% https://kubernetes.io/docs/concepts/storage/persistent-volumes
-type core_v1_persistent_volume() ::
        #{status => k8s_model:core_v1_persistent_volume_status(),
          spec => k8s_model:core_v1_persistent_volume_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.flowcontrol.v1beta1.FlowSchemaStatus
%% 
%% FlowSchemaStatus represents the current state of a FlowSchema.
-type flowcontrol_v1beta1_flow_schema_status() ::
        #{conditions => [k8s_model:flowcontrol_v1beta1_flow_schema_condition()]}.

%% io.k8s.api.policy.v1beta1.PodSecurityPolicyList
%% 
%% PodSecurityPolicyList is a list of PodSecurityPolicy objects.
-type policy_v1beta1_pod_security_policy_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:policy_v1beta1_pod_security_policy()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.AttachedVolume
%% 
%% AttachedVolume describes a volume attached to a node
-type core_v1_attached_volume() ::
        #{name := binary(),
          devicePath := binary()}.

%% io.k8s.api.core.v1.ObjectReference
%% 
%% ObjectReference contains enough information to let you inspect or
%% modify the referred object.
-type core_v1_object_reference() ::
        #{uid => binary(),
          resourceVersion => binary(),
          namespace => binary(),
          name => binary(),
          kind => binary(),
          fieldPath => binary(),
          apiVersion => binary()}.

%% io.k8s.api.coordination.v1.LeaseList
%% 
%% LeaseList is a list of Lease objects.
-type coordination_v1_lease_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:coordination_v1_lease()],
          apiVersion => binary()}.

%% io.k8s.api.rbac.v1alpha1.ClusterRoleBindingList
%% 
%% ClusterRoleBindingList is a collection of ClusterRoleBindings.
%% Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1
%% ClusterRoleBindings, and will no longer be served in v1.22.
-type rbac_v1alpha1_cluster_role_binding_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:rbac_v1alpha1_cluster_role_binding()],
          apiVersion => binary()}.

%% io.k8s.api.admissionregistration.v1.MutatingWebhook
%% 
%% MutatingWebhook describes an admission webhook and the resources
%% and operations it applies to.
-type admissionregistration_v1_mutating_webhook() ::
        #{timeoutSeconds => integer(),
          sideEffects := binary(),
          rules => [k8s_model:admissionregistration_v1_rule_with_operations()],
          reinvocationPolicy => binary(),
          objectSelector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          namespaceSelector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          name := binary(),
          matchPolicy => binary(),
          failurePolicy => binary(),
          clientConfig := k8s_model:admissionregistration_v1_webhook_client_config(),
          admissionReviewVersions := [binary()]}.

%% io.k8s.api.admissionregistration.v1beta1.RuleWithOperations
%% 
%% RuleWithOperations is a tuple of Operations and Resources. It is
%% recommended to make sure that all the tuple expansions are valid.
-type admissionregistration_v1beta1_rule_with_operations() ::
        #{scope => binary(),
          resources => [binary()],
          operations => [binary()],
          apiVersions => [binary()],
          apiGroups => [binary()]}.

%% io.k8s.api.storage.v1.CSINode
%% 
%% CSINode holds information about all CSI drivers installed on a
%% node. CSI drivers do not need to create the CSINode object
%% directly. As long as they use the node-driver-registrar sidecar
%% container, the kubelet will automatically populate the CSINode
%% object for the CSI driver as part of kubelet plugin registration.
%% CSINode has the same name as a node. If the object is missing, it
%% means either there are no CSI Drivers available on the node, or
%% the Kubelet version is low enough that it doesn't create this
%% object. CSINode has an OwnerReference that points to the
%% corresponding node object.
-type storage_v1_csi_node() ::
        #{spec := k8s_model:storage_v1_csi_node_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService
%% 
%% APIService represents a server for a particular GroupVersion.
%% Name must be "version.group".
-type apiregistration_v1_api_service() ::
        #{status => k8s_model:apiregistration_v1_api_service_status(),
          spec => k8s_model:apiregistration_v1_api_service_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.batch.v1beta1.CronJob
%% 
%% CronJob represents the configuration of a single cron job.
-type batch_v1beta1_cron_job() ::
        #{status => k8s_model:batch_v1beta1_cron_job_status(),
          spec => k8s_model:batch_v1beta1_cron_job_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.storage.v1alpha1.VolumeAttachmentSpec
%% 
%% VolumeAttachmentSpec is the specification of a VolumeAttachment
%% request.
-type storage_v1alpha1_volume_attachment_spec() ::
        #{source := k8s_model:storage_v1alpha1_volume_attachment_source(),
          nodeName := binary(),
          attacher := binary()}.

%% io.k8s.api.autoscaling.v2beta1.ContainerResourceMetricStatus
%% 
%% ContainerResourceMetricStatus indicates the current value of a
%% resource metric known to Kubernetes, as specified in requests and
%% limits, describing a single container in each pod in the current
%% scale target (e.g. CPU or memory). Such metrics are built in to
%% Kubernetes, and have special scaling options on top of those
%% available to normal per-pod metrics using the "pods" source.
-type autoscaling_v2beta1_container_resource_metric_status() ::
        #{name := binary(),
          currentAverageValue := k8s_model:apimachinery_api_resource_quantity(),
          currentAverageUtilization => integer(),
          container := binary()}.

%% io.k8s.api.core.v1.NFSVolumeSource
%% 
%% Represents an NFS mount that lasts the lifetime of a pod. NFS
%% volumes do not support ownership management or SELinux
%% relabeling.
-type core_v1_nfs_volume_source() ::
        #{server := binary(),
          readOnly => boolean(),
          path := binary()}.

%% io.k8s.api.core.v1.QuobyteVolumeSource
%% 
%% Represents a Quobyte mount that lasts the lifetime of a pod.
%% Quobyte volumes do not support ownership management or SELinux
%% relabeling.
-type core_v1_quobyte_volume_source() ::
        #{volume := binary(),
          user => binary(),
          tenant => binary(),
          registry := binary(),
          readOnly => boolean(),
          group => binary()}.

%% io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus
%% 
%% HorizontalPodAutoscalerStatus describes the current status of a
%% horizontal pod autoscaler.
-type autoscaling_v2beta2_horizontal_pod_autoscaler_status() ::
        #{observedGeneration => integer(),
          lastScaleTime => k8s_model:apimachinery_apis_meta_v1_time(),
          desiredReplicas := integer(),
          currentReplicas := integer(),
          currentMetrics => [k8s_model:autoscaling_v2beta2_metric_status()],
          conditions := [k8s_model:autoscaling_v2beta2_horizontal_pod_autoscaler_condition()]}.

%% io.k8s.api.core.v1.PodDNSConfig
%% 
%% PodDNSConfig defines the DNS parameters of a pod in addition to
%% those generated from DNSPolicy.
-type core_v1_pod_dns_config() ::
        #{searches => [binary()],
          options => [k8s_model:core_v1_pod_dns_config_option()],
          nameservers => [binary()]}.

%% io.k8s.api.core.v1.FCVolumeSource
%% 
%% Represents a Fibre Channel volume. Fibre Channel volumes can only
%% be mounted as read/write once. Fibre Channel volumes support
%% ownership management and SELinux relabeling.
-type core_v1_fc_volume_source() ::
        #{wwids => [binary()],
          targetWWNs => [binary()],
          readOnly => boolean(),
          lun => integer(),
          fsType => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation
%% 
%% ExternalDocumentation allows referencing an external resource for
%% extended documentation.
-type apiextensions_v1_external_documentation() ::
        #{url => binary(),
          description => binary()}.

%% io.k8s.api.autoscaling.v2beta1.ResourceMetricStatus
%% 
%% ResourceMetricStatus indicates the current value of a resource
%% metric known to Kubernetes, as specified in requests and limits,
%% describing each pod in the current scale target (e.g. CPU or
%% memory). Such metrics are built in to Kubernetes, and have
%% special scaling options on top of those available to normal
%% per-pod metrics using the "pods" source.
-type autoscaling_v2beta1_resource_metric_status() ::
        #{name := binary(),
          currentAverageValue := k8s_model:apimachinery_api_resource_quantity(),
          currentAverageUtilization => integer()}.

%% io.k8s.api.rbac.v1alpha1.ClusterRoleList
%% 
%% ClusterRoleList is a collection of ClusterRoles. Deprecated in
%% v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and
%% will no longer be served in v1.22.
-type rbac_v1alpha1_cluster_role_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:rbac_v1alpha1_cluster_role()],
          apiVersion => binary()}.

%% io.k8s.api.networking.v1.IngressStatus
%% 
%% IngressStatus describe the current state of the Ingress.
-type networking_v1_ingress_status() ::
        #{loadBalancer => k8s_model:core_v1_load_balancer_status()}.

%% io.k8s.api.autoscaling.v2beta1.ExternalMetricStatus
%% 
%% ExternalMetricStatus indicates the current value of a global
%% metric not associated with any Kubernetes object.
-type autoscaling_v2beta1_external_metric_status() ::
        #{metricSelector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          metricName := binary(),
          currentValue := k8s_model:apimachinery_api_resource_quantity(),
          currentAverageValue => k8s_model:apimachinery_api_resource_quantity()}.

%% io.k8s.api.core.v1.ServiceAccountTokenProjection
%% 
%% ServiceAccountTokenProjection represents a projected service
%% account token volume. This projection can be used to insert a
%% service account token into the pods runtime filesystem for use
%% against APIs (Kubernetes API Server or otherwise).
-type core_v1_service_account_token_projection() ::
        #{path := binary(),
          expirationSeconds => integer(),
          audience => binary()}.

%% io.k8s.api.certificates.v1beta1.CertificateSigningRequest
%% 
%% Describes a certificate signing request
-type certificates_v1beta1_certificate_signing_request() ::
        #{status => k8s_model:certificates_v1beta1_certificate_signing_request_status(),
          spec => k8s_model:certificates_v1beta1_certificate_signing_request_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.ConfigMapNodeConfigSource
%% 
%% ConfigMapNodeConfigSource contains the information to reference a
%% ConfigMap as a config source for the Node.
-type core_v1_config_map_node_config_source() ::
        #{uid => binary(),
          resourceVersion => binary(),
          namespace := binary(),
          name := binary(),
          kubeletConfigKey := binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceColumnDefinition
%% 
%% CustomResourceColumnDefinition specifies a column for server side
%% printing.
-type apiextensions_v1beta1_custom_resource_column_definition() ::
        #{type := binary(),
          priority => integer(),
          name := binary(),
          format => binary(),
          description => binary(),
          'JSONPath' := binary()}.

%% io.k8s.api.core.v1.PortworxVolumeSource
%% 
%% PortworxVolumeSource represents a Portworx volume resource.
-type core_v1_portworx_volume_source() ::
        #{volumeID := binary(),
          readOnly => boolean(),
          fsType => binary()}.

%% io.k8s.api.autoscaling.v2beta1.PodsMetricSource
%% 
%% PodsMetricSource indicates how to scale on a metric describing
%% each pod in the current scale target (for example,
%% transactions-processed-per-second). The values will be averaged
%% together before being compared to the target value.
-type autoscaling_v2beta1_pods_metric_source() ::
        #{targetAverageValue := k8s_model:apimachinery_api_resource_quantity(),
          selector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          metricName := binary()}.

%% io.k8s.api.policy.v1beta1.RunAsGroupStrategyOptions
%% 
%% RunAsGroupStrategyOptions defines the strategy type and any
%% options used to create the strategy.
-type policy_v1beta1_run_as_group_strategy_options() ::
        #{rule := binary(),
          ranges => [k8s_model:policy_v1beta1_id_range()]}.

%% io.k8s.api.storage.v1.TokenRequest
%% 
%% TokenRequest contains parameters of a service account token.
-type storage_v1_token_request() ::
        #{expirationSeconds => integer(),
          audience := binary()}.

%% io.k8s.api.storage.v1alpha1.CSIStorageCapacityList
%% 
%% CSIStorageCapacityList is a collection of CSIStorageCapacity
%% objects.
-type storage_v1alpha1_csi_storage_capacity_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:storage_v1alpha1_csi_storage_capacity()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.NodeSelector
%% 
%% A node selector represents the union of the results of one or
%% more label queries over a set of nodes; that is, it represents
%% the OR of the selectors represented by the node selector terms.
-type core_v1_node_selector() ::
        #{nodeSelectorTerms := [k8s_model:core_v1_node_selector_term()]}.

%% io.k8s.api.batch.v2alpha1.CronJob
%% 
%% CronJob represents the configuration of a single cron job.
-type batch_v2alpha1_cron_job() ::
        #{status => k8s_model:batch_v2alpha1_cron_job_status(),
          spec => k8s_model:batch_v2alpha1_cron_job_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfigurationList
%% 
%% MutatingWebhookConfigurationList is a list of
%% MutatingWebhookConfiguration.
-type admissionregistration_v1beta1_mutating_webhook_configuration_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:admissionregistration_v1beta1_mutating_webhook_configuration()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.LimitRangeList
%% 
%% LimitRangeList is a list of LimitRange items.
-type core_v1_limit_range_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:core_v1_limit_range()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.EventList
%% 
%% EventList is a list of events.
-type core_v1_event_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:core_v1_event()],
          apiVersion => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionVersion
%% 
%% CustomResourceDefinitionVersion describes a version for CRD.
-type apiextensions_v1beta1_custom_resource_definition_version() ::
        #{subresources => k8s_model:apiextensions_v1beta1_custom_resource_subresources(),
          storage := boolean(),
          served := boolean(),
          schema => k8s_model:apiextensions_v1beta1_custom_resource_validation(),
          name := binary(),
          deprecationWarning => binary(),
          deprecated => boolean(),
          additionalPrinterColumns => [k8s_model:apiextensions_v1beta1_custom_resource_column_definition()]}.

%% io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationList
%% 
%% PriorityLevelConfigurationList is a list of
%% PriorityLevelConfiguration objects.
-type flowcontrol_v1beta1_priority_level_configuration_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:flowcontrol_v1beta1_priority_level_configuration()],
          apiVersion => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceScale
%% 
%% CustomResourceSubresourceScale defines how to serve the scale
%% subresource for CustomResources.
-type apiextensions_v1beta1_custom_resource_subresource_scale() ::
        #{statusReplicasPath := binary(),
          specReplicasPath := binary(),
          labelSelectorPath => binary()}.

%% io.k8s.api.core.v1.TCPSocketAction
%% 
%% TCPSocketAction describes an action based on opening a socket
-type core_v1_tcp_socket_action() ::
        #{port := k8s_model:apimachinery_util_intstr_int_or_string(),
          host => binary()}.

%% io.k8s.api.core.v1.PodDNSConfigOption
%% 
%% PodDNSConfigOption defines DNS resolver options of a pod.
-type core_v1_pod_dns_config_option() ::
        #{value => binary(),
          name => binary()}.

%% io.k8s.api.authentication.v1.TokenRequestSpec
%% 
%% TokenRequestSpec contains client provided parameters of a token
%% request.
-type authentication_v1_token_request_spec() ::
        #{expirationSeconds => integer(),
          boundObjectRef => k8s_model:authentication_v1_bound_object_reference(),
          audiences := [binary()]}.

%% io.k8s.api.core.v1.ConfigMap
%% 
%% ConfigMap holds configuration data for pods to consume.
-type core_v1_config_map() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          immutable => boolean(),
          data => #{_ := binary()},
          binaryData => #{_ := binary()},
          apiVersion => binary()}.

%% io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler
%% 
%% HorizontalPodAutoscaler is the configuration for a horizontal pod
%% autoscaler, which automatically manages the replica count of any
%% resource implementing the scale subresource based on the metrics
%% specified.
-type autoscaling_v2beta2_horizontal_pod_autoscaler() ::
        #{status => k8s_model:autoscaling_v2beta2_horizontal_pod_autoscaler_status(),
          spec => k8s_model:autoscaling_v2beta2_horizontal_pod_autoscaler_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.batch.v1.Job
%% 
%% Job represents the configuration of a single job.
-type batch_v1_job() ::
        #{status => k8s_model:batch_v1_job_status(),
          spec => k8s_model:batch_v1_job_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.autoscaling.v2beta1.MetricSpec
%% 
%% MetricSpec specifies how to scale based on a single metric (only
%% `type` and one other matching field should be set at once).
-type autoscaling_v2beta1_metric_spec() ::
        #{type := binary(),
          resource => k8s_model:autoscaling_v2beta1_resource_metric_source(),
          pods => k8s_model:autoscaling_v2beta1_pods_metric_source(),
          object => k8s_model:autoscaling_v2beta1_object_metric_source(),
          external => k8s_model:autoscaling_v2beta1_external_metric_source(),
          containerResource => k8s_model:autoscaling_v2beta1_container_resource_metric_source()}.

%% io.k8s.api.admissionregistration.v1.WebhookClientConfig
%% 
%% WebhookClientConfig contains the information to make a TLS
%% connection with the webhook
-type admissionregistration_v1_webhook_client_config() ::
        #{url => binary(),
          service => k8s_model:admissionregistration_v1_service_reference(),
          caBundle => binary()}.

%% io.k8s.api.core.v1.PodAffinityTerm
%% 
%% Defines a set of pods (namely those matching the labelSelector
%% relative to the given namespace(s)) that this pod should be
%% co-located (affinity) or not co-located (anti-affinity) with,
%% where co-located is defined as running on a node whose value of
%% the label with key <topologyKey> matches that of any node on
%% which a pod of the set of pods is running
-type core_v1_pod_affinity_term() ::
        #{topologyKey := binary(),
          namespaces => [binary()],
          labelSelector => k8s_model:apimachinery_apis_meta_v1_label_selector()}.

%% io.k8s.api.core.v1.VolumeProjection
%% 
%% Projection that may be projected along with other supported
%% volume types
-type core_v1_volume_projection() ::
        #{serviceAccountToken => k8s_model:core_v1_service_account_token_projection(),
          secret => k8s_model:core_v1_secret_projection(),
          downwardAPI => k8s_model:core_v1_downward_api_projection(),
          configMap => k8s_model:core_v1_config_map_projection()}.

%% io.k8s.api.apiserverinternal.v1alpha1.ServerStorageVersion
%% 
%% An API server instance reports the version it can decode and the
%% version it encodes objects to when persisting objects in the
%% backend.
-type apiserverinternal_v1alpha1_server_storage_version() ::
        #{encodingVersion => binary(),
          decodableVersions => [binary()],
          apiServerID => binary()}.

%% io.k8s.api.rbac.v1beta1.Subject
%% 
%% Subject contains a reference to the object or user identities a
%% role binding applies to. This can either hold a direct API object
%% reference, or a value for non-objects such as user and group
%% names.
-type rbac_v1beta1_subject() ::
        #{namespace => binary(),
          name := binary(),
          kind := binary(),
          apiGroup => binary()}.

%% io.k8s.api.extensions.v1beta1.IngressList
%% 
%% IngressList is a collection of Ingress.
-type extensions_v1beta1_ingress_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:extensions_v1beta1_ingress()],
          apiVersion => binary()}.

%% io.k8s.api.flowcontrol.v1alpha1.PolicyRulesWithSubjects
%% 
%% PolicyRulesWithSubjects prescribes a test that applies to a
%% request to an apiserver. The test considers the subject making
%% the request, the verb being requested, and the resource to be
%% acted upon. This PolicyRulesWithSubjects matches a request if and
%% only if both (a) at least one member of subjects matches the
%% request and (b) at least one member of resourceRules or
%% nonResourceRules matches the request.
-type flowcontrol_v1alpha1_policy_rules_with_subjects() ::
        #{subjects := [k8s_model:flowcontrol_v1alpha1_subject()],
          resourceRules => [k8s_model:flowcontrol_v1alpha1_resource_policy_rule()],
          nonResourceRules => [k8s_model:flowcontrol_v1alpha1_non_resource_policy_rule()]}.

%% io.k8s.api.scheduling.v1alpha1.PriorityClass
%% 
%% DEPRECATED - This group version of PriorityClass is deprecated by
%% scheduling.k8s.io/v1/PriorityClass. PriorityClass defines mapping
%% from a priority class name to the priority integer value. The
%% value can be any valid integer.
-type scheduling_v1alpha1_priority_class() ::
        #{value := integer(),
          preemptionPolicy => binary(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          globalDefault => boolean(),
          description => binary(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.CSIPersistentVolumeSource
%% 
%% Represents storage that is managed by an external CSI volume
%% driver (Beta feature)
-type core_v1_csi_persistent_volume_source() ::
        #{volumeHandle := binary(),
          volumeAttributes => #{_ := binary()},
          readOnly => boolean(),
          nodeStageSecretRef => k8s_model:core_v1_secret_reference(),
          nodePublishSecretRef => k8s_model:core_v1_secret_reference(),
          fsType => binary(),
          driver := binary(),
          controllerPublishSecretRef => k8s_model:core_v1_secret_reference(),
          controllerExpandSecretRef => k8s_model:core_v1_secret_reference()}.

%% io.k8s.api.core.v1.ProjectedVolumeSource
%% 
%% Represents a projected volume source
-type core_v1_projected_volume_source() ::
        #{sources => [k8s_model:core_v1_volume_projection()],
          defaultMode => integer()}.

%% io.k8s.api.admissionregistration.v1beta1.MutatingWebhook
%% 
%% MutatingWebhook describes an admission webhook and the resources
%% and operations it applies to.
-type admissionregistration_v1beta1_mutating_webhook() ::
        #{timeoutSeconds => integer(),
          sideEffects => binary(),
          rules => [k8s_model:admissionregistration_v1beta1_rule_with_operations()],
          reinvocationPolicy => binary(),
          objectSelector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          namespaceSelector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          name := binary(),
          matchPolicy => binary(),
          failurePolicy => binary(),
          clientConfig := k8s_model:admissionregistration_v1beta1_webhook_client_config(),
          admissionReviewVersions => [binary()]}.

%% io.k8s.api.discovery.v1beta1.EndpointSliceList
%% 
%% EndpointSliceList represents a list of endpoint slices
-type discovery_v1beta1_endpoint_slice_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:discovery_v1beta1_endpoint_slice()],
          apiVersion => binary()}.

%% io.k8s.api.storage.v1alpha1.VolumeError
%% 
%% VolumeError captures an error encountered during a volume
%% operation.
-type storage_v1alpha1_volume_error() ::
        #{time => k8s_model:apimachinery_apis_meta_v1_time(),
          message => binary()}.

%% io.k8s.api.core.v1.HTTPHeader
%% 
%% HTTPHeader describes a custom header to be used in HTTP probes
-type core_v1_http_header() ::
        #{value := binary(),
          name := binary()}.

%% io.k8s.api.apiserverinternal.v1alpha1.StorageVersionList
%% 
%% A list of StorageVersions.
-type apiserverinternal_v1alpha1_storage_version_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:apiserverinternal_v1alpha1_storage_version()],
          apiVersion => binary()}.

%% io.k8s.api.autoscaling.v2beta2.ContainerResourceMetricStatus
%% 
%% ContainerResourceMetricStatus indicates the current value of a
%% resource metric known to Kubernetes, as specified in requests and
%% limits, describing a single container in each pod in the current
%% scale target (e.g. CPU or memory). Such metrics are built in to
%% Kubernetes, and have special scaling options on top of those
%% available to normal per-pod metrics using the "pods" source.
-type autoscaling_v2beta2_container_resource_metric_status() ::
        #{name := binary(),
          current := k8s_model:autoscaling_v2beta2_metric_value_status(),
          container := binary()}.

%% io.k8s.api.extensions.v1beta1.HTTPIngressPath
%% 
%% HTTPIngressPath associates a path with a backend. Incoming urls
%% matching the path are forwarded to the backend.
-type extensions_v1beta1_http_ingress_path() ::
        #{pathType => binary(),
          path => binary(),
          backend := k8s_model:extensions_v1beta1_ingress_backend()}.

%% io.k8s.api.rbac.v1beta1.PolicyRule
%% 
%% PolicyRule holds information that describes a policy rule, but
%% does not contain information about who the rule applies to or
%% which namespace the rule applies to.
-type rbac_v1beta1_policy_rule() ::
        #{verbs := [binary()],
          resources => [binary()],
          resourceNames => [binary()],
          nonResourceURLs => [binary()],
          apiGroups => [binary()]}.

%% io.k8s.api.rbac.v1.Role
%% 
%% Role is a namespaced, logical grouping of PolicyRules that can be
%% referenced as a unit by a RoleBinding.
-type rbac_v1_role() ::
        #{rules => [k8s_model:rbac_v1_policy_rule()],
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.storage.v1.VolumeNodeResources
%% 
%% VolumeNodeResources is a set of resource limits for scheduling of
%% volumes.
-type storage_v1_volume_node_resources() ::
        #{count => integer()}.

%% io.k8s.api.extensions.v1beta1.IngressSpec
%% 
%% IngressSpec describes the Ingress the user wishes to exist.
-type extensions_v1beta1_ingress_spec() ::
        #{tls => [k8s_model:extensions_v1beta1_ingress_tls()],
          rules => [k8s_model:extensions_v1beta1_ingress_rule()],
          ingressClassName => binary(),
          backend => k8s_model:extensions_v1beta1_ingress_backend()}.

%% io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfigurationList
%% 
%% ValidatingWebhookConfigurationList is a list of
%% ValidatingWebhookConfiguration.
-type admissionregistration_v1beta1_validating_webhook_configuration_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:admissionregistration_v1beta1_validating_webhook_configuration()],
          apiVersion => binary()}.

%% io.k8s.api.rbac.v1.AggregationRule
%% 
%% AggregationRule describes how to locate ClusterRoles to aggregate
%% into the ClusterRole
-type rbac_v1_aggregation_rule() ::
        #{clusterRoleSelectors => [k8s_model:apimachinery_apis_meta_v1_label_selector()]}.

%% io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus
-type certificates_v1beta1_certificate_signing_request_status() ::
        #{conditions => [k8s_model:certificates_v1beta1_certificate_signing_request_condition()],
          certificate => binary()}.

%% io.k8s.api.apps.v1.ReplicaSetCondition
%% 
%% ReplicaSetCondition describes the state of a replica set at a
%% certain point.
-type apps_v1_replica_set_condition() ::
        #{type := binary(),
          status := binary(),
          reason => binary(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.rbac.v1alpha1.Role
%% 
%% Role is a namespaced, logical grouping of PolicyRules that can be
%% referenced as a unit by a RoleBinding. Deprecated in v1.17 in
%% favor of rbac.authorization.k8s.io/v1 Role, and will no longer be
%% served in v1.22.
-type rbac_v1alpha1_role() ::
        #{rules => [k8s_model:rbac_v1alpha1_policy_rule()],
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.apps.v1.StatefulSet
%% 
%% StatefulSet represents a set of pods with consistent identities.
%% Identities are defined as:
%% - Network: A single stable DNS and hostname.
%% - Storage: As many VolumeClaims as requested.
%% The StatefulSet guarantees that a given network identity will
%% always map to the same storage identity.
-type apps_v1_stateful_set() ::
        #{status => k8s_model:apps_v1_stateful_set_status(),
          spec => k8s_model:apps_v1_stateful_set_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.coordination.v1beta1.LeaseSpec
%% 
%% LeaseSpec is a specification of a Lease.
-type coordination_v1beta1_lease_spec() ::
        #{renewTime => k8s_model:apimachinery_apis_meta_v1_micro_time(),
          leaseTransitions => integer(),
          leaseDurationSeconds => integer(),
          holderIdentity => binary(),
          acquireTime => k8s_model:apimachinery_apis_meta_v1_micro_time()}.

%% io.k8s.api.storage.v1.StorageClass
%% 
%% StorageClass describes the parameters for a class of storage for
%% which PersistentVolumes can be dynamically provisioned.
%% 
%% StorageClasses are non-namespaced; the name of the storage class
%% according to etcd is in ObjectMeta.Name.
-type storage_v1_storage_class() ::
        #{volumeBindingMode => binary(),
          reclaimPolicy => binary(),
          provisioner := binary(),
          parameters => #{_ := binary()},
          mountOptions => [binary()],
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary(),
          allowedTopologies => [k8s_model:core_v1_topology_selector_term()],
          allowVolumeExpansion => boolean()}.

%% io.k8s.api.autoscaling.v2beta1.PodsMetricStatus
%% 
%% PodsMetricStatus indicates the current value of a metric
%% describing each pod in the current scale target (for example,
%% transactions-processed-per-second).
-type autoscaling_v2beta1_pods_metric_status() ::
        #{selector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          metricName := binary(),
          currentAverageValue := k8s_model:apimachinery_api_resource_quantity()}.

%% io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference
%% 
%% CrossVersionObjectReference contains enough information to let
%% you identify the referred resource.
-type autoscaling_v2beta1_cross_version_object_reference() ::
        #{name := binary(),
          kind := binary(),
          apiVersion => binary()}.

%% io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec
%% 
%% SelfSubjectAccessReviewSpec is a description of the access
%% request. Exactly one of ResourceAuthorizationAttributes and
%% NonResourceAuthorizationAttributes must be set
-type authorization_v1_self_subject_access_review_spec() ::
        #{resourceAttributes => k8s_model:authorization_v1_resource_attributes(),
          nonResourceAttributes => k8s_model:authorization_v1_non_resource_attributes()}.

%% io.k8s.api.core.v1.EventSource
%% 
%% EventSource contains information for an event.
-type core_v1_event_source() ::
        #{host => binary(),
          component => binary()}.

%% io.k8s.api.policy.v1beta1.IDRange
%% 
%% IDRange provides a min/max of an allowed range of IDs.
-type policy_v1beta1_id_range() ::
        #{min := integer(),
          max := integer()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails
%% 
%% StatusDetails is a set of additional properties that MAY be set
%% by the server to provide additional information about a response.
%% The Reason field of a Status object defines what attributes will
%% be set. Clients must ignore fields that do not match the defined
%% type of each attribute, and should assume that any attribute may
%% be empty, invalid, or under defined.
-type apimachinery_apis_meta_v1_status_details() ::
        #{uid => binary(),
          retryAfterSeconds => integer(),
          name => binary(),
          kind => binary(),
          group => binary(),
          causes => [k8s_model:apimachinery_apis_meta_v1_status_cause()]}.

%% io.k8s.api.authorization.v1beta1.ResourceAttributes
%% 
%% ResourceAttributes includes the authorization attributes
%% available for resource requests to the Authorizer interface
-type authorization_v1beta1_resource_attributes() ::
        #{version => binary(),
          verb => binary(),
          subresource => binary(),
          resource => binary(),
          namespace => binary(),
          name => binary(),
          group => binary()}.

%% io.k8s.api.authentication.v1.BoundObjectReference
%% 
%% BoundObjectReference is a reference to an object that a token is
%% bound to.
-type authentication_v1_bound_object_reference() ::
        #{uid => binary(),
          name => binary(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.authorization.v1beta1.SelfSubjectAccessReviewSpec
%% 
%% SelfSubjectAccessReviewSpec is a description of the access
%% request. Exactly one of ResourceAuthorizationAttributes and
%% NonResourceAuthorizationAttributes must be set
-type authorization_v1beta1_self_subject_access_review_spec() ::
        #{resourceAttributes => k8s_model:authorization_v1beta1_resource_attributes(),
          nonResourceAttributes => k8s_model:authorization_v1beta1_non_resource_attributes()}.

%% io.k8s.api.core.v1.PersistentVolumeClaimCondition
%% 
%% PersistentVolumeClaimCondition contails details about state of
%% pvc
-type core_v1_persistent_volume_claim_condition() ::
        #{type := binary(),
          status := binary(),
          reason => binary(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time(),
          lastProbeTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.apiserverinternal.v1alpha1.StorageVersion
%% 
%% 
%% Storage version of a specific resource.
-type apiserverinternal_v1alpha1_storage_version() ::
        #{status := k8s_model:apiserverinternal_v1alpha1_storage_version_status(),
          spec := k8s_model:apiserverinternal_v1alpha1_storage_version_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool
%% 
%% JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean
%% value. Defaults to true for the boolean property.
-type apiextensions_v1_json_schema_props_or_bool() ::
        json:value().

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray
%% 
%% JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a
%% string array.
-type apiextensions_v1_json_schema_props_or_string_array() ::
        json:value().

%% io.k8s.api.core.v1.ComponentStatusList
%% 
%% Status of all the conditions for the component as a list of
%% ComponentStatus objects. Deprecated: This API is deprecated in
%% v1.19+
-type core_v1_component_status_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:core_v1_component_status()],
          apiVersion => binary()}.

%% io.k8s.api.storage.v1beta1.TokenRequest
%% 
%% TokenRequest contains parameters of a service account token.
-type storage_v1beta1_token_request() ::
        #{expirationSeconds => integer(),
          audience := binary()}.

%% io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationCondition
%% 
%% PriorityLevelConfigurationCondition defines the condition of
%% priority level.
-type flowcontrol_v1beta1_priority_level_configuration_condition() ::
        #{type => binary(),
          status => binary(),
          reason => binary(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.core.v1.PodTemplateSpec
%% 
%% PodTemplateSpec describes the data a pod should have when created
%% from a template
-type core_v1_pod_template_spec() ::
        #{spec => k8s_model:core_v1_pod_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta
%% 
%% ObjectMeta is metadata that all persisted resources must have,
%% which includes all objects users must create.
-type apimachinery_apis_meta_v1_object_meta() ::
        #{uid => binary(),
          selfLink => binary(),
          resourceVersion => binary(),
          ownerReferences => [k8s_model:apimachinery_apis_meta_v1_owner_reference()],
          namespace => binary(),
          name => binary(),
          managedFields => [k8s_model:apimachinery_apis_meta_v1_managed_fields_entry()],
          labels => #{_ := binary()},
          generation => integer(),
          generateName => binary(),
          finalizers => [binary()],
          deletionTimestamp => k8s_model:apimachinery_apis_meta_v1_time(),
          deletionGracePeriodSeconds => integer(),
          creationTimestamp => k8s_model:apimachinery_apis_meta_v1_time(),
          clusterName => binary(),
          annotations => #{_ := binary()}}.

%% io.k8s.api.storage.v1.CSIDriverSpec
%% 
%% CSIDriverSpec is the specification of a CSIDriver.
-type storage_v1_csi_driver_spec() ::
        #{volumeLifecycleModes => [binary()],
          tokenRequests => [k8s_model:storage_v1_token_request()],
          storageCapacity => boolean(),
          requiresRepublish => boolean(),
          podInfoOnMount => boolean(),
          fsGroupPolicy => binary(),
          attachRequired => boolean()}.

%% io.k8s.api.apps.v1.DeploymentCondition
%% 
%% DeploymentCondition describes the state of a deployment at a
%% certain point.
-type apps_v1_deployment_condition() ::
        #{type := binary(),
          status := binary(),
          reason => binary(),
          message => binary(),
          lastUpdateTime => k8s_model:apimachinery_apis_meta_v1_time(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.flowcontrol.v1alpha1.ServiceAccountSubject
%% 
%% ServiceAccountSubject holds detailed information for
%% service-account-kind subject.
-type flowcontrol_v1alpha1_service_account_subject() ::
        #{namespace := binary(),
          name := binary()}.

%% io.k8s.api.extensions.v1beta1.IngressRule
%% 
%% IngressRule represents the rules mapping the paths under a
%% specified host to the related backend services. Incoming requests
%% are first evaluated for a host match, then routed to the backend
%% associated with the matching IngressRuleValue.
-type extensions_v1beta1_ingress_rule() ::
        #{http => k8s_model:extensions_v1beta1_http_ingress_rule_value(),
          host => binary()}.

%% io.k8s.api.apiserverinternal.v1alpha1.StorageVersionSpec
%% 
%% StorageVersionSpec is an empty spec.
-type apiserverinternal_v1alpha1_storage_version_spec() ::
        #{}.

%% io.k8s.api.authorization.v1.SubjectAccessReviewSpec
%% 
%% SubjectAccessReviewSpec is a description of the access request.
%% Exactly one of ResourceAuthorizationAttributes and
%% NonResourceAuthorizationAttributes must be set
-type authorization_v1_subject_access_review_spec() ::
        #{user => binary(),
          uid => binary(),
          resourceAttributes => k8s_model:authorization_v1_resource_attributes(),
          nonResourceAttributes => k8s_model:authorization_v1_non_resource_attributes(),
          groups => [binary()],
          extra => #{_ := [binary()]}}.

%% io.k8s.api.core.v1.Pod
%% 
%% Pod is a collection of containers that can run on a host. This
%% resource is created by clients and scheduled onto hosts.
-type core_v1_pod() ::
        #{status => k8s_model:core_v1_pod_status(),
          spec => k8s_model:core_v1_pod_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.storage.v1alpha1.CSIStorageCapacity
%% 
%% CSIStorageCapacity stores the result of one CSI GetCapacity call.
%% For a given StorageClass, this describes the available capacity
%% in a particular topology segment. This can be used when
%% considering where to instantiate new PersistentVolumes.
%% 
%% For example this can express things like: - StorageClass
%% "standard" has "1234 GiB" available in
%% "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd"
%% has "10 GiB" available in "kubernetes.io/hostname=knode-abc123"
%% 
%% The following three cases all imply that no capacity is available
%% for a certain combination: - no object exists with suitable
%% topology and storage class name - such an object exists, but the
%% capacity is unset - such an object exists, but the capacity is
%% zero
%% 
%% The producer of these objects can decide which approach is more
%% suitable.
%% 
%% This is an alpha feature and only available when the
%% CSIStorageCapacity feature is enabled.
-type storage_v1alpha1_csi_storage_capacity() ::
        #{storageClassName := binary(),
          nodeTopology => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          capacity => k8s_model:apimachinery_api_resource_quantity(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.NodeConfigSource
%% 
%% NodeConfigSource specifies a source of node configuration.
%% Exactly one subfield (excluding metadata) must be non-nil.
-type core_v1_node_config_source() ::
        #{configMap => k8s_model:core_v1_config_map_node_config_source()}.

%% io.k8s.apimachinery.pkg.version.Info
%% 
%% Info contains versioning information. how we'll want to
%% distribute that information.
-type apimachinery_version_info() ::
        #{platform := binary(),
          minor := binary(),
          major := binary(),
          goVersion := binary(),
          gitVersion := binary(),
          gitTreeState := binary(),
          gitCommit := binary(),
          compiler := binary(),
          buildDate := binary()}.

%% io.k8s.api.core.v1.PodAffinity
%% 
%% Pod affinity is a group of inter pod affinity scheduling rules.
-type core_v1_pod_affinity() ::
        #{requiredDuringSchedulingIgnoredDuringExecution => [k8s_model:core_v1_pod_affinity_term()],
          preferredDuringSchedulingIgnoredDuringExecution => [k8s_model:core_v1_weighted_pod_affinity_term()]}.

%% io.k8s.api.rbac.v1alpha1.ClusterRole
%% 
%% ClusterRole is a cluster level, logical grouping of PolicyRules
%% that can be referenced as a unit by a RoleBinding or
%% ClusterRoleBinding. Deprecated in v1.17 in favor of
%% rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be
%% served in v1.22.
-type rbac_v1alpha1_cluster_role() ::
        #{rules => [k8s_model:rbac_v1alpha1_policy_rule()],
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary(),
          aggregationRule => k8s_model:rbac_v1alpha1_aggregation_rule()}.

%% io.k8s.api.coordination.v1beta1.Lease
%% 
%% Lease defines a lease concept.
-type coordination_v1beta1_lease() ::
        #{spec => k8s_model:coordination_v1beta1_lease_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.networking.v1.Ingress
%% 
%% Ingress is a collection of rules that allow inbound connections
%% to reach the endpoints defined by a backend. An Ingress can be
%% configured to give services externally-reachable urls, load
%% balance traffic, terminate SSL, offer name based virtual hosting
%% etc.
-type networking_v1_ingress() ::
        #{status => k8s_model:networking_v1_ingress_status(),
          spec => k8s_model:networking_v1_ingress_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.FlexPersistentVolumeSource
%% 
%% FlexPersistentVolumeSource represents a generic persistent volume
%% resource that is provisioned/attached using an exec based plugin.
-type core_v1_flex_persistent_volume_source() ::
        #{secretRef => k8s_model:core_v1_secret_reference(),
          readOnly => boolean(),
          options => #{_ := binary()},
          fsType => binary(),
          driver := binary()}.

%% io.k8s.api.coordination.v1beta1.LeaseList
%% 
%% LeaseList is a list of Lease objects.
-type coordination_v1beta1_lease_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:coordination_v1beta1_lease()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.GitRepoVolumeSource
%% 
%% Represents a volume that is populated with the contents of a git
%% repository. Git repo volumes do not support ownership management.
%% Git repo volumes support SELinux relabeling.
%% 
%% DEPRECATED: GitRepo is deprecated. To provision a container with
%% a git repo, mount an EmptyDir into an InitContainer that clones
%% the repo using git, then mount the EmptyDir into the Pod's
%% container.
-type core_v1_git_repo_volume_source() ::
        #{revision => binary(),
          repository := binary(),
          directory => binary()}.

%% io.k8s.api.core.v1.SecretProjection
%% 
%% Adapts a secret into a projected volume.
%% 
%% The contents of the target Secret's Data field will be presented
%% in a projected volume as files using the keys in the Data field
%% as the file names. Note that this is identical to a secret volume
%% source without the default mode.
-type core_v1_secret_projection() ::
        #{optional => boolean(),
          name => binary(),
          items => [k8s_model:core_v1_key_to_path()]}.

%% io.k8s.api.apps.v1.DaemonSetStatus
%% 
%% DaemonSetStatus represents the current status of a daemon set.
-type apps_v1_daemon_set_status() ::
        #{updatedNumberScheduled => integer(),
          observedGeneration => integer(),
          numberUnavailable => integer(),
          numberReady := integer(),
          numberMisscheduled := integer(),
          numberAvailable => integer(),
          desiredNumberScheduled := integer(),
          currentNumberScheduled := integer(),
          conditions => [k8s_model:apps_v1_daemon_set_condition()],
          collisionCount => integer()}.

%% io.k8s.api.core.v1.EnvFromSource
%% 
%% EnvFromSource represents the source of a set of ConfigMaps
-type core_v1_env_from_source() ::
        #{secretRef => k8s_model:core_v1_secret_env_source(),
          prefix => binary(),
          configMapRef => k8s_model:core_v1_config_map_env_source()}.

%% io.k8s.api.flowcontrol.v1beta1.GroupSubject
%% 
%% GroupSubject holds detailed information for group-kind subject.
-type flowcontrol_v1beta1_group_subject() ::
        #{name := binary()}.

%% io.k8s.api.storage.v1beta1.VolumeAttachmentSource
%% 
%% VolumeAttachmentSource represents a volume that should be
%% attached. Right now only PersistenVolumes can be attached via
%% external attacher, in future we may allow also inline volumes in
%% pods. Exactly one member can be set.
-type storage_v1beta1_volume_attachment_source() ::
        #{persistentVolumeName => binary(),
          inlineVolumeSpec => k8s_model:core_v1_persistent_volume_spec()}.

%% io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList
%% 
%% ValidatingWebhookConfigurationList is a list of
%% ValidatingWebhookConfiguration.
-type admissionregistration_v1_validating_webhook_configuration_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:admissionregistration_v1_validating_webhook_configuration()],
          apiVersion => binary()}.

%% io.k8s.api.networking.v1.NetworkPolicySpec
%% 
%% NetworkPolicySpec provides the specification of a NetworkPolicy
-type networking_v1_network_policy_spec() ::
        #{policyTypes => [binary()],
          podSelector := k8s_model:apimachinery_apis_meta_v1_label_selector(),
          ingress => [k8s_model:networking_v1_network_policy_ingress_rule()],
          egress => [k8s_model:networking_v1_network_policy_egress_rule()]}.

%% io.k8s.api.core.v1.Volume
%% 
%% Volume represents a named volume in a pod that may be accessed by
%% any container in the pod.
-type core_v1_volume() ::
        #{vsphereVolume => k8s_model:core_v1_vsphere_virtual_disk_volume_source(),
          storageos => k8s_model:core_v1_storage_os_volume_source(),
          secret => k8s_model:core_v1_secret_volume_source(),
          scaleIO => k8s_model:core_v1_scale_io_volume_source(),
          rbd => k8s_model:core_v1_rbd_volume_source(),
          quobyte => k8s_model:core_v1_quobyte_volume_source(),
          projected => k8s_model:core_v1_projected_volume_source(),
          portworxVolume => k8s_model:core_v1_portworx_volume_source(),
          photonPersistentDisk => k8s_model:core_v1_photon_persistent_disk_volume_source(),
          persistentVolumeClaim => k8s_model:core_v1_persistent_volume_claim_volume_source(),
          nfs => k8s_model:core_v1_nfs_volume_source(),
          name := binary(),
          iscsi => k8s_model:core_v1_iscsi_volume_source(),
          hostPath => k8s_model:core_v1_host_path_volume_source(),
          glusterfs => k8s_model:core_v1_glusterfs_volume_source(),
          gitRepo => k8s_model:core_v1_git_repo_volume_source(),
          gcePersistentDisk => k8s_model:core_v1_gce_persistent_disk_volume_source(),
          flocker => k8s_model:core_v1_flocker_volume_source(),
          flexVolume => k8s_model:core_v1_flex_volume_source(),
          fc => k8s_model:core_v1_fc_volume_source(),
          ephemeral => k8s_model:core_v1_ephemeral_volume_source(),
          emptyDir => k8s_model:core_v1_empty_dir_volume_source(),
          downwardAPI => k8s_model:core_v1_downward_api_volume_source(),
          csi => k8s_model:core_v1_csi_volume_source(),
          configMap => k8s_model:core_v1_config_map_volume_source(),
          cinder => k8s_model:core_v1_cinder_volume_source(),
          cephfs => k8s_model:core_v1_ceph_fs_volume_source(),
          azureFile => k8s_model:core_v1_azure_file_volume_source(),
          azureDisk => k8s_model:core_v1_azure_disk_volume_source(),
          awsElasticBlockStore => k8s_model:core_v1_aws_elastic_block_store_volume_source()}.

%% io.k8s.api.core.v1.SecretList
%% 
%% SecretList is a list of Secret.
-type core_v1_secret_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:core_v1_secret()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.GCEPersistentDiskVolumeSource
%% 
%% Represents a Persistent Disk resource in Google Compute Engine.
%% 
%% A GCE PD must exist before mounting to a container. The disk must
%% also be in the same GCE project and zone as the kubelet. A GCE PD
%% can only be mounted as read/write once or read-only many times.
%% GCE PDs support ownership management and SELinux relabeling.
-type core_v1_gce_persistent_disk_volume_source() ::
        #{readOnly => boolean(),
          pdName := binary(),
          partition => integer(),
          fsType => binary()}.

%% io.k8s.api.core.v1.WeightedPodAffinityTerm
%% 
%% The weights of all of the matched WeightedPodAffinityTerm fields
%% are added per-node to find the most preferred node(s)
-type core_v1_weighted_pod_affinity_term() ::
        #{weight := integer(),
          podAffinityTerm := k8s_model:core_v1_pod_affinity_term()}.

%% io.k8s.api.core.v1.NamespaceStatus
%% 
%% NamespaceStatus is information about the current status of a
%% Namespace.
-type core_v1_namespace_status() ::
        #{phase => binary(),
          conditions => [k8s_model:core_v1_namespace_condition()]}.

%% io.k8s.api.core.v1.PodList
%% 
%% PodList is a list of Pods.
-type core_v1_pod_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:core_v1_pod()],
          apiVersion => binary()}.

%% io.k8s.api.flowcontrol.v1beta1.UserSubject
%% 
%% UserSubject holds detailed information for user-kind subject.
-type flowcontrol_v1beta1_user_subject() ::
        #{name := binary()}.

%% io.k8s.api.apps.v1.StatefulSetList
%% 
%% StatefulSetList is a collection of StatefulSets.
-type apps_v1_stateful_set_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:apps_v1_stateful_set()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.EphemeralContainer
%% 
%% An EphemeralContainer is a container that may be added
%% temporarily to an existing pod for user-initiated activities such
%% as debugging. Ephemeral containers have no resource or scheduling
%% guarantees, and they will not be restarted when they exit or when
%% a pod is removed or restarted. If an ephemeral container causes a
%% pod to exceed its resource allocation, the pod may be evicted.
%% Ephemeral containers may not be added by directly updating the
%% pod spec. They must be added via the pod's ephemeralcontainers
%% subresource, and they will appear in the pod spec once added.
%% This is an alpha feature enabled by the EphemeralContainers
%% feature flag.
-type core_v1_ephemeral_container() ::
        #{workingDir => binary(),
          volumeMounts => [k8s_model:core_v1_volume_mount()],
          volumeDevices => [k8s_model:core_v1_volume_device()],
          tty => boolean(),
          terminationMessagePolicy => binary(),
          terminationMessagePath => binary(),
          targetContainerName => binary(),
          stdinOnce => boolean(),
          stdin => boolean(),
          startupProbe => k8s_model:core_v1_probe(),
          securityContext => k8s_model:core_v1_security_context(),
          resources => k8s_model:core_v1_resource_requirements(),
          readinessProbe => k8s_model:core_v1_probe(),
          ports => [k8s_model:core_v1_container_port()],
          name := binary(),
          livenessProbe => k8s_model:core_v1_probe(),
          lifecycle => k8s_model:core_v1_lifecycle(),
          imagePullPolicy => binary(),
          image => binary(),
          envFrom => [k8s_model:core_v1_env_from_source()],
          env => [k8s_model:core_v1_env_var()],
          command => [binary()],
          args => [binary()]}.

%% io.k8s.api.core.v1.VolumeDevice
%% 
%% volumeDevice describes a mapping of a raw block device within a
%% container.
-type core_v1_volume_device() ::
        #{name := binary(),
          devicePath := binary()}.

%% io.k8s.api.core.v1.Capabilities
%% 
%% Adds and removes POSIX capabilities from running containers.
-type core_v1_capabilities() ::
        #{drop => [binary()],
          add => [binary()]}.

%% io.k8s.api.policy.v1beta1.PodDisruptionBudget
%% 
%% PodDisruptionBudget is an object to define the max disruption
%% that can be caused to a collection of pods
-type policy_v1beta1_pod_disruption_budget() ::
        #{status => k8s_model:policy_v1beta1_pod_disruption_budget_status(),
          spec => k8s_model:policy_v1beta1_pod_disruption_budget_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.flowcontrol.v1beta1.LimitResponse
%% 
%% LimitResponse defines how to handle requests that can not be
%% executed right now.
-type flowcontrol_v1beta1_limit_response() ::
        #{type := binary(),
          queuing => k8s_model:flowcontrol_v1beta1_queuing_configuration()}.

%% io.k8s.api.core.v1.NodeStatus
%% 
%% NodeStatus is information about the current status of a node.
-type core_v1_node_status() ::
        #{volumesInUse => [binary()],
          volumesAttached => [k8s_model:core_v1_attached_volume()],
          phase => binary(),
          nodeInfo => k8s_model:core_v1_node_system_info(),
          images => [k8s_model:core_v1_container_image()],
          daemonEndpoints => k8s_model:core_v1_node_daemon_endpoints(),
          config => k8s_model:core_v1_node_config_status(),
          conditions => [k8s_model:core_v1_node_condition()],
          capacity => #{_ := k8s_model:apimachinery_api_resource_quantity()},
          allocatable => #{_ := k8s_model:apimachinery_api_resource_quantity()},
          addresses => [k8s_model:core_v1_node_address()]}.

%% io.k8s.api.flowcontrol.v1beta1.FlowSchema
%% 
%% FlowSchema defines the schema of a group of flows. Note that a
%% flow is made up of a set of inbound API requests with similar
%% attributes and is identified by a pair of strings: the name of
%% the FlowSchema and a "flow distinguisher".
-type flowcontrol_v1beta1_flow_schema() ::
        #{status => k8s_model:flowcontrol_v1beta1_flow_schema_status(),
          spec => k8s_model:flowcontrol_v1beta1_flow_schema_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.storage.v1beta1.CSINode
%% 
%% DEPRECATED - This group version of CSINode is deprecated by
%% storage/v1/CSINode. See the release notes for more information.
%% CSINode holds information about all CSI drivers installed on a
%% node. CSI drivers do not need to create the CSINode object
%% directly. As long as they use the node-driver-registrar sidecar
%% container, the kubelet will automatically populate the CSINode
%% object for the CSI driver as part of kubelet plugin registration.
%% CSINode has the same name as a node. If the object is missing, it
%% means either there are no CSI Drivers available on the node, or
%% the Kubelet version is low enough that it doesn't create this
%% object. CSINode has an OwnerReference that points to the
%% corresponding node object.
-type storage_v1beta1_csi_node() ::
        #{spec := k8s_model:storage_v1beta1_csi_node_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.WindowsSecurityContextOptions
%% 
%% WindowsSecurityContextOptions contain Windows-specific options
%% and credentials.
-type core_v1_windows_security_context_options() ::
        #{runAsUserName => binary(),
          gmsaCredentialSpecName => binary(),
          gmsaCredentialSpec => binary()}.

%% io.k8s.api.storage.v1.VolumeAttachmentSpec
%% 
%% VolumeAttachmentSpec is the specification of a VolumeAttachment
%% request.
-type storage_v1_volume_attachment_spec() ::
        #{source := k8s_model:storage_v1_volume_attachment_source(),
          nodeName := binary(),
          attacher := binary()}.

%% io.k8s.api.apiserverinternal.v1alpha1.StorageVersionCondition
%% 
%% Describes the state of the storageVersion at a certain point.
-type apiserverinternal_v1alpha1_storage_version_condition() ::
        #{type := binary(),
          status := binary(),
          reason := binary(),
          observedGeneration => integer(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.authorization.v1.SubjectAccessReview
%% 
%% SubjectAccessReview checks whether or not a user or group can
%% perform an action.
-type authorization_v1_subject_access_review() ::
        #{status => k8s_model:authorization_v1_subject_access_review_status(),
          spec := k8s_model:authorization_v1_subject_access_review_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.apimachinery.pkg.util.intstr.IntOrString
%% 
%% IntOrString is a type that can hold an int32 or a string. When
%% used in JSON or YAML marshalling and unmarshalling, it produces
%% or consumes the inner type. This allows you to have, for example,
%% a JSON field that can accept a name or number.
-type apimachinery_util_intstr_int_or_string() ::
        binary().

%% io.k8s.api.core.v1.EndpointsList
%% 
%% EndpointsList is a list of endpoints.
-type core_v1_endpoints_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:core_v1_endpoints()],
          apiVersion => binary()}.

%% io.k8s.api.apps.v1.ReplicaSet
%% 
%% ReplicaSet ensures that a specified number of pod replicas are
%% running at any given time.
-type apps_v1_replica_set() ::
        #{status => k8s_model:apps_v1_replica_set_status(),
          spec => k8s_model:apps_v1_replica_set_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrStringArray
%% 
%% JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a
%% string array.
-type apiextensions_v1beta1_json_schema_props_or_string_array() ::
        json:value().

%% io.k8s.api.flowcontrol.v1alpha1.FlowSchema
%% 
%% FlowSchema defines the schema of a group of flows. Note that a
%% flow is made up of a set of inbound API requests with similar
%% attributes and is identified by a pair of strings: the name of
%% the FlowSchema and a "flow distinguisher".
-type flowcontrol_v1alpha1_flow_schema() ::
        #{status => k8s_model:flowcontrol_v1alpha1_flow_schema_status(),
          spec => k8s_model:flowcontrol_v1alpha1_flow_schema_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.networking.v1.IngressClassList
%% 
%% IngressClassList is a collection of IngressClasses.
-type networking_v1_ingress_class_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:networking_v1_ingress_class()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.Endpoints
%% 
%% Endpoints is a collection of endpoints that implement the actual
%% service. Example:
%% Name: "mysvc",
%% Subsets: [
%% {
%% Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
%% Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
%% },
%% {
%% Addresses: [{"ip": "10.10.3.3"}],
%% Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
%% },
%% ]
-type core_v1_endpoints() ::
        #{subsets => [k8s_model:core_v1_endpoint_subset()],
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource
%% 
%% Represents a Persistent Disk resource in AWS.
%% 
%% An AWS EBS disk must exist before mounting to a container. The
%% disk must also be in the same AWS zone as the kubelet. An AWS EBS
%% disk can only be mounted as read/write once. AWS EBS volumes
%% support ownership management and SELinux relabeling.
-type core_v1_aws_elastic_block_store_volume_source() ::
        #{volumeID := binary(),
          readOnly => boolean(),
          partition => integer(),
          fsType => binary()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup
%% 
%% APIGroup contains the name, the supported versions, and the
%% preferred version of a group.
-type apimachinery_apis_meta_v1_api_group() ::
        #{versions := [k8s_model:apimachinery_apis_meta_v1_group_version_for_discovery()],
          serverAddressByClientCIDRs => [k8s_model:apimachinery_apis_meta_v1_server_address_by_client_cidr()],
          preferredVersion => k8s_model:apimachinery_apis_meta_v1_group_version_for_discovery(),
          name := binary(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.authorization.v1beta1.ResourceRule
%% 
%% ResourceRule is the list of actions the subject is allowed to
%% perform on resources. The list ordering isn't significant, may
%% contain duplicates, and possibly be incomplete.
-type authorization_v1beta1_resource_rule() ::
        #{verbs := [binary()],
          resources => [binary()],
          resourceNames => [binary()],
          apiGroups => [binary()]}.

%% io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationSpec
%% 
%% PriorityLevelConfigurationSpec specifies the configuration of a
%% priority level.
-type flowcontrol_v1beta1_priority_level_configuration_spec() ::
        #{type := binary(),
          limited => k8s_model:flowcontrol_v1beta1_limited_priority_level_configuration()}.

%% io.k8s.api.discovery.v1beta1.Endpoint
%% 
%% Endpoint represents a single logical "backend" implementing a
%% service.
-type discovery_v1beta1_endpoint() ::
        #{topology => #{_ := binary()},
          targetRef => k8s_model:core_v1_object_reference(),
          nodeName => binary(),
          hostname => binary(),
          conditions => k8s_model:discovery_v1beta1_endpoint_conditions(),
          addresses := [binary()]}.

%% io.k8s.api.core.v1.ScaleIOVolumeSource
%% 
%% ScaleIOVolumeSource represents a persistent ScaleIO volume
-type core_v1_scale_io_volume_source() ::
        #{volumeName => binary(),
          system := binary(),
          storagePool => binary(),
          storageMode => binary(),
          sslEnabled => boolean(),
          secretRef := k8s_model:core_v1_local_object_reference(),
          readOnly => boolean(),
          protectionDomain => binary(),
          gateway := binary(),
          fsType => binary()}.

%% io.k8s.api.networking.v1.IngressClass
%% 
%% IngressClass represents the class of the Ingress, referenced by
%% the Ingress Spec. The
%% `ingressclass.kubernetes.io/is-default-class` annotation can be
%% used to indicate that an IngressClass should be considered
%% default. When a single IngressClass resource has this annotation
%% set to true, new Ingress resources without a class specified will
%% be assigned this default class.
-type networking_v1_ingress_class() ::
        #{spec => k8s_model:networking_v1_ingress_class_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerBehavior
%% 
%% HorizontalPodAutoscalerBehavior configures the scaling behavior
%% of the target in both Up and Down directions (scaleUp and
%% scaleDown fields respectively).
-type autoscaling_v2beta2_horizontal_pod_autoscaler_behavior() ::
        #{scaleUp => k8s_model:autoscaling_v2beta2_hpa_scaling_rules(),
          scaleDown => k8s_model:autoscaling_v2beta2_hpa_scaling_rules()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionNames
%% 
%% CustomResourceDefinitionNames indicates the names to serve this
%% CustomResourceDefinition
-type apiextensions_v1beta1_custom_resource_definition_names() ::
        #{singular => binary(),
          shortNames => [binary()],
          plural := binary(),
          listKind => binary(),
          kind := binary(),
          categories => [binary()]}.

%% io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration
%% 
%% ValidatingWebhookConfiguration describes the configuration of and
%% admission webhook that accept or reject and object without
%% changing it. Deprecated in v1.16, planned for removal in v1.19.
%% Use admissionregistration.k8s.io/v1
%% ValidatingWebhookConfiguration instead.
-type admissionregistration_v1beta1_validating_webhook_configuration() ::
        #{webhooks => [k8s_model:admissionregistration_v1beta1_validating_webhook()],
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.Namespace
%% 
%% Namespace provides a scope for Names. Use of multiple namespaces
%% is optional.
-type core_v1_namespace() ::
        #{status => k8s_model:core_v1_namespace_status(),
          spec => k8s_model:core_v1_namespace_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.apps.v1.StatefulSetStatus
%% 
%% StatefulSetStatus represents the current state of a StatefulSet.
-type apps_v1_stateful_set_status() ::
        #{updatedReplicas => integer(),
          updateRevision => binary(),
          replicas := integer(),
          readyReplicas => integer(),
          observedGeneration => integer(),
          currentRevision => binary(),
          currentReplicas => integer(),
          conditions => [k8s_model:apps_v1_stateful_set_condition()],
          collisionCount => integer()}.

%% io.k8s.api.networking.v1beta1.IngressSpec
%% 
%% IngressSpec describes the Ingress the user wishes to exist.
-type networking_v1beta1_ingress_spec() ::
        #{tls => [k8s_model:networking_v1beta1_ingress_tls()],
          rules => [k8s_model:networking_v1beta1_ingress_rule()],
          ingressClassName => binary(),
          backend => k8s_model:networking_v1beta1_ingress_backend()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.WebhookClientConfig
%% 
%% WebhookClientConfig contains the information to make a TLS
%% connection with the webhook.
-type apiextensions_v1beta1_webhook_client_config() ::
        #{url => binary(),
          service => k8s_model:apiextensions_v1beta1_service_reference(),
          caBundle => binary()}.

%% io.k8s.api.authentication.v1beta1.UserInfo
%% 
%% UserInfo holds the information about the user needed to implement
%% the user.Info interface.
-type authentication_v1beta1_user_info() ::
        #{username => binary(),
          uid => binary(),
          groups => [binary()],
          extra => #{_ := [binary()]}}.

%% io.k8s.api.policy.v1beta1.PodSecurityPolicySpec
%% 
%% PodSecurityPolicySpec defines the policy enforced.
-type policy_v1beta1_pod_security_policy_spec() ::
        #{volumes => [binary()],
          supplementalGroups := k8s_model:policy_v1beta1_supplemental_groups_strategy_options(),
          seLinux := k8s_model:policy_v1beta1_se_linux_strategy_options(),
          runtimeClass => k8s_model:policy_v1beta1_runtime_class_strategy_options(),
          runAsUser := k8s_model:policy_v1beta1_run_as_user_strategy_options(),
          runAsGroup => k8s_model:policy_v1beta1_run_as_group_strategy_options(),
          requiredDropCapabilities => [binary()],
          readOnlyRootFilesystem => boolean(),
          privileged => boolean(),
          hostPorts => [k8s_model:policy_v1beta1_host_port_range()],
          hostPID => boolean(),
          hostNetwork => boolean(),
          hostIPC => boolean(),
          fsGroup := k8s_model:policy_v1beta1_fs_group_strategy_options(),
          forbiddenSysctls => [binary()],
          defaultAllowPrivilegeEscalation => boolean(),
          defaultAddCapabilities => [binary()],
          allowedUnsafeSysctls => [binary()],
          allowedProcMountTypes => [binary()],
          allowedHostPaths => [k8s_model:policy_v1beta1_allowed_host_path()],
          allowedFlexVolumes => [k8s_model:policy_v1beta1_allowed_flex_volume()],
          allowedCapabilities => [binary()],
          allowedCSIDrivers => [k8s_model:policy_v1beta1_allowed_csi_driver()],
          allowPrivilegeEscalation => boolean()}.

%% io.k8s.api.discovery.v1beta1.EndpointPort
%% 
%% EndpointPort represents a Port used by an EndpointSlice
-type discovery_v1beta1_endpoint_port() ::
        #{protocol => binary(),
          port => integer(),
          name => binary(),
          appProtocol => binary()}.

%% io.k8s.api.flowcontrol.v1alpha1.FlowSchemaCondition
%% 
%% FlowSchemaCondition describes conditions for a FlowSchema.
-type flowcontrol_v1alpha1_flow_schema_condition() ::
        #{type => binary(),
          status => binary(),
          reason => binary(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.flowcontrol.v1alpha1.FlowSchemaStatus
%% 
%% FlowSchemaStatus represents the current state of a FlowSchema.
-type flowcontrol_v1alpha1_flow_schema_status() ::
        #{conditions => [k8s_model:flowcontrol_v1alpha1_flow_schema_condition()]}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition
%% 
%% CustomResourceDefinition represents a resource that should be
%% exposed on the API server. Its name MUST be in the format
%% <.spec.name>.<.spec.group>. Deprecated in v1.16, planned for
%% removal in v1.22. Use apiextensions.k8s.io/v1
%% CustomResourceDefinition instead.
-type apiextensions_v1beta1_custom_resource_definition() ::
        #{status => k8s_model:apiextensions_v1beta1_custom_resource_definition_status(),
          spec := k8s_model:apiextensions_v1beta1_custom_resource_definition_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion
%% 
%% CustomResourceConversion describes how to convert different
%% versions of a CR.
-type apiextensions_v1_custom_resource_conversion() ::
        #{webhook => k8s_model:apiextensions_v1_webhook_conversion(),
          strategy := binary()}.

%% io.k8s.api.autoscaling.v2beta2.ExternalMetricStatus
%% 
%% ExternalMetricStatus indicates the current value of a global
%% metric not associated with any Kubernetes object.
-type autoscaling_v2beta2_external_metric_status() ::
        #{metric := k8s_model:autoscaling_v2beta2_metric_identifier(),
          current := k8s_model:autoscaling_v2beta2_metric_value_status()}.

%% io.k8s.api.core.v1.ServicePort
%% 
%% ServicePort contains information on service's port.
-type core_v1_service_port() ::
        #{targetPort => k8s_model:apimachinery_util_intstr_int_or_string(),
          protocol => binary(),
          port := integer(),
          nodePort => integer(),
          name => binary(),
          appProtocol => binary()}.

%% io.k8s.api.core.v1.ConfigMapEnvSource
%% 
%% ConfigMapEnvSource selects a ConfigMap to populate the
%% environment variables with.
%% 
%% The contents of the target ConfigMap's Data field will represent
%% the key-value pairs as environment variables.
-type core_v1_config_map_env_source() ::
        #{optional => boolean(),
          name => binary()}.

%% io.k8s.api.networking.v1.IngressBackend
%% 
%% IngressBackend describes all endpoints for a given service and
%% port.
-type networking_v1_ingress_backend() ::
        #{service => k8s_model:networking_v1_ingress_service_backend(),
          resource => k8s_model:core_v1_typed_local_object_reference()}.

%% io.k8s.api.core.v1.Lifecycle
%% 
%% Lifecycle describes actions that the management system should
%% take in response to container lifecycle events. For the PostStart
%% and PreStop lifecycle handlers, management of the container
%% blocks until the action is complete, unless the container process
%% fails, in which case the handler is aborted.
-type core_v1_lifecycle() ::
        #{preStop => k8s_model:core_v1_handler(),
          postStart => k8s_model:core_v1_handler()}.

%% io.k8s.api.storage.v1.VolumeError
%% 
%% VolumeError captures an error encountered during a volume
%% operation.
-type storage_v1_volume_error() ::
        #{time => k8s_model:apimachinery_apis_meta_v1_time(),
          message => binary()}.

%% io.k8s.api.core.v1.Toleration
%% 
%% The pod this Toleration is attached to tolerates any taint that
%% matches the triple <key,value,effect> using the matching operator
%% <operator>.
-type core_v1_toleration() ::
        #{value => binary(),
          tolerationSeconds => integer(),
          operator => binary(),
          key => binary(),
          effect => binary()}.

%% io.k8s.api.authentication.v1.TokenReviewSpec
%% 
%% TokenReviewSpec is a description of the token authentication
%% request.
-type authentication_v1_token_review_spec() ::
        #{token => binary(),
          audiences => [binary()]}.

%% io.k8s.api.core.v1.PodTemplateList
%% 
%% PodTemplateList is a list of PodTemplates.
-type core_v1_pod_template_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:core_v1_pod_template()],
          apiVersion => binary()}.

%% io.k8s.api.storage.v1beta1.VolumeAttachmentSpec
%% 
%% VolumeAttachmentSpec is the specification of a VolumeAttachment
%% request.
-type storage_v1beta1_volume_attachment_spec() ::
        #{source := k8s_model:storage_v1beta1_volume_attachment_source(),
          nodeName := binary(),
          attacher := binary()}.

%% io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource
%% 
%% Represents a Photon Controller persistent disk resource.
-type core_v1_photon_persistent_disk_volume_source() ::
        #{pdID := binary(),
          fsType => binary()}.

%% io.k8s.api.authorization.v1.SelfSubjectAccessReview
%% 
%% SelfSubjectAccessReview checks whether or the current user can
%% perform an action. Not filling in a spec.namespace means "in all
%% namespaces". Self is a special case, because users should always
%% be able to check whether they can perform an action
-type authorization_v1_self_subject_access_review() ::
        #{status => k8s_model:authorization_v1_subject_access_review_status(),
          spec := k8s_model:authorization_v1_self_subject_access_review_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.networking.v1.IngressClassSpec
%% 
%% IngressClassSpec provides information about the class of an
%% Ingress.
-type networking_v1_ingress_class_spec() ::
        #{parameters => k8s_model:core_v1_typed_local_object_reference(),
          controller => binary()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions
%% 
%% DeleteOptions may be provided when deleting an API object.
-type apimachinery_apis_meta_v1_delete_options() ::
        #{propagationPolicy => binary(),
          preconditions => k8s_model:apimachinery_apis_meta_v1_preconditions(),
          orphanDependents => boolean(),
          kind => binary(),
          gracePeriodSeconds => integer(),
          dryRun => [binary()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.AzureFilePersistentVolumeSource
%% 
%% AzureFile represents an Azure File Service mount on the host and
%% bind mount to the pod.
-type core_v1_azure_file_persistent_volume_source() ::
        #{shareName := binary(),
          secretNamespace => binary(),
          secretName := binary(),
          readOnly => boolean()}.

%% io.k8s.api.apps.v1.DeploymentList
%% 
%% DeploymentList is a list of Deployments.
-type apps_v1_deployment_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:apps_v1_deployment()],
          apiVersion => binary()}.

%% io.k8s.api.events.v1.EventSeries
%% 
%% EventSeries contain information on series of events, i.e. thing
%% that was/is happening continuously for some time. How often to
%% update the EventSeries is up to the event reporters. The default
%% event reporter in
%% "k8s.io/client-go/tools/events/event_broadcaster.go" shows how
%% this struct is updated on heartbeats and can guide customized
%% reporter implementations.
-type events_v1_event_series() ::
        #{lastObservedTime := k8s_model:apimachinery_apis_meta_v1_micro_time(),
          count := integer()}.

%% io.k8s.api.batch.v1.JobList
%% 
%% JobList is a collection of jobs.
-type batch_v1_job_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:batch_v1_job()],
          apiVersion => binary()}.

%% io.k8s.api.authentication.v1.UserInfo
%% 
%% UserInfo holds the information about the user needed to implement
%% the user.Info interface.
-type authentication_v1_user_info() ::
        #{username => binary(),
          uid => binary(),
          groups => [binary()],
          extra => #{_ := [binary()]}}.

%% io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService
%% 
%% APIService represents a server for a particular GroupVersion.
%% Name must be "version.group".
-type apiregistration_v1beta1_api_service() ::
        #{status => k8s_model:apiregistration_v1beta1_api_service_status(),
          spec => k8s_model:apiregistration_v1beta1_api_service_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrBool
%% 
%% JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean
%% value. Defaults to true for the boolean property.
-type apiextensions_v1beta1_json_schema_props_or_bool() ::
        json:value().

%% io.k8s.api.authorization.v1.NonResourceRule
%% 
%% NonResourceRule holds information that describes a rule for the
%% non-resource
-type authorization_v1_non_resource_rule() ::
        #{verbs := [binary()],
          nonResourceURLs => [binary()]}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec
%% 
%% CustomResourceDefinitionSpec describes how a user wants their
%% resource to appear
-type apiextensions_v1_custom_resource_definition_spec() ::
        #{versions := [k8s_model:apiextensions_v1_custom_resource_definition_version()],
          scope := binary(),
          preserveUnknownFields => boolean(),
          names := k8s_model:apiextensions_v1_custom_resource_definition_names(),
          group := binary(),
          conversion => k8s_model:apiextensions_v1_custom_resource_conversion()}.

%% io.k8s.api.networking.v1.NetworkPolicyPeer
%% 
%% NetworkPolicyPeer describes a peer to allow traffic to/from. Only
%% certain combinations of fields are allowed
-type networking_v1_network_policy_peer() ::
        #{podSelector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          namespaceSelector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          ipBlock => k8s_model:networking_v1_ip_block()}.

%% io.k8s.api.core.v1.EndpointSubset
%% 
%% EndpointSubset is a group of addresses with a common set of
%% ports. The expanded set of endpoints is the Cartesian product of
%% Addresses x Ports. For example, given:
%% {
%% Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
%% Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
%% }
%% The resulting set of endpoints can be viewed as:
%% a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
%% b: [ 10.10.1.1:309, 10.10.2.2:309 ]
-type core_v1_endpoint_subset() ::
        #{ports => [k8s_model:core_v1_endpoint_port()],
          notReadyAddresses => [k8s_model:core_v1_endpoint_address()],
          addresses => [k8s_model:core_v1_endpoint_address()]}.

%% io.k8s.api.core.v1.LoadBalancerIngress
%% 
%% LoadBalancerIngress represents the status of a load-balancer
%% ingress point: traffic intended for the service should be sent to
%% an ingress point.
-type core_v1_load_balancer_ingress() ::
        #{ports => [k8s_model:core_v1_port_status()],
          ip => binary(),
          hostname => binary()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime
%% 
%% MicroTime is version of Time with microsecond level precision.
-type apimachinery_apis_meta_v1_micro_time() ::
        binary().

%% io.k8s.api.discovery.v1beta1.EndpointSlice
%% 
%% EndpointSlice represents a subset of the endpoints that implement
%% a service. For a given service there may be multiple
%% EndpointSlice objects, selected by labels, which must be joined
%% to produce the full set of endpoints.
-type discovery_v1beta1_endpoint_slice() ::
        #{ports => [k8s_model:discovery_v1beta1_endpoint_port()],
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          endpoints := [k8s_model:discovery_v1beta1_endpoint()],
          apiVersion => binary(),
          addressType := binary()}.

%% io.k8s.api.autoscaling.v2beta2.ContainerResourceMetricSource
%% 
%% ContainerResourceMetricSource indicates how to scale on a
%% resource metric known to Kubernetes, as specified in requests and
%% limits, describing each pod in the current scale target (e.g. CPU
%% or memory). The values will be averaged together before being
%% compared to the target. Such metrics are built in to Kubernetes,
%% and have special scaling options on top of those available to
%% normal per-pod metrics using the "pods" source. Only one "target"
%% type should be set.
-type autoscaling_v2beta2_container_resource_metric_source() ::
        #{target := k8s_model:autoscaling_v2beta2_metric_target(),
          name := binary(),
          container := binary()}.

%% io.k8s.api.core.v1.EmptyDirVolumeSource
%% 
%% Represents an empty directory for a pod. Empty directory volumes
%% support ownership management and SELinux relabeling.
-type core_v1_empty_dir_volume_source() ::
        #{sizeLimit => k8s_model:apimachinery_api_resource_quantity(),
          medium => binary()}.

%% io.k8s.api.core.v1.PodCondition
%% 
%% PodCondition contains details for the current condition of this
%% pod.
-type core_v1_pod_condition() ::
        #{type := binary(),
          status := binary(),
          reason => binary(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time(),
          lastProbeTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.authorization.v1beta1.SelfSubjectRulesReviewSpec
-type authorization_v1beta1_self_subject_rules_review_spec() ::
        #{namespace => binary()}.

%% io.k8s.api.certificates.v1.CertificateSigningRequestList
%% 
%% CertificateSigningRequestList is a collection of
%% CertificateSigningRequest objects
-type certificates_v1_certificate_signing_request_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:certificates_v1_certificate_signing_request()],
          apiVersion => binary()}.

%% io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec
%% 
%% APIServiceSpec contains information for locating and
%% communicating with a server. Only https is supported, though you
%% are able to disable certificate verification.
-type apiregistration_v1_api_service_spec() ::
        #{versionPriority := integer(),
          version => binary(),
          service => k8s_model:apiregistration_v1_service_reference(),
          insecureSkipTLSVerify => boolean(),
          groupPriorityMinimum := integer(),
          group => binary(),
          caBundle => binary()}.

%% io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationCondition
%% 
%% PriorityLevelConfigurationCondition defines the condition of
%% priority level.
-type flowcontrol_v1alpha1_priority_level_configuration_condition() ::
        #{type => binary(),
          status => binary(),
          reason => binary(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.core.v1.HostAlias
%% 
%% HostAlias holds the mapping between IP and hostnames that will be
%% injected as an entry in the pod's hosts file.
-type core_v1_host_alias() ::
        #{ip => binary(),
          hostnames => [binary()]}.

%% io.k8s.api.flowcontrol.v1alpha1.Subject
%% 
%% Subject matches the originator of a request, as identified by the
%% request authentication system. There are three ways of matching
%% an originator; by user, group, or service account.
-type flowcontrol_v1alpha1_subject() ::
        #{user => k8s_model:flowcontrol_v1alpha1_user_subject(),
          serviceAccount => k8s_model:flowcontrol_v1alpha1_service_account_subject(),
          kind := binary(),
          group => k8s_model:flowcontrol_v1alpha1_group_subject()}.

%% io.k8s.api.autoscaling.v2beta2.MetricValueStatus
%% 
%% MetricValueStatus holds the current value for a metric
-type autoscaling_v2beta2_metric_value_status() ::
        #{value => k8s_model:apimachinery_api_resource_quantity(),
          averageValue => k8s_model:apimachinery_api_resource_quantity(),
          averageUtilization => integer()}.

%% io.k8s.api.coordination.v1.Lease
%% 
%% Lease defines a lease concept.
-type coordination_v1_lease() ::
        #{spec => k8s_model:coordination_v1_lease_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.storage.v1beta1.CSINodeSpec
%% 
%% CSINodeSpec holds information about the specification of all CSI
%% drivers installed on a node
-type storage_v1beta1_csi_node_spec() ::
        #{drivers := [k8s_model:storage_v1beta1_csi_node_driver()]}.

%% io.k8s.api.core.v1.ResourceQuotaStatus
%% 
%% ResourceQuotaStatus defines the enforced hard limits and observed
%% use.
-type core_v1_resource_quota_status() ::
        #{used => #{_ := k8s_model:apimachinery_api_resource_quantity()},
          hard => #{_ := k8s_model:apimachinery_api_resource_quantity()}}.

%% io.k8s.api.batch.v1beta1.JobTemplateSpec
%% 
%% JobTemplateSpec describes the data a Job should have when created
%% from a template
-type batch_v1beta1_job_template_spec() ::
        #{spec => k8s_model:batch_v1_job_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta()}.

%% io.k8s.api.rbac.v1beta1.RoleList
%% 
%% RoleList is a collection of Roles Deprecated in v1.17 in favor of
%% rbac.authorization.k8s.io/v1 RoleList, and will no longer be
%% served in v1.22.
-type rbac_v1beta1_role_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:rbac_v1beta1_role()],
          apiVersion => binary()}.

%% io.k8s.api.rbac.v1alpha1.RoleRef
%% 
%% RoleRef contains information that points to the role being used
-type rbac_v1alpha1_role_ref() ::
        #{name := binary(),
          kind := binary(),
          apiGroup := binary()}.

%% io.k8s.api.core.v1.Binding
%% 
%% Binding ties one object to another; for example, a pod is bound
%% to a node by a scheduler. Deprecated in 1.7, please use the
%% bindings subresource of pods instead.
-type core_v1_binding() ::
        #{target := k8s_model:core_v1_object_reference(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec
%% 
%% PodDisruptionBudgetSpec is a description of a
%% PodDisruptionBudget.
-type policy_v1beta1_pod_disruption_budget_spec() ::
        #{selector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          minAvailable => k8s_model:apimachinery_util_intstr_int_or_string(),
          maxUnavailable => k8s_model:apimachinery_util_intstr_int_or_string()}.

%% io.k8s.api.apps.v1.DaemonSetCondition
%% 
%% DaemonSetCondition describes the state of a DaemonSet at a
%% certain point.
-type apps_v1_daemon_set_condition() ::
        #{type := binary(),
          status := binary(),
          reason => binary(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.core.v1.PodAntiAffinity
%% 
%% Pod anti affinity is a group of inter pod anti affinity
%% scheduling rules.
-type core_v1_pod_anti_affinity() ::
        #{requiredDuringSchedulingIgnoredDuringExecution => [k8s_model:core_v1_pod_affinity_term()],
          preferredDuringSchedulingIgnoredDuringExecution => [k8s_model:core_v1_weighted_pod_affinity_term()]}.

%% io.k8s.api.core.v1.EnvVar
%% 
%% EnvVar represents an environment variable present in a Container.
-type core_v1_env_var() ::
        #{valueFrom => k8s_model:core_v1_env_var_source(),
          value => binary(),
          name := binary()}.

%% io.k8s.api.apps.v1.DaemonSetSpec
%% 
%% DaemonSetSpec is the specification of a daemon set.
-type apps_v1_daemon_set_spec() ::
        #{updateStrategy => k8s_model:apps_v1_daemon_set_update_strategy(),
          template := k8s_model:core_v1_pod_template_spec(),
          selector := k8s_model:apimachinery_apis_meta_v1_label_selector(),
          revisionHistoryLimit => integer(),
          minReadySeconds => integer()}.

%% io.k8s.api.rbac.v1.ClusterRoleBinding
%% 
%% ClusterRoleBinding references a ClusterRole, but not contain it.
%% It can reference a ClusterRole in the global namespace, and adds
%% who information via Subject.
-type rbac_v1_cluster_role_binding() ::
        #{subjects => [k8s_model:rbac_v1_subject()],
          roleRef := k8s_model:rbac_v1_role_ref(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig
%% 
%% WebhookClientConfig contains the information to make a TLS
%% connection with the webhook
-type admissionregistration_v1beta1_webhook_client_config() ::
        #{url => binary(),
          service => k8s_model:admissionregistration_v1beta1_service_reference(),
          caBundle => binary()}.

%% io.k8s.api.core.v1.KeyToPath
%% 
%% Maps a string key to a path within a volume.
-type core_v1_key_to_path() ::
        #{path := binary(),
          mode => integer(),
          key := binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion
%% 
%% CustomResourceDefinitionVersion describes a version for CRD.
-type apiextensions_v1_custom_resource_definition_version() ::
        #{subresources => k8s_model:apiextensions_v1_custom_resource_subresources(),
          storage := boolean(),
          served := boolean(),
          schema => k8s_model:apiextensions_v1_custom_resource_validation(),
          name := binary(),
          deprecationWarning => binary(),
          deprecated => boolean(),
          additionalPrinterColumns => [k8s_model:apiextensions_v1_custom_resource_column_definition()]}.

%% io.k8s.api.node.v1.RuntimeClassList
%% 
%% RuntimeClassList is a list of RuntimeClass objects.
-type node_v1_runtime_class_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:node_v1_runtime_class()],
          apiVersion => binary()}.

%% io.k8s.api.rbac.v1alpha1.RoleList
%% 
%% RoleList is a collection of Roles. Deprecated in v1.17 in favor
%% of rbac.authorization.k8s.io/v1 RoleList, and will no longer be
%% served in v1.22.
-type rbac_v1alpha1_role_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:rbac_v1alpha1_role()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.DownwardAPIVolumeSource
%% 
%% DownwardAPIVolumeSource represents a volume containing downward
%% API info. Downward API volumes support ownership management and
%% SELinux relabeling.
-type core_v1_downward_api_volume_source() ::
        #{items => [k8s_model:core_v1_downward_api_volume_file()],
          defaultMode => integer()}.

%% io.k8s.api.autoscaling.v2beta2.PodsMetricStatus
%% 
%% PodsMetricStatus indicates the current value of a metric
%% describing each pod in the current scale target (for example,
%% transactions-processed-per-second).
-type autoscaling_v2beta2_pods_metric_status() ::
        #{metric := k8s_model:autoscaling_v2beta2_metric_identifier(),
          current := k8s_model:autoscaling_v2beta2_metric_value_status()}.

%% io.k8s.api.apps.v1.DaemonSetUpdateStrategy
%% 
%% DaemonSetUpdateStrategy is a struct used to control the update
%% strategy for a DaemonSet.
-type apps_v1_daemon_set_update_strategy() ::
        #{type => binary(),
          rollingUpdate => k8s_model:apps_v1_rolling_update_daemon_set()}.

%% io.k8s.api.storage.v1beta1.VolumeAttachmentList
%% 
%% VolumeAttachmentList is a collection of VolumeAttachment objects.
-type storage_v1beta1_volume_attachment_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:storage_v1beta1_volume_attachment()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.SELinuxOptions
%% 
%% SELinuxOptions are the labels to be applied to the container
-type core_v1_se_linux_options() ::
        #{user => binary(),
          type => binary(),
          role => binary(),
          level => binary()}.

%% io.k8s.api.authorization.v1.ResourceAttributes
%% 
%% ResourceAttributes includes the authorization attributes
%% available for resource requests to the Authorizer interface
-type authorization_v1_resource_attributes() ::
        #{version => binary(),
          verb => binary(),
          subresource => binary(),
          resource => binary(),
          namespace => binary(),
          name => binary(),
          group => binary()}.

%% io.k8s.api.storage.v1beta1.CSIDriverList
%% 
%% CSIDriverList is a collection of CSIDriver objects.
-type storage_v1beta1_csi_driver_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:storage_v1beta1_csi_driver()],
          apiVersion => binary()}.

%% io.k8s.api.policy.v1beta1.AllowedFlexVolume
%% 
%% AllowedFlexVolume represents a single Flexvolume that is allowed
%% to be used.
-type policy_v1beta1_allowed_flex_volume() ::
        #{driver := binary()}.

%% io.k8s.api.networking.v1beta1.IngressClass
%% 
%% IngressClass represents the class of the Ingress, referenced by
%% the Ingress Spec. The
%% `ingressclass.kubernetes.io/is-default-class` annotation can be
%% used to indicate that an IngressClass should be considered
%% default. When a single IngressClass resource has this annotation
%% set to true, new Ingress resources without a class specified will
%% be assigned this default class.
-type networking_v1beta1_ingress_class() ::
        #{spec => k8s_model:networking_v1beta1_ingress_class_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.flowcontrol.v1beta1.PolicyRulesWithSubjects
%% 
%% PolicyRulesWithSubjects prescribes a test that applies to a
%% request to an apiserver. The test considers the subject making
%% the request, the verb being requested, and the resource to be
%% acted upon. This PolicyRulesWithSubjects matches a request if and
%% only if both (a) at least one member of subjects matches the
%% request and (b) at least one member of resourceRules or
%% nonResourceRules matches the request.
-type flowcontrol_v1beta1_policy_rules_with_subjects() ::
        #{subjects := [k8s_model:flowcontrol_v1beta1_subject()],
          resourceRules => [k8s_model:flowcontrol_v1beta1_resource_policy_rule()],
          nonResourceRules => [k8s_model:flowcontrol_v1beta1_non_resource_policy_rule()]}.

%% io.k8s.api.networking.v1beta1.IngressClassList
%% 
%% IngressClassList is a collection of IngressClasses.
-type networking_v1beta1_ingress_class_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:networking_v1beta1_ingress_class()],
          apiVersion => binary()}.

%% io.k8s.api.apps.v1.StatefulSetSpec
%% 
%% A StatefulSetSpec is the specification of a StatefulSet.
-type apps_v1_stateful_set_spec() ::
        #{volumeClaimTemplates => [k8s_model:core_v1_persistent_volume_claim()],
          updateStrategy => k8s_model:apps_v1_stateful_set_update_strategy(),
          template := k8s_model:core_v1_pod_template_spec(),
          serviceName := binary(),
          selector := k8s_model:apimachinery_apis_meta_v1_label_selector(),
          revisionHistoryLimit => integer(),
          replicas => integer(),
          podManagementPolicy => binary()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1
%% 
%% FieldsV1 stores a set of fields in a data structure like a Trie,
%% in JSON format.
%% 
%% Each key is either a '.' representing the field itself, and will
%% always map to an empty set, or a string representing a sub-field
%% or item. The string will follow one of these four formats:
%% 'f:<name>', where <name> is the name of a field in a struct, or
%% key in a map 'v:<value>', where <value> is the exact json
%% formatted value of a list item 'i:<index>', where <index> is
%% position of a item in a list 'k:<keys>', where <keys> is a map of
%% a list item's key fields to their unique values If a key maps to
%% an empty Fields value, the field that key represents is part of
%% the set.
%% 
%% The exact format is defined in sigs.k8s.io/structured-merge-diff
-type apimachinery_apis_meta_v1_fields_v1() ::
        #{}.

%% io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationStatus
%% 
%% PriorityLevelConfigurationStatus represents the current state of
%% a "request-priority".
-type flowcontrol_v1alpha1_priority_level_configuration_status() ::
        #{conditions => [k8s_model:flowcontrol_v1alpha1_priority_level_configuration_condition()]}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionCondition
%% 
%% CustomResourceDefinitionCondition contains details for the
%% current condition of this pod.
-type apiextensions_v1beta1_custom_resource_definition_condition() ::
        #{type := binary(),
          status := binary(),
          reason => binary(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.rbac.v1beta1.ClusterRoleBinding
%% 
%% ClusterRoleBinding references a ClusterRole, but not contain it.
%% It can reference a ClusterRole in the global namespace, and adds
%% who information via Subject. Deprecated in v1.17 in favor of
%% rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no
%% longer be served in v1.22.
-type rbac_v1beta1_cluster_role_binding() ::
        #{subjects => [k8s_model:rbac_v1beta1_subject()],
          roleRef := k8s_model:rbac_v1beta1_role_ref(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.authentication.v1beta1.TokenReview
%% 
%% TokenReview attempts to authenticate a token to a known user.
%% Note: TokenReview requests may be cached by the webhook token
%% authenticator plugin in the kube-apiserver.
-type authentication_v1beta1_token_review() ::
        #{status => k8s_model:authentication_v1beta1_token_review_status(),
          spec := k8s_model:authentication_v1beta1_token_review_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.networking.v1.NetworkPolicy
%% 
%% NetworkPolicy describes what network traffic is allowed for a set
%% of Pods
-type networking_v1_network_policy() ::
        #{spec => k8s_model:networking_v1_network_policy_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.authentication.v1.TokenReviewStatus
%% 
%% TokenReviewStatus is the result of the token authentication
%% request.
-type authentication_v1_token_review_status() ::
        #{user => k8s_model:authentication_v1_user_info(),
          error => binary(),
          authenticated => boolean(),
          audiences => [binary()]}.

%% io.k8s.api.storage.v1.CSINodeList
%% 
%% CSINodeList is a collection of CSINode objects.
-type storage_v1_csi_node_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:storage_v1_csi_node()],
          apiVersion => binary()}.

%% io.k8s.api.extensions.v1beta1.HTTPIngressRuleValue
%% 
%% HTTPIngressRuleValue is a list of http selectors pointing to
%% backends. In the example: http://<host>/<path>?<searchpart> ->
%% backend where where parts of the url correspond to RFC 3986, this
%% resource will be used to match against everything after the last
%% '/' and before the first '?' or '#'.
-type extensions_v1beta1_http_ingress_rule_value() ::
        #{paths := [k8s_model:extensions_v1beta1_http_ingress_path()]}.

%% io.k8s.api.core.v1.EndpointPort
%% 
%% EndpointPort is a tuple that describes a single port.
-type core_v1_endpoint_port() ::
        #{protocol => binary(),
          port := integer(),
          name => binary(),
          appProtocol => binary()}.

%% io.k8s.api.core.v1.ContainerStateWaiting
%% 
%% ContainerStateWaiting is a waiting state of a container.
-type core_v1_container_state_waiting() ::
        #{reason => binary(),
          message => binary()}.

%% io.k8s.api.rbac.v1alpha1.ClusterRoleBinding
%% 
%% ClusterRoleBinding references a ClusterRole, but not contain it.
%% It can reference a ClusterRole in the global namespace, and adds
%% who information via Subject. Deprecated in v1.17 in favor of
%% rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no
%% longer be served in v1.22.
-type rbac_v1alpha1_cluster_role_binding() ::
        #{subjects => [k8s_model:rbac_v1alpha1_subject()],
          roleRef := k8s_model:rbac_v1alpha1_role_ref(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.NodeSelectorTerm
%% 
%% A null or empty node selector term matches no objects. The
%% requirements of them are ANDed. The TopologySelectorTerm type
%% implements a subset of the NodeSelectorTerm.
-type core_v1_node_selector_term() ::
        #{matchFields => [k8s_model:core_v1_node_selector_requirement()],
          matchExpressions => [k8s_model:core_v1_node_selector_requirement()]}.

%% io.k8s.api.core.v1.EnvVarSource
%% 
%% EnvVarSource represents a source for the value of an EnvVar.
-type core_v1_env_var_source() ::
        #{secretKeyRef => k8s_model:core_v1_secret_key_selector(),
          resourceFieldRef => k8s_model:core_v1_resource_field_selector(),
          fieldRef => k8s_model:core_v1_object_field_selector(),
          configMapKeyRef => k8s_model:core_v1_config_map_key_selector()}.

%% io.k8s.api.core.v1.ComponentCondition
%% 
%% Information about the condition of a component.
-type core_v1_component_condition() ::
        #{type := binary(),
          status := binary(),
          message => binary(),
          error => binary()}.

%% io.k8s.api.apps.v1.DaemonSet
%% 
%% DaemonSet represents the configuration of a daemon set.
-type apps_v1_daemon_set() ::
        #{status => k8s_model:apps_v1_daemon_set_status(),
          spec => k8s_model:apps_v1_daemon_set_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.DownwardAPIProjection
%% 
%% Represents downward API info for projecting into a projected
%% volume. Note that this is identical to a downwardAPI volume
%% source without the default mode.
-type core_v1_downward_api_projection() ::
        #{items => [k8s_model:core_v1_downward_api_volume_file()]}.

%% io.k8s.api.storage.v1beta1.StorageClassList
%% 
%% StorageClassList is a collection of storage classes.
-type storage_v1beta1_storage_class_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:storage_v1beta1_storage_class()],
          apiVersion => binary()}.

%% io.k8s.api.storage.v1alpha1.VolumeAttachmentStatus
%% 
%% VolumeAttachmentStatus is the status of a VolumeAttachment
%% request.
-type storage_v1alpha1_volume_attachment_status() ::
        #{detachError => k8s_model:storage_v1alpha1_volume_error(),
          attachmentMetadata => #{_ := binary()},
          attached := boolean(),
          attachError => k8s_model:storage_v1alpha1_volume_error()}.

%% io.k8s.api.autoscaling.v2beta2.MetricIdentifier
%% 
%% MetricIdentifier defines the name and optionally selector for a
%% metric
-type autoscaling_v2beta2_metric_identifier() ::
        #{selector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          name := binary()}.

%% io.k8s.api.authentication.v1beta1.TokenReviewSpec
%% 
%% TokenReviewSpec is a description of the token authentication
%% request.
-type authentication_v1beta1_token_review_spec() ::
        #{token => binary(),
          audiences => [binary()]}.

%% io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource
%% 
%% PersistentVolumeClaimVolumeSource references the user's PVC in
%% the same namespace. This volume finds the bound PV and mounts
%% that volume for the pod. A PersistentVolumeClaimVolumeSource is,
%% essentially, a wrapper around another type of volume that is
%% owned by someone else (the system).
-type core_v1_persistent_volume_claim_volume_source() ::
        #{readOnly => boolean(),
          claimName := binary()}.

%% io.k8s.api.authorization.v1.LocalSubjectAccessReview
%% 
%% LocalSubjectAccessReview checks whether or not a user or group
%% can perform an action in a given namespace. Having a namespace
%% scoped resource makes it much easier to grant namespace scoped
%% policy that includes permissions checking.
-type authorization_v1_local_subject_access_review() ::
        #{status => k8s_model:authorization_v1_subject_access_review_status(),
          spec := k8s_model:authorization_v1_subject_access_review_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.networking.v1beta1.IngressBackend
%% 
%% IngressBackend describes all endpoints for a given service and
%% port.
-type networking_v1beta1_ingress_backend() ::
        #{servicePort => k8s_model:apimachinery_util_intstr_int_or_string(),
          serviceName => binary(),
          resource => k8s_model:core_v1_typed_local_object_reference()}.

%% io.k8s.api.core.v1.EventSeries
%% 
%% EventSeries contain information on series of events, i.e. thing
%% that was/is happening continuously for some time.
-type core_v1_event_series() ::
        #{lastObservedTime => k8s_model:apimachinery_apis_meta_v1_micro_time(),
          count => integer()}.

%% io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus
%% 
%% PodDisruptionBudgetStatus represents information about the status
%% of a PodDisruptionBudget. Status may trail the actual state of a
%% system.
-type policy_v1beta1_pod_disruption_budget_status() ::
        #{observedGeneration => integer(),
          expectedPods := integer(),
          disruptionsAllowed := integer(),
          disruptedPods => #{_ := k8s_model:apimachinery_apis_meta_v1_time()},
          desiredHealthy := integer(),
          currentHealthy := integer()}.

%% io.k8s.api.networking.v1beta1.HTTPIngressPath
%% 
%% HTTPIngressPath associates a path with a backend. Incoming urls
%% matching the path are forwarded to the backend.
-type networking_v1beta1_http_ingress_path() ::
        #{pathType => binary(),
          path => binary(),
          backend := k8s_model:networking_v1beta1_ingress_backend()}.

%% io.k8s.api.core.v1.ResourceQuotaSpec
%% 
%% ResourceQuotaSpec defines the desired hard limits to enforce for
%% Quota.
-type core_v1_resource_quota_spec() ::
        #{scopes => [binary()],
          scopeSelector => k8s_model:core_v1_scope_selector(),
          hard => #{_ := k8s_model:apimachinery_api_resource_quantity()}}.

%% io.k8s.api.coordination.v1.LeaseSpec
%% 
%% LeaseSpec is a specification of a Lease.
-type coordination_v1_lease_spec() ::
        #{renewTime => k8s_model:apimachinery_apis_meta_v1_micro_time(),
          leaseTransitions => integer(),
          leaseDurationSeconds => integer(),
          holderIdentity => binary(),
          acquireTime => k8s_model:apimachinery_apis_meta_v1_micro_time()}.

%% io.k8s.api.admissionregistration.v1beta1.ValidatingWebhook
%% 
%% ValidatingWebhook describes an admission webhook and the
%% resources and operations it applies to.
-type admissionregistration_v1beta1_validating_webhook() ::
        #{timeoutSeconds => integer(),
          sideEffects => binary(),
          rules => [k8s_model:admissionregistration_v1beta1_rule_with_operations()],
          objectSelector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          namespaceSelector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          name := binary(),
          matchPolicy => binary(),
          failurePolicy => binary(),
          clientConfig := k8s_model:admissionregistration_v1beta1_webhook_client_config(),
          admissionReviewVersions => [binary()]}.

%% io.k8s.api.core.v1.TopologySelectorLabelRequirement
%% 
%% A topology selector requirement is a selector that matches given
%% label. This is an alpha feature and may change in the future.
-type core_v1_topology_selector_label_requirement() ::
        #{values := [binary()],
          key := binary()}.

%% io.k8s.api.node.v1.Overhead
%% 
%% Overhead structure represents the resource overhead associated
%% with running a pod.
-type node_v1_overhead() ::
        #{podFixed => #{_ := k8s_model:apimachinery_api_resource_quantity()}}.

%% io.k8s.api.storage.v1beta1.VolumeAttachmentStatus
%% 
%% VolumeAttachmentStatus is the status of a VolumeAttachment
%% request.
-type storage_v1beta1_volume_attachment_status() ::
        #{detachError => k8s_model:storage_v1beta1_volume_error(),
          attachmentMetadata => #{_ := binary()},
          attached := boolean(),
          attachError => k8s_model:storage_v1beta1_volume_error()}.

%% io.k8s.api.rbac.v1beta1.RoleBindingList
%% 
%% RoleBindingList is a collection of RoleBindings Deprecated in
%% v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList,
%% and will no longer be served in v1.22.
-type rbac_v1beta1_role_binding_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:rbac_v1beta1_role_binding()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.FlexVolumeSource
%% 
%% FlexVolume represents a generic volume resource that is
%% provisioned/attached using an exec based plugin.
-type core_v1_flex_volume_source() ::
        #{secretRef => k8s_model:core_v1_local_object_reference(),
          readOnly => boolean(),
          options => #{_ := binary()},
          fsType => binary(),
          driver := binary()}.

%% io.k8s.api.rbac.v1.RoleBindingList
%% 
%% RoleBindingList is a collection of RoleBindings
-type rbac_v1_role_binding_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:rbac_v1_role_binding()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.DownwardAPIVolumeFile
%% 
%% DownwardAPIVolumeFile represents information to create the file
%% containing the pod field
-type core_v1_downward_api_volume_file() ::
        #{resourceFieldRef => k8s_model:core_v1_resource_field_selector(),
          path := binary(),
          mode => integer(),
          fieldRef => k8s_model:core_v1_object_field_selector()}.

%% io.k8s.api.flowcontrol.v1alpha1.FlowSchemaSpec
%% 
%% FlowSchemaSpec describes how the FlowSchema's specification looks
%% like.
-type flowcontrol_v1alpha1_flow_schema_spec() ::
        #{rules => [k8s_model:flowcontrol_v1alpha1_policy_rules_with_subjects()],
          priorityLevelConfiguration := k8s_model:flowcontrol_v1alpha1_priority_level_configuration_reference(),
          matchingPrecedence => integer(),
          distinguisherMethod => k8s_model:flowcontrol_v1alpha1_flow_distinguisher_method()}.

%% io.k8s.api.certificates.v1.CertificateSigningRequestStatus
%% 
%% CertificateSigningRequestStatus contains conditions used to
%% indicate approved/denied/failed status of the request, and the
%% issued certificate.
-type certificates_v1_certificate_signing_request_status() ::
        #{conditions => [k8s_model:certificates_v1_certificate_signing_request_condition()],
          certificate => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale
%% 
%% CustomResourceSubresourceScale defines how to serve the scale
%% subresource for CustomResources.
-type apiextensions_v1_custom_resource_subresource_scale() ::
        #{statusReplicasPath := binary(),
          specReplicasPath := binary(),
          labelSelectorPath => binary()}.

%% io.k8s.api.autoscaling.v1.ScaleSpec
%% 
%% ScaleSpec describes the attributes of a scale subresource.
-type autoscaling_v1_scale_spec() ::
        #{replicas => integer()}.

%% io.k8s.api.core.v1.ComponentStatus
%% 
%% ComponentStatus (and ComponentStatusList) holds the cluster
%% validation info. Deprecated: This API is deprecated in v1.19+
-type core_v1_component_status() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          conditions => [k8s_model:core_v1_component_condition()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.ObjectFieldSelector
%% 
%% ObjectFieldSelector selects an APIVersioned field of an object.
-type core_v1_object_field_selector() ::
        #{fieldPath := binary(),
          apiVersion => binary()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
%% 
%% ManagedFieldsEntry is a workflow-id, a FieldSet and the group
%% version of the resource that the fieldset applies to.
-type apimachinery_apis_meta_v1_managed_fields_entry() ::
        #{time => k8s_model:apimachinery_apis_meta_v1_time(),
          operation => binary(),
          manager => binary(),
          'fieldsV1' => k8s_model:apimachinery_apis_meta_v1_fields_v1(),
          fieldsType => binary(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.PersistentVolumeSpec
%% 
%% PersistentVolumeSpec is the specification of a persistent volume.
-type core_v1_persistent_volume_spec() ::
        #{vsphereVolume => k8s_model:core_v1_vsphere_virtual_disk_volume_source(),
          volumeMode => binary(),
          storageos => k8s_model:core_v1_storage_os_persistent_volume_source(),
          storageClassName => binary(),
          scaleIO => k8s_model:core_v1_scale_io_persistent_volume_source(),
          rbd => k8s_model:core_v1_rbd_persistent_volume_source(),
          quobyte => k8s_model:core_v1_quobyte_volume_source(),
          portworxVolume => k8s_model:core_v1_portworx_volume_source(),
          photonPersistentDisk => k8s_model:core_v1_photon_persistent_disk_volume_source(),
          persistentVolumeReclaimPolicy => binary(),
          nodeAffinity => k8s_model:core_v1_volume_node_affinity(),
          nfs => k8s_model:core_v1_nfs_volume_source(),
          mountOptions => [binary()],
          local => k8s_model:core_v1_local_volume_source(),
          iscsi => k8s_model:core_v1_iscsi_persistent_volume_source(),
          hostPath => k8s_model:core_v1_host_path_volume_source(),
          glusterfs => k8s_model:core_v1_glusterfs_persistent_volume_source(),
          gcePersistentDisk => k8s_model:core_v1_gce_persistent_disk_volume_source(),
          flocker => k8s_model:core_v1_flocker_volume_source(),
          flexVolume => k8s_model:core_v1_flex_persistent_volume_source(),
          fc => k8s_model:core_v1_fc_volume_source(),
          csi => k8s_model:core_v1_csi_persistent_volume_source(),
          claimRef => k8s_model:core_v1_object_reference(),
          cinder => k8s_model:core_v1_cinder_persistent_volume_source(),
          cephfs => k8s_model:core_v1_ceph_fs_persistent_volume_source(),
          capacity => #{_ := k8s_model:apimachinery_api_resource_quantity()},
          azureFile => k8s_model:core_v1_azure_file_persistent_volume_source(),
          azureDisk => k8s_model:core_v1_azure_disk_volume_source(),
          awsElasticBlockStore => k8s_model:core_v1_aws_elastic_block_store_volume_source(),
          accessModes => [binary()]}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceValidation
%% 
%% CustomResourceValidation is a list of validation methods for
%% CustomResources.
-type apiextensions_v1beta1_custom_resource_validation() ::
        #{'openAPIV3Schema' => k8s_model:apiextensions_v1beta1_json_schema_props()}.

%% io.k8s.api.rbac.v1beta1.ClusterRoleBindingList
%% 
%% ClusterRoleBindingList is a collection of ClusterRoleBindings.
%% Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1
%% ClusterRoleBindingList, and will no longer be served in v1.22.
-type rbac_v1beta1_cluster_role_binding_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:rbac_v1beta1_cluster_role_binding()],
          apiVersion => binary()}.

%% io.k8s.api.node.v1beta1.Scheduling
%% 
%% Scheduling specifies the scheduling constraints for nodes
%% supporting a RuntimeClass.
-type node_v1beta1_scheduling() ::
        #{tolerations => [k8s_model:core_v1_toleration()],
          nodeSelector => #{_ := binary()}}.

%% io.k8s.api.certificates.v1.CertificateSigningRequestCondition
%% 
%% CertificateSigningRequestCondition describes a condition of a
%% CertificateSigningRequest object
-type certificates_v1_certificate_signing_request_condition() ::
        #{type := binary(),
          status := binary(),
          reason => binary(),
          message => binary(),
          lastUpdateTime => k8s_model:apimachinery_apis_meta_v1_time(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerCondition
%% 
%% HorizontalPodAutoscalerCondition describes the state of a
%% HorizontalPodAutoscaler at a certain point.
-type autoscaling_v2beta1_horizontal_pod_autoscaler_condition() ::
        #{type := binary(),
          status := binary(),
          reason => binary(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.core.v1.PortStatus
-type core_v1_port_status() ::
        #{protocol := binary(),
          port := integer(),
          error => binary()}.

%% io.k8s.api.events.v1.Event
%% 
%% Event is a report of an event somewhere in the cluster. It
%% generally denotes some state change in the system. Events have a
%% limited retention time and triggers and messages may evolve with
%% time. Event consumers should not rely on the timing of an event
%% with a given Reason reflecting a consistent underlying trigger,
%% or the continued existence of events with that Reason. Events
%% should be treated as informative, best-effort, supplemental data.
-type events_v1_event() ::
        #{type => binary(),
          series => k8s_model:events_v1_event_series(),
          reportingInstance => binary(),
          reportingController => binary(),
          related => k8s_model:core_v1_object_reference(),
          regarding => k8s_model:core_v1_object_reference(),
          reason => binary(),
          note => binary(),
          metadata := k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          eventTime := k8s_model:apimachinery_apis_meta_v1_micro_time(),
          deprecatedSource => k8s_model:core_v1_event_source(),
          deprecatedLastTimestamp => k8s_model:apimachinery_apis_meta_v1_time(),
          deprecatedFirstTimestamp => k8s_model:apimachinery_apis_meta_v1_time(),
          deprecatedCount => integer(),
          apiVersion => binary(),
          action => binary()}.

%% io.k8s.api.authorization.v1.SubjectRulesReviewStatus
%% 
%% SubjectRulesReviewStatus contains the result of a rules check.
%% This check can be incomplete depending on the set of authorizers
%% the server is configured with and any errors experienced during
%% evaluation. Because authorization rules are additive, if a rule
%% appears in a list it's safe to assume the subject has that
%% permission, even if that list is incomplete.
-type authorization_v1_subject_rules_review_status() ::
        #{resourceRules := [k8s_model:authorization_v1_resource_rule()],
          nonResourceRules := [k8s_model:authorization_v1_non_resource_rule()],
          incomplete := boolean(),
          evaluationError => binary()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference
%% 
%% OwnerReference contains enough information to let you identify an
%% owning object. An owning object must be in the same namespace as
%% the dependent, or be cluster-scoped, so there is no namespace
%% field.
-type apimachinery_apis_meta_v1_owner_reference() ::
        #{uid := binary(),
          name := binary(),
          kind := binary(),
          controller => boolean(),
          blockOwnerDeletion => boolean(),
          apiVersion := binary()}.

%% io.k8s.api.certificates.v1.CertificateSigningRequestSpec
%% 
%% CertificateSigningRequestSpec contains the certificate request.
-type certificates_v1_certificate_signing_request_spec() ::
        #{username => binary(),
          usages => [binary()],
          uid => binary(),
          signerName := binary(),
          request := binary(),
          groups => [binary()],
          extra => #{_ := [binary()]}}.

%% io.k8s.api.networking.v1.HTTPIngressPath
%% 
%% HTTPIngressPath associates a path with a backend. Incoming urls
%% matching the path are forwarded to the backend.
-type networking_v1_http_ingress_path() ::
        #{pathType => binary(),
          path => binary(),
          backend := k8s_model:networking_v1_ingress_backend()}.

%% io.k8s.api.networking.v1.IPBlock
%% 
%% IPBlock describes a particular CIDR (Ex.
%% "192.168.1.1/24","2001:db9::/64") that is allowed to the pods
%% matched by a NetworkPolicySpec's podSelector. The except entry
%% describes CIDRs that should not be included within this rule.
-type networking_v1_ip_block() ::
        #{except => [binary()],
          cidr := binary()}.

%% io.k8s.api.scheduling.v1alpha1.PriorityClassList
%% 
%% PriorityClassList is a collection of priority classes.
-type scheduling_v1alpha1_priority_class_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:scheduling_v1alpha1_priority_class()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.SecretEnvSource
%% 
%% SecretEnvSource selects a Secret to populate the environment
%% variables with.
%% 
%% The contents of the target Secret's Data field will represent the
%% key-value pairs as environment variables.
-type core_v1_secret_env_source() ::
        #{optional => boolean(),
          name => binary()}.

%% io.k8s.api.autoscaling.v2beta1.MetricStatus
%% 
%% MetricStatus describes the last-read state of a single metric.
-type autoscaling_v2beta1_metric_status() ::
        #{type := binary(),
          resource => k8s_model:autoscaling_v2beta1_resource_metric_status(),
          pods => k8s_model:autoscaling_v2beta1_pods_metric_status(),
          object => k8s_model:autoscaling_v2beta1_object_metric_status(),
          external => k8s_model:autoscaling_v2beta1_external_metric_status(),
          containerResource => k8s_model:autoscaling_v2beta1_container_resource_metric_status()}.

%% io.k8s.api.core.v1.ResourceFieldSelector
%% 
%% ResourceFieldSelector represents container resources (cpu,
%% memory) and their output format
-type core_v1_resource_field_selector() ::
        #{resource := binary(),
          divisor => k8s_model:apimachinery_api_resource_quantity(),
          containerName => binary()}.

%% io.k8s.api.core.v1.Service
%% 
%% Service is a named abstraction of software service (for example,
%% mysql) consisting of local port (for example 3306) that the proxy
%% listens on, and the selector that determines which pods will
%% answer requests sent through the proxy.
-type core_v1_service() ::
        #{status => k8s_model:core_v1_service_status(),
          spec => k8s_model:core_v1_service_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.flowcontrol.v1beta1.ServiceAccountSubject
%% 
%% ServiceAccountSubject holds detailed information for
%% service-account-kind subject.
-type flowcontrol_v1beta1_service_account_subject() ::
        #{namespace := binary(),
          name := binary()}.

%% io.k8s.api.policy.v1beta1.AllowedCSIDriver
%% 
%% AllowedCSIDriver represents a single inline CSI Driver that is
%% allowed to be used.
-type policy_v1beta1_allowed_csi_driver() ::
        #{name := binary()}.

%% io.k8s.api.extensions.v1beta1.IngressBackend
%% 
%% IngressBackend describes all endpoints for a given service and
%% port.
-type extensions_v1beta1_ingress_backend() ::
        #{servicePort => k8s_model:apimachinery_util_intstr_int_or_string(),
          serviceName => binary(),
          resource => k8s_model:core_v1_typed_local_object_reference()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionCondition
%% 
%% CustomResourceDefinitionCondition contains details for the
%% current condition of this pod.
-type apiextensions_v1_custom_resource_definition_condition() ::
        #{type := binary(),
          status := binary(),
          reason => binary(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.networking.v1.IngressServiceBackend
%% 
%% IngressServiceBackend references a Kubernetes Service as a
%% Backend.
-type networking_v1_ingress_service_backend() ::
        #{port => k8s_model:networking_v1_service_backend_port(),
          name := binary()}.

%% io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference
%% 
%% ServiceReference holds a reference to Service.legacy.k8s.io
-type apiregistration_v1_service_reference() ::
        #{port => integer(),
          namespace => binary(),
          name => binary()}.

%% io.k8s.api.core.v1.SecretVolumeSource
%% 
%% Adapts a Secret into a volume.
%% 
%% The contents of the target Secret's Data field will be presented
%% in a volume as files using the keys in the Data field as the file
%% names. Secret volumes support ownership management and SELinux
%% relabeling.
-type core_v1_secret_volume_source() ::
        #{secretName => binary(),
          optional => boolean(),
          items => [k8s_model:core_v1_key_to_path()],
          defaultMode => integer()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion
%% 
%% WebhookConversion describes how to call a conversion webhook
-type apiextensions_v1_webhook_conversion() ::
        #{conversionReviewVersions := [binary()],
          clientConfig => k8s_model:apiextensions_v1_webhook_client_config()}.

%% io.k8s.api.rbac.v1beta1.RoleBinding
%% 
%% RoleBinding references a role, but does not contain it. It can
%% reference a Role in the same namespace or a ClusterRole in the
%% global namespace. It adds who information via Subjects and
%% namespace information by which namespace it exists in.
%% RoleBindings in a given namespace only have effect in that
%% namespace. Deprecated in v1.17 in favor of
%% rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be
%% served in v1.22.
-type rbac_v1beta1_role_binding() ::
        #{subjects => [k8s_model:rbac_v1beta1_subject()],
          roleRef := k8s_model:rbac_v1beta1_role_ref(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition
%% 
%% APIServiceCondition describes the state of an APIService at a
%% particular point
-type apiregistration_v1_api_service_condition() ::
        #{type := binary(),
          status := binary(),
          reason => binary(),
          message => binary(),
          lastTransitionTime => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.core.v1.ContainerStatus
%% 
%% ContainerStatus contains details for the current status of this
%% container.
-type core_v1_container_status() ::
        #{state => k8s_model:core_v1_container_state(),
          started => boolean(),
          restartCount := integer(),
          ready := boolean(),
          name := binary(),
          lastState => k8s_model:core_v1_container_state(),
          imageID := binary(),
          image := binary(),
          containerID => binary()}.

%% io.k8s.api.certificates.v1.CertificateSigningRequest
%% 
%% CertificateSigningRequest objects provide a mechanism to obtain
%% x509 certificates by submitting a certificate signing request,
%% and having it asynchronously approved and issued.
%% 
%% Kubelets use this API to obtain:
%% 1. client certificates to authenticate to kube-apiserver (with
%% the "kubernetes.io/kube-apiserver-client-kubelet" signerName).
%% 2. serving certificates for TLS endpoints kube-apiserver can
%% connect to securely (with the "kubernetes.io/kubelet-serving"
%% signerName).
%% 
%% This API can be used to request client certificates to
%% authenticate to kube-apiserver (with the
%% "kubernetes.io/kube-apiserver-client" signerName), or to obtain
%% certificates from custom non-Kubernetes signers.
-type certificates_v1_certificate_signing_request() ::
        #{status => k8s_model:certificates_v1_certificate_signing_request_status(),
          spec := k8s_model:certificates_v1_certificate_signing_request_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.authorization.v1beta1.SubjectAccessReview
%% 
%% SubjectAccessReview checks whether or not a user or group can
%% perform an action.
-type authorization_v1beta1_subject_access_review() ::
        #{status => k8s_model:authorization_v1beta1_subject_access_review_status(),
          spec := k8s_model:authorization_v1beta1_subject_access_review_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec
%% 
%% HorizontalPodAutoscalerSpec describes the desired functionality
%% of the HorizontalPodAutoscaler.
-type autoscaling_v2beta2_horizontal_pod_autoscaler_spec() ::
        #{scaleTargetRef := k8s_model:autoscaling_v2beta2_cross_version_object_reference(),
          minReplicas => integer(),
          metrics => [k8s_model:autoscaling_v2beta2_metric_spec()],
          maxReplicas := integer(),
          behavior => k8s_model:autoscaling_v2beta2_horizontal_pod_autoscaler_behavior()}.

%% io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceList
%% 
%% APIServiceList is a list of APIService objects.
-type apiregistration_v1beta1_api_service_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:apiregistration_v1beta1_api_service()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.ContainerStateRunning
%% 
%% ContainerStateRunning is a running state of a container.
-type core_v1_container_state_running() ::
        #{startedAt => k8s_model:apimachinery_apis_meta_v1_time()}.

%% io.k8s.api.core.v1.ContainerState
%% 
%% ContainerState holds a possible state of container. Only one of
%% its members may be specified. If none of them is specified, the
%% default one is ContainerStateWaiting.
-type core_v1_container_state() ::
        #{waiting => k8s_model:core_v1_container_state_waiting(),
          terminated => k8s_model:core_v1_container_state_terminated(),
          running => k8s_model:core_v1_container_state_running()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON
%% 
%% JSON represents any valid JSON value. These types are supported:
%% bool, int64, float64, string, []interface{},
%% map[string]interface{} and nil.
-type apiextensions_v1_json() ::
        json:value().

%% io.k8s.api.authorization.v1beta1.SubjectRulesReviewStatus
%% 
%% SubjectRulesReviewStatus contains the result of a rules check.
%% This check can be incomplete depending on the set of authorizers
%% the server is configured with and any errors experienced during
%% evaluation. Because authorization rules are additive, if a rule
%% appears in a list it's safe to assume the subject has that
%% permission, even if that list is incomplete.
-type authorization_v1beta1_subject_rules_review_status() ::
        #{resourceRules := [k8s_model:authorization_v1beta1_resource_rule()],
          nonResourceRules := [k8s_model:authorization_v1beta1_non_resource_rule()],
          incomplete := boolean(),
          evaluationError => binary()}.

%% io.k8s.api.core.v1.RBDPersistentVolumeSource
%% 
%% Represents a Rados Block Device mount that lasts the lifetime of
%% a pod. RBD volumes support ownership management and SELinux
%% relabeling.
-type core_v1_rbd_persistent_volume_source() ::
        #{user => binary(),
          secretRef => k8s_model:core_v1_secret_reference(),
          readOnly => boolean(),
          pool => binary(),
          monitors := [binary()],
          keyring => binary(),
          image := binary(),
          fsType => binary()}.

%% io.k8s.api.core.v1.ISCSIPersistentVolumeSource
%% 
%% ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI
%% volumes can only be mounted as read/write once. ISCSI volumes
%% support ownership management and SELinux relabeling.
-type core_v1_iscsi_persistent_volume_source() ::
        #{targetPortal := binary(),
          secretRef => k8s_model:core_v1_secret_reference(),
          readOnly => boolean(),
          portals => [binary()],
          lun := integer(),
          iscsiInterface => binary(),
          iqn := binary(),
          initiatorName => binary(),
          fsType => binary(),
          chapAuthSession => boolean(),
          chapAuthDiscovery => boolean()}.

%% io.k8s.api.storage.v1beta1.StorageClass
%% 
%% StorageClass describes the parameters for a class of storage for
%% which PersistentVolumes can be dynamically provisioned.
%% 
%% StorageClasses are non-namespaced; the name of the storage class
%% according to etcd is in ObjectMeta.Name.
-type storage_v1beta1_storage_class() ::
        #{volumeBindingMode => binary(),
          reclaimPolicy => binary(),
          provisioner := binary(),
          parameters => #{_ := binary()},
          mountOptions => [binary()],
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary(),
          allowedTopologies => [k8s_model:core_v1_topology_selector_term()],
          allowVolumeExpansion => boolean()}.

%% io.k8s.api.autoscaling.v1.ScaleStatus
%% 
%% ScaleStatus represents the current status of a scale subresource.
-type autoscaling_v1_scale_status() ::
        #{selector => binary(),
          replicas := integer()}.

%% io.k8s.api.core.v1.ContainerImage
%% 
%% Describe a container image
-type core_v1_container_image() ::
        #{sizeBytes => integer(),
          names := [binary()]}.

%% io.k8s.api.policy.v1beta1.HostPortRange
%% 
%% HostPortRange defines a range of host ports that will be enabled
%% by a policy for pods to use. It requires both the start and end
%% to be defined.
-type policy_v1beta1_host_port_range() ::
        #{min := integer(),
          max := integer()}.

%% io.k8s.api.core.v1.EndpointAddress
%% 
%% EndpointAddress is a tuple that describes single IP address.
-type core_v1_endpoint_address() ::
        #{targetRef => k8s_model:core_v1_object_reference(),
          nodeName => binary(),
          ip := binary(),
          hostname => binary()}.

%% io.k8s.api.core.v1.AzureDiskVolumeSource
%% 
%% AzureDisk represents an Azure Data Disk mount on the host and
%% bind mount to the pod.
-type core_v1_azure_disk_volume_source() ::
        #{readOnly => boolean(),
          kind => binary(),
          fsType => binary(),
          diskURI := binary(),
          diskName := binary(),
          cachingMode => binary()}.

%% io.k8s.api.core.v1.TopologySpreadConstraint
%% 
%% TopologySpreadConstraint specifies how to spread matching pods
%% among the given topology.
-type core_v1_topology_spread_constraint() ::
        #{whenUnsatisfiable := binary(),
          topologyKey := binary(),
          maxSkew := integer(),
          labelSelector => k8s_model:apimachinery_apis_meta_v1_label_selector()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps
%% 
%% JSONSchemaProps is a JSON-Schema following Specification Draft 4
%% (http://json-schema.org/).
-type apiextensions_v1_json_schema_props() ::
        #{uniqueItems => boolean(),
          maximum => number(),
          externalDocs => k8s_model:apiextensions_v1_external_documentation(),
          title => binary(),
          'x-kubernetes-list-type' => binary(),
          multipleOf => number(),
          anyOf => [k8s_model:apiextensions_v1_json_schema_props()],
          format => binary(),
          'x-kubernetes-embedded-resource' => boolean(),
          exclusiveMinimum => boolean(),
          'x-kubernetes-map-type' => binary(),
          id => binary(),
          minimum => number(),
          definitions => #{_ := k8s_model:apiextensions_v1_json_schema_props()},
          minItems => integer(),
          additionalProperties => k8s_model:apiextensions_v1_json_schema_props_or_bool(),
          example => k8s_model:apiextensions_v1_json(),
          patternProperties => #{_ := k8s_model:apiextensions_v1_json_schema_props()},
          type => binary(),
          maxItems => integer(),
          dependencies => #{_ := k8s_model:apiextensions_v1_json_schema_props_or_string_array()},
          'x-kubernetes-int-or-string' => boolean(),
          '$schema' => binary(),
          maxProperties => integer(),
          properties => #{_ := k8s_model:apiextensions_v1_json_schema_props()},
          additionalItems => k8s_model:apiextensions_v1_json_schema_props_or_bool(),
          items => k8s_model:apiextensions_v1_json_schema_props_or_array(),
          'not' => k8s_model:apiextensions_v1_json_schema_props(),
          oneOf => [k8s_model:apiextensions_v1_json_schema_props()],
          'x-kubernetes-preserve-unknown-fields' => boolean(),
          default => k8s_model:apiextensions_v1_json(),
          required => [binary()],
          description => binary(),
          allOf => [k8s_model:apiextensions_v1_json_schema_props()],
          minLength => integer(),
          nullable => boolean(),
          pattern => binary(),
          'x-kubernetes-list-map-keys' => [binary()],
          '$ref' => binary(),
          enum => [k8s_model:apiextensions_v1_json()],
          exclusiveMaximum => boolean(),
          maxLength => integer(),
          minProperties => integer()}.

%% io.k8s.api.flowcontrol.v1beta1.Subject
%% 
%% Subject matches the originator of a request, as identified by the
%% request authentication system. There are three ways of matching
%% an originator; by user, group, or service account.
-type flowcontrol_v1beta1_subject() ::
        #{user => k8s_model:flowcontrol_v1beta1_user_subject(),
          serviceAccount => k8s_model:flowcontrol_v1beta1_service_account_subject(),
          kind := binary(),
          group => k8s_model:flowcontrol_v1beta1_group_subject()}.

%% io.k8s.api.storage.v1.CSINodeDriver
%% 
%% CSINodeDriver holds information about the specification of one
%% CSI driver installed on a node
-type storage_v1_csi_node_driver() ::
        #{topologyKeys => [binary()],
          nodeID := binary(),
          name := binary(),
          allocatable => k8s_model:storage_v1_volume_node_resources()}.

%% io.k8s.api.core.v1.PodTemplate
%% 
%% PodTemplate describes a template for creating copies of a
%% predefined pod.
-type core_v1_pod_template() ::
        #{template => k8s_model:core_v1_pod_template_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.node.v1alpha1.RuntimeClass
%% 
%% RuntimeClass defines a class of container runtime supported in
%% the cluster. The RuntimeClass is used to determine which
%% container runtime is used to run all containers in a pod.
%% RuntimeClasses are (currently) manually defined by a user or
%% cluster provisioner, and referenced in the PodSpec. The Kubelet
%% is responsible for resolving the RuntimeClassName reference
%% before running the pod. For more details, see
%% https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md
-type node_v1alpha1_runtime_class() ::
        #{spec := k8s_model:node_v1alpha1_runtime_class_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.ServiceAccountList
%% 
%% ServiceAccountList is a list of ServiceAccount objects
-type core_v1_service_account_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:core_v1_service_account()],
          apiVersion => binary()}.

%% io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerStatus
%% 
%% HorizontalPodAutoscalerStatus describes the current status of a
%% horizontal pod autoscaler.
-type autoscaling_v2beta1_horizontal_pod_autoscaler_status() ::
        #{observedGeneration => integer(),
          lastScaleTime => k8s_model:apimachinery_apis_meta_v1_time(),
          desiredReplicas := integer(),
          currentReplicas := integer(),
          currentMetrics => [k8s_model:autoscaling_v2beta1_metric_status()],
          conditions := [k8s_model:autoscaling_v2beta1_horizontal_pod_autoscaler_condition()]}.

%% io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler
%% 
%% HorizontalPodAutoscaler is the configuration for a horizontal pod
%% autoscaler, which automatically manages the replica count of any
%% resource implementing the scale subresource based on the metrics
%% specified.
-type autoscaling_v2beta1_horizontal_pod_autoscaler() ::
        #{status => k8s_model:autoscaling_v2beta1_horizontal_pod_autoscaler_status(),
          spec => k8s_model:autoscaling_v2beta1_horizontal_pod_autoscaler_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.core.v1.NodeList
%% 
%% NodeList is the whole list of all Nodes which have been
%% registered with master.
-type core_v1_node_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:core_v1_node()],
          apiVersion => binary()}.

%% io.k8s.api.autoscaling.v2beta2.MetricTarget
%% 
%% MetricTarget defines the target value, average value, or average
%% utilization of a specific metric
-type autoscaling_v2beta2_metric_target() ::
        #{value => k8s_model:apimachinery_api_resource_quantity(),
          type := binary(),
          averageValue => k8s_model:apimachinery_api_resource_quantity(),
          averageUtilization => integer()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent
%% 
%% Event represents a single event to a watched resource.
-type apimachinery_apis_meta_v1_watch_event() ::
        #{type := binary(),
          object := k8s_model:apimachinery_runtime_raw_extension()}.

%% io.k8s.api.core.v1.AzureFileVolumeSource
%% 
%% AzureFile represents an Azure File Service mount on the host and
%% bind mount to the pod.
-type core_v1_azure_file_volume_source() ::
        #{shareName := binary(),
          secretName := binary(),
          readOnly => boolean()}.

%% io.k8s.api.flowcontrol.v1alpha1.LimitedPriorityLevelConfiguration
%% 
%% LimitedPriorityLevelConfiguration specifies how to handle
%% requests that are subject to limits. It addresses two issues:
%% * How are requests for this priority level limited?
%% * What should be done with requests that exceed the limit?
-type flowcontrol_v1alpha1_limited_priority_level_configuration() ::
        #{limitResponse => k8s_model:flowcontrol_v1alpha1_limit_response(),
          assuredConcurrencyShares => integer()}.

%% io.k8s.api.core.v1.Affinity
%% 
%% Affinity is a group of affinity scheduling rules.
-type core_v1_affinity() ::
        #{podAntiAffinity => k8s_model:core_v1_pod_anti_affinity(),
          podAffinity => k8s_model:core_v1_pod_affinity(),
          nodeAffinity => k8s_model:core_v1_node_affinity()}.

%% io.k8s.api.authorization.v1beta1.SelfSubjectRulesReview
%% 
%% SelfSubjectRulesReview enumerates the set of actions the current
%% user can perform within a namespace. The returned list of actions
%% may be incomplete depending on the server's authorization mode,
%% and any errors experienced during the evaluation.
%% SelfSubjectRulesReview should be used by UIs to show/hide
%% actions, or to quickly let an end user reason about their
%% permissions. It should NOT Be used by external systems to drive
%% authorization decisions as this raises confused deputy, cache
%% lifetime/revocation, and correctness concerns.
%% SubjectAccessReview, and LocalAccessReview are the correct way to
%% defer authorization decisions to the API server.
-type authorization_v1beta1_self_subject_rules_review() ::
        #{status => k8s_model:authorization_v1beta1_subject_rules_review_status(),
          spec := k8s_model:authorization_v1beta1_self_subject_rules_review_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceStatus
%% 
%% APIServiceStatus contains derived information about an API server
-type apiregistration_v1beta1_api_service_status() ::
        #{conditions => [k8s_model:apiregistration_v1beta1_api_service_condition()]}.

%% io.k8s.api.core.v1.ScaleIOPersistentVolumeSource
%% 
%% ScaleIOPersistentVolumeSource represents a persistent ScaleIO
%% volume
-type core_v1_scale_io_persistent_volume_source() ::
        #{volumeName => binary(),
          system := binary(),
          storagePool => binary(),
          storageMode => binary(),
          sslEnabled => boolean(),
          secretRef := k8s_model:core_v1_secret_reference(),
          readOnly => boolean(),
          protectionDomain => binary(),
          gateway := binary(),
          fsType => binary()}.

%% io.k8s.api.admissionregistration.v1.ServiceReference
%% 
%% ServiceReference holds a reference to Service.legacy.k8s.io
-type admissionregistration_v1_service_reference() ::
        #{port => integer(),
          path => binary(),
          namespace := binary(),
          name := binary()}.

%% io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationList
%% 
%% PriorityLevelConfigurationList is a list of
%% PriorityLevelConfiguration objects.
-type flowcontrol_v1alpha1_priority_level_configuration_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:flowcontrol_v1alpha1_priority_level_configuration()],
          apiVersion => binary()}.

%% io.k8s.api.core.v1.LocalVolumeSource
%% 
%% Local represents directly-attached storage with node affinity
%% (Beta feature)
-type core_v1_local_volume_source() ::
        #{path := binary(),
          fsType => binary()}.

%% io.k8s.api.core.v1.ISCSIVolumeSource
%% 
%% Represents an ISCSI disk. ISCSI volumes can only be mounted as
%% read/write once. ISCSI volumes support ownership management and
%% SELinux relabeling.
-type core_v1_iscsi_volume_source() ::
        #{targetPortal := binary(),
          secretRef => k8s_model:core_v1_local_object_reference(),
          readOnly => boolean(),
          portals => [binary()],
          lun := integer(),
          iscsiInterface => binary(),
          iqn := binary(),
          initiatorName => binary(),
          fsType => binary(),
          chapAuthSession => boolean(),
          chapAuthDiscovery => boolean()}.

%% io.k8s.api.core.v1.Event
%% 
%% Event is a report of an event somewhere in the cluster. Events
%% have a limited retention time and triggers and messages may
%% evolve with time. Event consumers should not rely on the timing
%% of an event with a given Reason reflecting a consistent
%% underlying trigger, or the continued existence of events with
%% that Reason. Events should be treated as informative,
%% best-effort, supplemental data.
-type core_v1_event() ::
        #{type => binary(),
          source => k8s_model:core_v1_event_source(),
          series => k8s_model:core_v1_event_series(),
          reportingInstance => binary(),
          reportingComponent => binary(),
          related => k8s_model:core_v1_object_reference(),
          reason => binary(),
          metadata := k8s_model:apimachinery_apis_meta_v1_object_meta(),
          message => binary(),
          lastTimestamp => k8s_model:apimachinery_apis_meta_v1_time(),
          kind => binary(),
          involvedObject := k8s_model:core_v1_object_reference(),
          firstTimestamp => k8s_model:apimachinery_apis_meta_v1_time(),
          eventTime => k8s_model:apimachinery_apis_meta_v1_micro_time(),
          count => integer(),
          apiVersion => binary(),
          action => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps
%% 
%% JSONSchemaProps is a JSON-Schema following Specification Draft 4
%% (http://json-schema.org/).
-type apiextensions_v1beta1_json_schema_props() ::
        #{uniqueItems => boolean(),
          maximum => number(),
          externalDocs => k8s_model:apiextensions_v1beta1_external_documentation(),
          title => binary(),
          'x-kubernetes-list-type' => binary(),
          multipleOf => number(),
          anyOf => [k8s_model:apiextensions_v1beta1_json_schema_props()],
          format => binary(),
          'x-kubernetes-embedded-resource' => boolean(),
          exclusiveMinimum => boolean(),
          'x-kubernetes-map-type' => binary(),
          id => binary(),
          minimum => number(),
          definitions => #{_ := k8s_model:apiextensions_v1beta1_json_schema_props()},
          minItems => integer(),
          additionalProperties => k8s_model:apiextensions_v1beta1_json_schema_props_or_bool(),
          example => k8s_model:apiextensions_v1beta1_json(),
          patternProperties => #{_ := k8s_model:apiextensions_v1beta1_json_schema_props()},
          type => binary(),
          maxItems => integer(),
          dependencies => #{_ := k8s_model:apiextensions_v1beta1_json_schema_props_or_string_array()},
          'x-kubernetes-int-or-string' => boolean(),
          '$schema' => binary(),
          maxProperties => integer(),
          properties => #{_ := k8s_model:apiextensions_v1beta1_json_schema_props()},
          additionalItems => k8s_model:apiextensions_v1beta1_json_schema_props_or_bool(),
          items => k8s_model:apiextensions_v1beta1_json_schema_props_or_array(),
          'not' => k8s_model:apiextensions_v1beta1_json_schema_props(),
          oneOf => [k8s_model:apiextensions_v1beta1_json_schema_props()],
          'x-kubernetes-preserve-unknown-fields' => boolean(),
          default => k8s_model:apiextensions_v1beta1_json(),
          required => [binary()],
          description => binary(),
          allOf => [k8s_model:apiextensions_v1beta1_json_schema_props()],
          minLength => integer(),
          nullable => boolean(),
          pattern => binary(),
          'x-kubernetes-list-map-keys' => [binary()],
          '$ref' => binary(),
          enum => [k8s_model:apiextensions_v1beta1_json()],
          exclusiveMaximum => boolean(),
          maxLength => integer(),
          minProperties => integer()}.

%% io.k8s.api.rbac.v1.Subject
%% 
%% Subject contains a reference to the object or user identities a
%% role binding applies to. This can either hold a direct API object
%% reference, or a value for non-objects such as user and group
%% names.
-type rbac_v1_subject() ::
        #{namespace => binary(),
          name := binary(),
          kind := binary(),
          apiGroup => binary()}.

%% io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.ServiceReference
%% 
%% ServiceReference holds a reference to Service.legacy.k8s.io
-type apiregistration_v1beta1_service_reference() ::
        #{port => integer(),
          namespace => binary(),
          name => binary()}.

%% io.k8s.api.core.v1.Taint
%% 
%% The node this Taint is attached to has the "effect" on any pod
%% that does not tolerate the Taint.
-type core_v1_taint() ::
        #{value => binary(),
          timeAdded => k8s_model:apimachinery_apis_meta_v1_time(),
          key := binary(),
          effect := binary()}.

%% io.k8s.api.autoscaling.v2beta1.ResourceMetricSource
%% 
%% ResourceMetricSource indicates how to scale on a resource metric
%% known to Kubernetes, as specified in requests and limits,
%% describing each pod in the current scale target (e.g. CPU or
%% memory). The values will be averaged together before being
%% compared to the target. Such metrics are built in to Kubernetes,
%% and have special scaling options on top of those available to
%% normal per-pod metrics using the "pods" source. Only one "target"
%% type should be set.
-type autoscaling_v2beta1_resource_metric_source() ::
        #{targetAverageValue => k8s_model:apimachinery_api_resource_quantity(),
          targetAverageUtilization => integer(),
          name := binary()}.

%% io.k8s.api.extensions.v1beta1.Ingress
%% 
%% Ingress is a collection of rules that allow inbound connections
%% to reach the endpoints defined by a backend. An Ingress can be
%% configured to give services externally-reachable urls, load
%% balance traffic, terminate SSL, offer name based virtual hosting
%% etc. DEPRECATED - This group version of Ingress is deprecated by
%% networking.k8s.io/v1beta1 Ingress. See the release notes for more
%% information.
-type extensions_v1beta1_ingress() ::
        #{status => k8s_model:extensions_v1beta1_ingress_status(),
          spec => k8s_model:extensions_v1beta1_ingress_spec(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.api.events.v1beta1.EventSeries
%% 
%% EventSeries contain information on series of events, i.e. thing
%% that was/is happening continuously for some time.
-type events_v1beta1_event_series() ::
        #{lastObservedTime := k8s_model:apimachinery_apis_meta_v1_micro_time(),
          count := integer()}.

%% io.k8s.api.authentication.v1beta1.TokenReviewStatus
%% 
%% TokenReviewStatus is the result of the token authentication
%% request.
-type authentication_v1beta1_token_review_status() ::
        #{user => k8s_model:authentication_v1beta1_user_info(),
          error => binary(),
          authenticated => boolean(),
          audiences => [binary()]}.

%% io.k8s.api.batch.v1beta1.CronJobStatus
%% 
%% CronJobStatus represents the current state of a cron job.
-type batch_v1beta1_cron_job_status() ::
        #{lastScheduleTime => k8s_model:apimachinery_apis_meta_v1_time(),
          active => [k8s_model:core_v1_object_reference()]}.

%% io.k8s.api.batch.v2alpha1.CronJobStatus
%% 
%% CronJobStatus represents the current state of a cron job.
-type batch_v2alpha1_cron_job_status() ::
        #{lastScheduleTime => k8s_model:apimachinery_apis_meta_v1_time(),
          active => [k8s_model:core_v1_object_reference()]}.

%% io.k8s.api.core.v1.StorageOSVolumeSource
%% 
%% Represents a StorageOS persistent volume resource.
-type core_v1_storage_os_volume_source() ::
        #{volumeNamespace => binary(),
          volumeName => binary(),
          secretRef => k8s_model:core_v1_local_object_reference(),
          readOnly => boolean(),
          fsType => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition
%% 
%% CustomResourceColumnDefinition specifies a column for server side
%% printing.
-type apiextensions_v1_custom_resource_column_definition() ::
        #{type := binary(),
          priority => integer(),
          name := binary(),
          jsonPath := binary(),
          format => binary(),
          description => binary()}.

%% io.k8s.api.autoscaling.v2beta2.ResourceMetricSource
%% 
%% ResourceMetricSource indicates how to scale on a resource metric
%% known to Kubernetes, as specified in requests and limits,
%% describing each pod in the current scale target (e.g. CPU or
%% memory). The values will be averaged together before being
%% compared to the target. Such metrics are built in to Kubernetes,
%% and have special scaling options on top of those available to
%% normal per-pod metrics using the "pods" source. Only one "target"
%% type should be set.
-type autoscaling_v2beta2_resource_metric_source() ::
        #{target := k8s_model:autoscaling_v2beta2_metric_target(),
          name := binary()}.

%% io.k8s.api.flowcontrol.v1beta1.NonResourcePolicyRule
%% 
%% NonResourcePolicyRule is a predicate that matches non-resource
%% requests according to their verb and the target non-resource URL.
%% A NonResourcePolicyRule matches a request if and only if both (a)
%% at least one member of verbs matches the request and (b) at least
%% one member of nonResourceURLs matches the request.
-type flowcontrol_v1beta1_non_resource_policy_rule() ::
        #{verbs := [binary()],
          nonResourceURLs := [binary()]}.

%% io.k8s.api.policy.v1beta1.SupplementalGroupsStrategyOptions
%% 
%% SupplementalGroupsStrategyOptions defines the strategy type and
%% options used to create the strategy.
-type policy_v1beta1_supplemental_groups_strategy_options() ::
        #{rule => binary(),
          ranges => [k8s_model:policy_v1beta1_id_range()]}.

%% io.k8s.api.batch.v1.JobSpec
%% 
%% JobSpec describes how the job execution will look like.
-type batch_v1_job_spec() ::
        #{ttlSecondsAfterFinished => integer(),
          template := k8s_model:core_v1_pod_template_spec(),
          selector => k8s_model:apimachinery_apis_meta_v1_label_selector(),
          parallelism => integer(),
          manualSelector => boolean(),
          completions => integer(),
          backoffLimit => integer(),
          activeDeadlineSeconds => integer()}.

%% io.k8s.api.core.v1.ResourceRequirements
%% 
%% ResourceRequirements describes the compute resource requirements.
-type core_v1_resource_requirements() ::
        #{requests => #{_ := k8s_model:apimachinery_api_resource_quantity()},
          limits => #{_ := k8s_model:apimachinery_api_resource_quantity()}}.

%% io.k8s.api.rbac.v1.RoleBinding
%% 
%% RoleBinding references a role, but does not contain it. It can
%% reference a Role in the same namespace or a ClusterRole in the
%% global namespace. It adds who information via Subjects and
%% namespace information by which namespace it exists in.
%% RoleBindings in a given namespace only have effect in that
%% namespace.
-type rbac_v1_role_binding() ::
        #{subjects => [k8s_model:rbac_v1_subject()],
          roleRef := k8s_model:rbac_v1_role_ref(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary()}.

%% io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement
%% 
%% A label selector requirement is a selector that contains values,
%% a key, and an operator that relates the key and values.
-type apimachinery_apis_meta_v1_label_selector_requirement() ::
        #{values => [binary()],
          operator := binary(),
          key := binary()}.

%% io.k8s.api.extensions.v1beta1.IngressStatus
%% 
%% IngressStatus describe the current state of the Ingress.
-type extensions_v1beta1_ingress_status() ::
        #{loadBalancer => k8s_model:core_v1_load_balancer_status()}.

%% io.k8s.api.rbac.v1beta1.ClusterRole
%% 
%% ClusterRole is a cluster level, logical grouping of PolicyRules
%% that can be referenced as a unit by a RoleBinding or
%% ClusterRoleBinding. Deprecated in v1.17 in favor of
%% rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be
%% served in v1.22.
-type rbac_v1beta1_cluster_role() ::
        #{rules => [k8s_model:rbac_v1beta1_policy_rule()],
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          apiVersion => binary(),
          aggregationRule => k8s_model:rbac_v1beta1_aggregation_rule()}.

%% io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec
-type authorization_v1_self_subject_rules_review_spec() ::
        #{namespace => binary()}.

%% io.k8s.api.core.v1.NamespaceSpec
%% 
%% NamespaceSpec describes the attributes on a Namespace.
-type core_v1_namespace_spec() ::
        #{finalizers => [binary()]}.

%% io.k8s.api.networking.v1.IngressTLS
%% 
%% IngressTLS describes the transport layer security associated with
%% an Ingress.
-type networking_v1_ingress_tls() ::
        #{secretName => binary(),
          hosts => [binary()]}.

%% io.k8s.api.core.v1.ScopeSelector
%% 
%% A scope selector represents the AND of the selectors represented
%% by the scoped-resource selector requirements.
-type core_v1_scope_selector() ::
        #{matchExpressions => [k8s_model:core_v1_scoped_resource_selector_requirement()]}.

%% io.k8s.api.autoscaling.v2beta2.ExternalMetricSource
%% 
%% ExternalMetricSource indicates how to scale on a metric not
%% associated with any Kubernetes object (for example length of
%% queue in cloud messaging service, or QPS from loadbalancer
%% running outside of cluster).
-type autoscaling_v2beta2_external_metric_source() ::
        #{target := k8s_model:autoscaling_v2beta2_metric_target(),
          metric := k8s_model:autoscaling_v2beta2_metric_identifier()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSON
%% 
%% JSON represents any valid JSON value. These types are supported:
%% bool, int64, float64, string, []interface{},
%% map[string]interface{} and nil.
-type apiextensions_v1beta1_json() ::
        json:value().

%% io.k8s.api.apps.v1.ReplicaSetStatus
%% 
%% ReplicaSetStatus represents the current status of a ReplicaSet.
-type apps_v1_replica_set_status() ::
        #{replicas := integer(),
          readyReplicas => integer(),
          observedGeneration => integer(),
          fullyLabeledReplicas => integer(),
          conditions => [k8s_model:apps_v1_replica_set_condition()],
          availableReplicas => integer()}.

%% io.k8s.api.storage.v1beta1.CSIDriverSpec
%% 
%% CSIDriverSpec is the specification of a CSIDriver.
-type storage_v1beta1_csi_driver_spec() ::
        #{volumeLifecycleModes => [binary()],
          tokenRequests => [k8s_model:storage_v1beta1_token_request()],
          storageCapacity => boolean(),
          requiresRepublish => boolean(),
          podInfoOnMount => boolean(),
          fsGroupPolicy => binary(),
          attachRequired => boolean()}.

%% io.k8s.api.policy.v1beta1.PodDisruptionBudgetList
%% 
%% PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
-type policy_v1beta1_pod_disruption_budget_list() ::
        #{metadata => k8s_model:apimachinery_apis_meta_v1_list_meta(),
          kind => binary(),
          items := [k8s_model:policy_v1beta1_pod_disruption_budget()],
          apiVersion => binary()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources
%% 
%% CustomResourceSubresources defines the status and scale
%% subresources for CustomResources.
-type apiextensions_v1_custom_resource_subresources() ::
        #{status => k8s_model:apiextensions_v1_custom_resource_subresource_status(),
          scale => k8s_model:apiextensions_v1_custom_resource_subresource_scale()}.

%% io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ExternalDocumentation
%% 
%% ExternalDocumentation allows referencing an external resource for
%% extended documentation.
-type apiextensions_v1beta1_external_documentation() ::
        #{url => binary(),
          description => binary()}.

%% io.k8s.api.node.v1beta1.RuntimeClass
%% 
%% RuntimeClass defines a class of container runtime supported in
%% the cluster. The RuntimeClass is used to determine which
%% container runtime is used to run all containers in a pod.
%% RuntimeClasses are (currently) manually defined by a user or
%% cluster provisioner, and referenced in the PodSpec. The Kubelet
%% is responsible for resolving the RuntimeClassName reference
%% before running the pod. For more details, see
%% https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md
-type node_v1beta1_runtime_class() ::
        #{scheduling => k8s_model:node_v1beta1_scheduling(),
          overhead => k8s_model:node_v1beta1_overhead(),
          metadata => k8s_model:apimachinery_apis_meta_v1_object_meta(),
          kind => binary(),
          handler := binary(),
          apiVersion => binary()}.
